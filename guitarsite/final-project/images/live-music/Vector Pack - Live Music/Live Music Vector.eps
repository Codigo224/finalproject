%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: Live Music Vector.eps
%%Creator: Adobe Illustrator(R) 12
%%AI8_CreatorVersion: 12.0.0%AI9_PrintingDataBegin%%For: Chris
%%CreationDate: 9/18/2007
%%BoundingBox: 0 0 288 289
%%HiResBoundingBox: 0 0 287.5098 288.7325
%%CropBox: 0 0 287.5098 288.7325
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.19 0
%%+ procset Adobe_CoolType_Core 2.23 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%ADO_BuildNumber: Adobe Illustrator(R) 12.0.0 x198 R agm 4.3861 ct 5.530
%ADO_ContainsXMP: MainFirst
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Utils 70 dict dup begin put
/bdf
{
	bind def
} bind def
/nd{
	null def
}bdf
/xdf
{
	exch def
}bdf
/ldf 
{
	load def
}bdf
/ddf
{
	put
}bdf	
/xddf
{
	3 -1 roll put
}bdf	
/xpt
{
	exch put
}bdf
/ndf
{ 
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/ps_level
	/languagelevel where{
		pop systemdict /languagelevel get exec
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr} stopped {
		-1
	}if
def
/set_gvm
{
	currentglobal exch setglobal
}bdf
/reset_gvm
{
	setglobal
}bdf
/makereadonlyarray
{
	/packedarray where{
		pop packedarray
	}{
		array astore readonly
	}ifelse
}bdf
/map_reserved_ink_name
{
	dup type /stringtype eq{
		dup /Red eq{
			pop (_Red_)
		}{
			dup /Green eq{
				pop (_Green_)
			}{
				dup /Blue eq{
					pop (_Blue_)
				}{
					dup () cvn eq{
						pop (Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf
		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne
			{
			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark
			} if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		} ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/thold_halftone
{ 
	level3
		{sethalftone currenthalftone}
		{
			dup /HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}
			{
				begin
				Width Height mul {
					Thresholds read {pop} if
				} repeat
				end
				currenthalftone
			} ifelse
		}ifelse
} def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%) anchorsearch {pop} if
} bdf
/filter_cmyk
{	
	dup type /filetype ne{
		exch () /SubFileDecode filter
	}
	{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length /AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	] cvx
} bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
} bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type /filetype ne{
		0 () /SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx
			currentdict /srcStr get /readstring cvx /pop cvx
			/dup cvx /length cvx 0 /gt cvx [
				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx
				names_index Names length currentdict /srcStr get length 1 sub {
					1 /index cvx /exch cvx /get cvx
					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx
					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx
				} for
				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx
			] cvx /if cvx
			/end cvx
		] cvx
		bind
		/exec cvx
	] cvx
	end
} bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict /DataSource get def
	/origMultipleDataSources imageDict /MultipleDataSources get def
	/origDecode imageDict /Decode get def
	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def
	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse
	{
		/imbufCnt imageDict /DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub {
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put
		} for
		DeviceN_PS2 {
			imageDict begin
		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def
			/MultipleDataSources false def
			/Decode [0 1] def
			end
		} if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or {
			/srcDataStrs [ imageDict begin
				currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse
				{
					Width Decode length 2 div mul cvi string
				} repeat
				end ] def		
			imageDict begin
		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def
			/Decode [0 1] def
			end
		}{
			imageDict /DataSource [1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx /pop cvx names_index /get cvx /put cvx] cvx put
			imageDict /Decode [0 1] put
		} ifelse
	} ifelse
	imageDict exch
	load exec
	imageDict /DataSource origDataSource put
	imageDict /MultipleDataSources origMultipleDataSources put
	imageDict /Decode origDecode put	
	end
} bdf
/write_image_file
{
	begin
	{ (AGMUTIL_imagefile) (w+) file } stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{ 
			pop
			MultipleDataSources {
			 	0 1 DataSource length 1 sub {
					DataSource type dup
					/arraytype eq {
						pop DataSource exch get exec
					}{
						/filetype eq {
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						} ifelse
					} ifelse
					AGMUTIL_imagefile exch writestring
				} for
			}{
				DataSource type dup
				/arraytype eq {
					pop DataSource exec
				}{
					/filetype eq {
						DataSource imbuf readstring pop
					}{
						DataSource
					} ifelse
				} ifelse
				AGMUTIL_imagefile exch writestring
			} ifelse
		}for
		end
		true
	}ifelse
	end
} bdf
/close_image_file
{
	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile
}def
statusdict /product known userdict /AGMP_current_show known not and{
	/pstr statusdict /product get def
	pstr (HP LaserJet 2200) eq 	
	pstr (HP LaserJet 4000 Series) eq or
	pstr (HP LaserJet 4050 Series ) eq or
	pstr (HP LaserJet 8000 Series) eq or
	pstr (HP LaserJet 8100 Series) eq or
	pstr (HP LaserJet 8150 Series) eq or
	pstr (HP LaserJet 5000 Series) eq or
	pstr (HP LaserJet 5100 Series) eq or
	pstr (HP Color LaserJet 4500) eq or
	pstr (HP Color LaserJet 4600) eq or
	pstr (HP LaserJet 5Si) eq or
	pstr (HP LaserJet 1200 Series) eq or
	pstr (HP LaserJet 1300 Series) eq or
	pstr (HP LaserJet 4100 Series) eq or 
	{
 		userdict /AGMP_current_show /show load put
		userdict /show {
		  currentcolorspace 0 get
		  /Pattern eq
		  {false charpath f}
		  {AGMP_current_show} ifelse
		} put
	}if
	currentdict /pstr undef
} if
/consumeimagedata
{
	begin
	currentdict /MultipleDataSources known not
		{/MultipleDataSources false def} if
	MultipleDataSources
		{
		DataSource 0 get type
		dup /filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup /arraytype eq exch /packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch get exec length exch 0 ne {pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup /filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height { pop DataSource flushbuffer readstring pop pop} for
			end
			}if
		dup /arraytype eq exch /packedarraytype eq or /DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	  2{/exec load}repeat
	  3 1 roll
	  [ 5 1 roll ] bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs /TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{ 
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs /TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type /dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		} if
	dup type /arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		} if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch {cvx} if
}bdf
/clonedict
{
	dup length dict
	begin
		{
		dup type /dicttype eq
			{
				clonedict
			} if
		dup type /arraytype eq
			{
				clonearray
			} if
		def
		}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and
} bdf
/Indexed_DeviceN
{ 
	/indexed_colorspace_dict AGMCORE_gget dup null ne {
		dup /CSDBase known {
			/CSDBase get /CSD get_res /Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	} ifelse
} bdf
/DeviceN_NoneName
{	
	/Names where {
		pop
		false Names
		{
			(None) eq or
		} forall
	}{
		false
	}ifelse
} bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup /arraytype eq exch /packedarraytype eq or
		{
			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}
			{
				true
			}ifelse
		}
		{
			true
		} ifelse
	}
	{
		true
	} ifelse
} bdf
/base_colorspace_type
{
	dup type /arraytype eq {0 get} if
} bdf
/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5 {cleartomark} bind def
}{
	/pdfmark_5 {pdfmark} bind def
}ifelse
/ReadBypdfmark_5
{
	2 dict begin
	/makerString exch def string /tmpString exch def
	{
		currentfile tmpString readline pop
		makerString anchorsearch
		{
		pop pop cleartomark exit
		}{
			3 copy /PUT pdfmark_5 pop 2 copy (\n) /PUT pdfmark_5
		} ifelse
	}loop
	end
} bdf
/doc_setup{
	Adobe_AGM_Utils begin
}bdf
/doc_trailer{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright (C) 1997-2005 Adobe Systems, Inc.  All Rights Reserved.
%% Note: This procset assumes Adobe_AGM_Utils is opened on the stack below it, for
%% definitions of some fundamental procedures.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Core 201 dict dup begin put
/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen [currentscreen] cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_in_pattern false def
/AGMCORE_currentpagedevice nd
/knockout_unitsq nd
currentglobal true setglobal
[/CSA /Gradient /Procedure]
{
	/Generic /Category findresource dup length dict copy /Category defineresource pop
} forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer {readline} stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type /dicttype eq{
		dup /HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup /HalftoneType get 2 eq{
				/GraySpotFunction get
			}{ 
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
} def
/clp_npth
{
	clip newpath
} def
/eoclp_npth
{
	eoclip newpath
} def
/npth_clp
{
	newpath clip
} def
/graphic_setup
{
	/AGMCORE_graphicsave save def
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[] 0 setdash
	10 setmiterlimit
	newpath
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias get exec
	/Adobe_AGM_Image where {
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			get exec
		}{
			pop pop
		}ifelse
	} if
	100 dict begin
	/dictstackcount countdictstack def
	/showpage {} def
	mark
} def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub {end}for
	end
	AGMCORE_graphicsave restore
} def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				} if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}
			{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			} ifelse
		} forall
} bdf
/doc_setup{
	Adobe_AGM_Core begin
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict /AGM_handleerror known not{
		errordict /AGM_handleerror errordict /handleerror get put
		errordict /handleerror {
			Adobe_AGM_Core begin
			$error /newerror get AGMCORE_cur_err null ne and{
				$error /newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error /newerror true put
			end
			errordict /AGM_handleerror get exec
			} bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 10 def
		/AGMCORE_&gsave /gsave ldf
		/AGMCORE_&grestore /grestore ldf
		/AGMCORE_&grestoreall /grestoreall ldf
		/AGMCORE_&save /save ldf
		/AGMCORE_&setoverprint /setoverprint ldf
		/AGMCORE_gdictcopy {
			begin
			{ def } forall
			end
		}def
		/AGMCORE_gput {
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget {
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave {
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore {
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt {1 add} if
			dup AGMCORE_gstack exch get dup /AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall {
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save {
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup /AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub {
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		} for
	}if
	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern /makepattern load def
	}if
	/currentcmykcolor [0 0 0 0] AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace [/DeviceGray] AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent () AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	<<
	/MaxPatternItem currentsystemparams /MaxPatternCache get
	>>
	setuserparams
	end
}def
/page_setup
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3 {
			3 index add neg dup 0 lt {
				pop 0
			} if
			3 1 roll
		} repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{
		pop
	}ndf
	/currentoverprint
	{
		false
	}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{ 
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==
			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf
		} if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where {pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias {
				/Name get exch pop
			} if
			dup dup (None) eq exch (All) eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_in_pattern known {//Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse
						not AGMCORE_currentpagedevice/OverrideSeparations known and
						{
							AGMCORE_currentpagedevice/OverrideSeparations get
							{
								/HqnSpots /ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not
						}{
							gsave
							[/Separation AGMCORE_name /DeviceGray {}]AGMCORE_&setcolorspace
							false
							AGMCORE_currentpagedevice/SeparationColorNames 2 copy known
							{
								get
								{ AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where {pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
				dup true exch
					{
					dup (Cyan) eq exch
					dup (Magenta) eq 3 -1 roll or exch
					dup (Yellow) eq 3 -1 roll or exch
					dup (Black) eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup (Cyan) eq exch
						dup (Magenta) eq 3 -1 roll or exch
						dup (Yellow) eq 3 -1 roll or exch
						(Black) eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					dup (Cyan) eq exch
					dup (Magenta) eq 3 -1 roll or exch
					dup (Yellow) eq 3 -1 roll or exch
					dup (Black) eq 3 -1 roll or
					{pop}
					{convert_spot_to_process or}ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space  
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{ 
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			  	AGMCORE_magenta_plate{
			  		4 3 roll pop pop pop
			  	}{
			  		AGMCORE_yellow_plate{
			  			4 2 roll pop pop pop
			  		}{
			  			4 1 roll pop pop pop
			  		}ifelse
			  	}ifelse
			}ifelse
			settransfer  
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			  	AGMCORE_magenta_plate{
			  		{4 3 roll pop pop pop}
			  	}{
			  		AGMCORE_yellow_plate{
			  			{4 2 roll pop pop pop}
			  		}{
			  			{4 1 roll pop pop pop}
			  		}ifelse
			  	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup /Cyan eq 1 index (Cyan) eq or
					{pop (_cyan_)}if
				dup /Magenta eq 1 index (Magenta) eq or
					{pop (_magenta_)}if
				dup /Yellow eq 1 index (Yellow) eq or
					{pop (_yellow_)}if
				dup /Black eq 1 index (Black) eq or
					{pop (_black_)}if
				}def
			dup type /arraytype eq
				{[exch {filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3 {
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup (Cyan) eq exch /Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup (Magenta) eq exch /Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup (Yellow) eq exch /Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup (Black) eq exch /Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type /stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string /string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in /readstring cvx
						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx
						[/pop cvx ()]cvx /ifelse cvx
					]cvx /ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type /dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict /Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode [1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0 [C0 channel get 1 exch sub] def
							/C1 [C1 channel get 1 exch sub] def
							}{
							/C0 [1] def
							/C1 [1] def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def			
						}if
					currentdict /Range known
						{/Range [0 1] def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict /Function known
					{
					currentdict /Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf
					/ColorSpace [/DeviceGray] def
					}{
					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq
						{
						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get /Separation eq
						{
							{
								[1 /exch cvx /sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx
							}{
								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2 /DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup /ColorSpace get
				dup type /arraytype ne
					{[exch]}if
				dup 0 get /DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get /Separation eq
					{
					exch begin
					ColorSpace 1 get dup /None ne exch /All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get /exec cvx
										4 AGMCORE_plate_ndx sub -1 /roll cvx
										4 1 /roll cvx
										3 [/pop cvx]cvx /repeat cvx
										1 /exch cvx /sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get /DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get /exec cvx
									4 AGMCORE_plate_ndx sub -1 /roll cvx
									4 1 /roll cvx
									3 [/pop cvx]cvx /repeat cvx
									1 /exch cvx /sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace [/DeviceGray] def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type /arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get /CIEBasedA eq
								{
								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def
								}if
							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or
								{
								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def
								}if
							ColorSpace 0 get /CIEBasedDEFG eq
								{
								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup /AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace [/Separation (None) /DeviceGray {}] def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup /AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup /PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading /AGMCORE_ignoreshade known
					currentdict end exch
					{pop <</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{ 
				4 {4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{ 
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf
				end
				[/Separation 4 -1 roll /DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation (All) /DeviceGray {}] setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4 {4 index mul 4 1 roll} repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval {255 div} forall
	} bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	} bdf
	/n_color_components
	{
		base_colorspace_type
		dup /DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo /moveto ldf
		/li /lineto ldf
		/cv /curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2 /setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace /setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where {
						begin
						dup 0 get dup /Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[ 
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get [ 
									exch {
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									} forall 
								] 1 xpt
							}if
						}ifelse
						end
					} if
				}if
			}def
			/setcolorspace
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get /Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		} def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		} def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup /DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup /DeviceGray ne{
				dup /DeviceCMYK ne{
					dup /DeviceRGB ne{
						dup /Separation eq{
							pop
							currentcolorspace 3 get exec
							currentcolorspace 2 get
						}{
							dup /Indexed eq{
								pop
								currentcolorspace 3 get dup type /stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err /AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		} def
	}ifelse
	/sop /setoverprint ldf
	/lw /setlinewidth ldf
	/lc /setlinecap ldf
	/lj /setlinejoin ldf
	/ml /setmiterlimit ldf
	/dsh /setdash ldf
	/sadj /setstrokeadjust ldf
	/gry /setgray ldf
	/rgb /setrgbcolor ldf
	/cmyk /setcmykcolor ldf
	/sep /setsepcolor ldf
	/devn /setdevicencolor ldf
	/idx /setindexedcolor ldf
	/colr /setcolor ldf
	/csacrd /set_csa_crd ldf
	/sepcs /setsepcolorspace ldf
	/devncs /setdevicencolorspace ldf
	/idxcs /setindexedcolorspace ldf
	/cp /closepath ldf
	/clp /clp_npth ldf
	/eclp /eoclp_npth ldf
	/f /fill ldf
	/ef /eofill ldf
	/@ /stroke ldf
	/nclp /npth_clp ldf
	/gset /graphic_setup ldf
	/gcln /graphic_cleanup ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin /clonedict load end def
	/clonearray Adobe_AGM_Utils begin /clonearray load end def
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {
			bind
		}if
		def
	}forall
	/getrampcolor
	{ 
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type /stringtype eq {indx get} if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		} for
		ColorSpaceFamily /Separation eq 
		{sep}
		{
			ColorSpaceFamily /DeviceN eq
			{devn} {setcolor}ifelse
		}ifelse
	} bdf
	/sssetbackground {aload pop setcolor} bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where {pop /setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			newpath
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			newpath
		} if
		c1x c2x eq
		{
			c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse
		}
		{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if
			c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if
		} ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{ pathbbox } stopped
		{ 0 0 0 0 } if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}
		{
			/max { 2 copy gt { pop } {exch pop} ifelse } bdf
			/min { 2 copy lt { pop } {exch pop} ifelse } bdf
			rampdict begin
			40 dict begin
			background length 0 gt { background sssetbackground gsave clippath fill grestore } if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}
				{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}
						{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{ /theta 89.99 def}
							{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}
							{
								/L1maxX 0 def
								/L2maxX 0 def
							} ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						} ifelse
					} ifelse
				} ifelse
			} if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt { exch } if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			} if
		} if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		newpath
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}
		{
			0
			numsteps
			{
				dup
				subsampling { round cvi } if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			} repeat
			pop
		} ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}
			{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}
				{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}
					{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{ /theta 89.99 def}
						{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}
						{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					} ifelse
				} ifelse
			} ifelse
		} if
		grestore
		grestore
		end
		end
		end
		} ifelse
	} bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where {pop /setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			newpath
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			newpath
		} if
		x1 x2 eq
		{
			y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
		}
		{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
			x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{ pathbbox } stopped
		{ 0 0 0 0 } if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}
		{
			rampdict begin
			20 dict begin
			background length 0 gt { background sssetbackground gsave clippath fill grestore } if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt { exch } if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				} if
			} if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				} if
			} if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling { round cvi } if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			} repeat
			pop
			ext1 {
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				} if
			} if
			grestore
			grestore
			end
			end
			end
		} ifelse
	} bdf
}def
/page_trailer
{
	end
}def
/doc_trailer{
}def
/capture_currentpagedevice {
	//Adobe_AGM_Core/AGMCORE_currentpagedevice currentpagedevice ddf
} def
systemdict /findcolorrendering known{
	/findcolorrendering systemdict /findcolorrendering get def
}if
systemdict /setcolorrendering known{
	/setcolorrendering systemdict /setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup //Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name /MappedCSA xdf}ifelse
} def
/setsepcolor
{ 
	/sep_colorspace_dict AGMCORE_gget begin
		dup /sep_tint exch AGMCORE_gput
		TintProc
	end
} def
/setdevicencolor
{ 
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		} for
		TintProc
	end
} def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2 {AGMCORE_tmp mul NComponents 1 roll} repeat
			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll
				} repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
} def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
} def
/sep_proc_name
{
	dup 0 get 
	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{
		pop [/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
} def
/setsepcolorspace
{ 
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup /sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup () eq exch (All) eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 
		] setcolorspace_opt
		/TintProc {
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get /DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc [
				Components aload pop Name findcmykcustomcolor 
				/exch cvx /setcustomcolor cvx
			] cvx bdf
		}{
 			AGMCORE_host_sep Name (All) eq and{
 				/TintProc { 
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name () eq and{
					/TintProc [
						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{
							cvx /setcmykcolor cvx
						}{
							cvx /setgray cvx
						}ifelse
					] cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc [
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get /DeviceGray eq{
								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx
							}if
							/Name cvx /findcmykcustomcolor cvx /exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load /exec cvx
								/not cvx /and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							] cvx /if cvx
							/setcustomcolor cvx
						] cvx bdf
 					}{ 
						/TintProc {setcolor} bdf
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
} def
/additive_blend
{
  	3 dict begin
  	/numarrays xdf
  	/numcolors xdf
  	0 1 numcolors 1 sub
  		{
  		/c1 xdf
  		1
  		0 1 numarrays 1 sub
  			{
			1 exch add /index cvx
  			c1 /get cvx /mul cvx
  			}for
 		numarrays 1 add 1 /roll cvx 
  		}for
 	numarrays [/pop cvx] cvx /repeat cvx
  	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add /index cvx  
			c1 /get cvx /sub cvx /mul cvx
			}for
		/sub cvx
		numarrays 1 add 1 /roll cvx
		}for
	numarrays [/pop cvx] cvx /repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc [
		/TintTransform cvx /setcolor cvx
	] cvx bdf
	MappedCSA setcolorspace_opt
} bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length {pop} repeat
	end
} bdf
/setdevicencolorspace
{ 
	dup /AliasedColorants known {false}{true}ifelse 
	current_spot_alias and {
		7 dict begin
		/names_index 0 def
		dup /names_len exch /Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup /Names get
		{
			dup map_alias {
				exch pop
				dup /ColorLookup known {
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup /Components known {
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index [null null null null] put
						end
					} ifelse
				} ifelse
				new_names names_index 3 -1 roll /Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup /LookupTables known {
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index [null null null null] put
					end
				} ifelse
			} ifelse
			/names_index names_index 1 add def 
		} forall
		alias_cnt 0 gt {
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge {0 get length}{length}ifelse def
			0 1 names_len 1 sub {
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge {0 get length}{length}ifelse lut_entry_len ne {
					/AliasedColorants false def
					exit
				}
				{
					new_LookupTables names_index get 0 get null eq {
						dup /Names get names_index get /name xdf
						name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq
						or or or not {
							/AliasedColorants false def
							exit
						} if
					} if
				} ifelse
			} for
			lut_entry_len 1 eq {
				/AliasedColorants false def
			} if
			AliasedColorants {
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq {/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod /Additive eq {/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict /TTTablesIdx known not {
					/TTTablesIdx -1 def
				} if
				end
			} if
		}if
		end
	} if
	dup /devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict /AliasedColorants known {
		AliasedColorants
	}{
		false
	} ifelse
	dup not {
		CSA map_csa
	} if
	/TintTransform load type /nulltype eq or {
		/TintTransform [
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup (Cyan) eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup (Magenta) eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0 /exch cvx 0 0
							}
							{
							(Yellow) eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1 /roll cvx 0
								}
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1 /roll cvx
								} ifelse
							} ifelse
						} ifelse
					5 -1 /roll cvx /astore cvx
					}
					{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx /mul cvx /round cvx /cvi cvx /get cvx
					} ifelse
					Names length TTTablesIdx add 1 add 1 /roll cvx
				} for
			Names length [/pop cvx] cvx /repeat cvx
			NComponents Names length
  			TintMethod /Subtractive eq
  				{
  				subtractive_blend
  				}
  				{
  				additive_blend
  				} ifelse
		] cvx bdf
	} if
	AGMCORE_host_sep {
		Names convert_to_process {
			exec_tint_transform
		}
		{	
			currentdict /AliasedColorants known {
				AliasedColorants not
			}{
				false
			} ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants {
				/currentspotalias current_spot_alias def
				false set_spot_alias
			} if
			Names {
				AGMCORE_is_cmyk_sep {
					dup (Cyan) eq AGMCORE_cyan_plate and exch
					dup (Magenta) eq AGMCORE_magenta_plate and exch
					dup (Yellow) eq AGMCORE_yellow_plate and exch
					(Black) eq AGMCORE_black_plate and or or or {
						/devicen_colorspace_dict AGMCORE_gget /TintProc [
							Names names_index /devn_makecustomcolor cvx
						] cvx ddf
						/painted? true def
					} if
					painted? {exit} if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {
					/devicen_colorspace_dict AGMCORE_gget /TintProc [
						Names names_index /devn_makecustomcolor cvx
					] cvx ddf
					/painted? true def
					exit
					} if
				} ifelse
				/names_index names_index 1 add def
			} forall
			AvoidAliasedColorants {
				currentspotalias set_spot_alias
			} if
			painted? {
				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget /TintProc [
					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx
 					0 0 0 0 /setcmykcolor cvx
				] cvx ddf
			} ifelse
			end
		} ifelse
	}
	{
		AGMCORE_in_rip_sep {
			Names convert_to_process not
		}{
			level3
		} ifelse
		{
			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and {
				[
					Names /length cvx [/pop cvx] cvx /repeat cvx
				] cvx bdf
			}{
				{setcolor} bdf
			} ifelse
		}{
			exec_tint_transform
		} ifelse
	} ifelse
	set_crd
	/AliasedColorants false def
	end
} def
/setindexedcolorspace
{
	dup /indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict /CSDBase known {
			CSDBase /CSD get_res begin
			currentdict /Names known {
				currentdict devncs
			}{
				1 currentdict sepcs
			} ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt /Names where {pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal {
					/tableIndex xdf
					Lookup dup type /stringtype eq {
						compCnt tableIndex map_index
					}{
						exec
					} ifelse
					/Names where {
						pop setdevicencolor
					}{
						setsepcolor
					} ifelse
					currentgray
					tableIndex exch
					HiVal mul cvi 
					NewLookup 3 1 roll put
				} for
				[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt
				end
			}{
				level3
				{
					currentdict /Names known {
						[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt
					}{
						[/Indexed [/Separation Name MappedCSA sep_proc_name load] HiVal Lookup] setcolorspace_opt
					} ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict /Names known {
						Lookup dup type /stringtype eq
							{/exch cvx CSDBase /CSD get_res /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}
							{/exec cvx}ifelse
							/TintTransform load /exec cvx
					}{
						Lookup dup type /stringtype eq
							{/exch cvx /get cvx 255 /div cvx}
							{/exec cvx}ifelse
							CSDBase /CSD get_res /MappedCSA get sep_proc_name exch pop /load cvx /exec cvx
					} ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			} ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{
						pop [/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{ 
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval {} forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						} bind
					}{
						Lookup
					}ifelse
				}ifelse
				] setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep {
		/indexed_colorspace_dict AGMCORE_gget dup /CSDBase known { 
			begin
			CSDBase /CSD get_res begin
			currentdict /Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
			end
		}{
			/Lookup get 4 3 -1 roll map_index setcmykcolor
		} ifelse
	}{
		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSDBase known and {
			/indexed_colorspace_dict AGMCORE_gget /CSDBase get /CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		} ifelse
	}ifelse
} def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode [0 1] def
		/DataSource <FF> def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict /image get exec
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup /CSD eq {
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	} ifelse
}def
/del_res
{
	{
		aload pop exch
		dup /CSD eq {
			pop 
			{
				//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef
			}forall
		}{
			exch
			{
				1 index undefineresource
			}forall
			pop
		} ifelse
	} forall
}def
/get_res
{
	dup /CSD eq {
		pop
		dup type dup /nametype eq exch /stringtype eq or {
			AGMCORE_CSD_cache exch get
		} if
	}{
		findresource
	} ifelse
}def
/get_csa_by_name
{
	dup type dup /nametype eq exch /stringtype eq or{
		/CSA get_res
	} if
}def
/pattern_buf_init
{
	/count get 0 0 put
} def
/pattern_buf_next
{
	dup /count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
} def
/cachepattern_compress
{
	5 dict begin
	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def
	/patarray 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	patarray 1 array dup 0 1 put /count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq {
			pop
		}{
			patarray dup length 1 sub 3 -1 roll put
		} ifelse
		{string_size}{0}ifelse string
	} /LZWEncode filter def
	{ 		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not {exit} if
	} loop
	LZWFilter closefile
	patarray				
	end
}def
/cachepattern
{
	2 dict begin
	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def
	/patarray 20 dict def
	currentglobal true setglobal 
	patarray 1 array dup 0 1 put /count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		patarray dup length 1 sub 3 -1 roll put
		not {exit} if
	} loop
	patarray dup dup length 1 sub () put					
	end	
}def
/wrap_paintproc
{ 
  statusdict /currentfilenameextend known{
	clonedict
	begin
	/OldPaintProc /PaintProc load def
	/PaintProc
	{
		mark exch
		dup /OldPaintProc get stopped
		{closefile restore end} if
		cleartomark
	}  def
	end
  } {pop} ifelse
} def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			  1 index begin
		BBox 0 get XStep div cvi XStep mul /xshift exch neg def
		BBox 1 get YStep div cvi YStep mul /yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[ xshift yshift /translate load null /exec load ] dup
		3 /PaintProc load put cvx /PaintProc exch def
		end
	1 index dup /ID get exch /Pattern add_res
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup /PatternType get 1 eq{
		dup /PaintType get 1 eq{
			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{
		pop
	}{
		setcolorspace
	}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}{null}ifelse
	Intent ne {
		Intent /ColorRendering {findresource} stopped
		{
			pop pop systemdict /findcolorrendering known
			{
				Intent findcolorrendering pop
				/ColorRendering findresource 
				true
			}
			{false} ifelse
		}
		{true} ifelse
		{
			dup begin
			currentdict /TransformPQR known {
				currentdict /TransformPQR get aload pop
				3 {{} eq 3 1 roll} repeat or or
			}
			{true} ifelse
			currentdict /MatrixPQR known {
				currentdict /MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true} ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR [
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add} bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add} bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add} bind
				] def
				/MatrixPQR [ 0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296 ] def
				/RangePQR [-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392] def
				currentdict end
			} if
			setcolorrendering_opt
		} if		
	}if
} def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict /ColorRendering known{
			ColorRendering /ColorRendering {findresource} stopped not {setcolorrendering_opt} if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type /arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process //Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp) flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep) flushinput
	}if
}def
/cpaint_gend
{
	newpath
}def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add} if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0} ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup /Name get map_alias {/CSD put}{pop} ifelse} forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get /CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not {
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put
	} if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		currentdict/TintProc known currentdict/CSA known and 3 1 roll
		//Adobe_AGM_Core begin
		dup /customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			4 -1 roll{
				exch pop /sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
			pop
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd /setpagedevice load def
	/setpagedevice { get_gstate spd set_gstate } def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known{
			currentpagedevice/NegativePrint get //Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<< /NegativePrint //Adobe_AGM_Core/AGMCORE_inverting get >> setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 
		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore
	}if
	end
}def
/lw_save_restore_override {
	/md where {
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{} def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage /showpage load def}
		ifelse
		/showpage {orig_showpage gR} def
		end
	}if
}def
/pscript_showpage_override {
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage /restore load def
		/restore {exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where {
		pop
		md /initializepage known {
			md /initializepage {} put
		} if
		md /rC known {
			md /rC {4{pop}repeat} put
		} if
	}if
	/mysetup where {
		/mysetup [1 0 0 1 0 0] put
	}if
	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
	/PrepsDict where
		{pop}
		{
		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq
			{
			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def
	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def
	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) def
end
/set_def_ht
{
	AGMCORE_def_ht sethalftone
} def
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.25 0
%%Copyright: Copyright 1997-2005 Adobe Systems Incorporated.  All Rights Reserved.
%%Version: 2.25 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }
if
userdict /Adobe_CoolType_Core 60 dict dup begin put
/Adobe_CoolType_Version 2.25 def
/Level2?
	systemdict /languagelevel known dup
		{ pop systemdict /languagelevel get 2 ge }
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal /pop load def
	/gcheck { pop false } bind def
	/currentpacking false def
	/setpacking /pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict /Adobe_CoolType_Data 2 copy known not
	 { 2 copy 10 dict put }
if
get
	 begin
	 /@opStackCountByLevel 32 dict def
	 /@opStackLevel 0 def
	 /@dictStackCountByLevel 32 dict def
	 /@dictStackLevel 0 def
	 end
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup /args
			7 index
			5 add array put
			put get
			}
			{
			get dup /args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch /args exch put
				}
				{ pop }
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{ pop count }
			if
			dup /argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{ pop }
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	} bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{ { pop } repeat }
				{ pop }
			ifelse
			args 0 argCount getinterval {} forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{ { end } repeat }
		{ pop }
	ifelse
	} bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	} bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	} bind def
/@ReRaise
	{
	cvx $error /errorname get errordict exch get exec
	stop
	} bind def
/@Stopped
	{
	0 @#Stopped
	} bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{ @_RestoreStackLevels true }
		{ @_PopStackLevels false }
	ifelse
	} bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	} bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch /@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					 { (*) { pop stop } 128 string /Category resourceforall }
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data /@shouldNotDisappearDict get ne dup
					 {
						  /@shouldNotDisappearDictValue known
								{
										  {
												end
												currentdict 1 index eq
													 { pop exit }
												if
										  }
									 loop
								}
						  if
					 }
				if
				end
		}
		{ false }
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{ /steveamerige /Category resourcestatus }
		stopped
			{ cleartomark true }
			{ cleartomark currentglobal not }
		ifelse
		}
		{ false }
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
				{ cleartomark false }
				{ { 3 2 roll pop true } { cleartomark false } ifelse }
			ifelse
			end
		} bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad /ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup /CMap CTHasResourceStatusBug
						{ CTResourceStatus }
						{ resourcestatus }
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup /CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{ exit }
								{ stop }
							ifelse
							}
						ifelse
						}
						{ pop }
					ifelse
					}
				128 string /CMap resourceforall
				}
			stopped
				{ cleartomark }
			stopped pop
			setglobal
			}
		if
		}
	if
	} bind def
/doc_setup
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mov /moveto load def
		/nfnt /newencodedfont load def
		/mfnt /makefont load def
		/sfnt /setfont load def
		/ufnt /undefinefont load def
		/chp /charpath load def
		/awsh /awidthshow load def
		/wsh /widthshow load def
		/ash /ashow load def
		/sh /show load def
		end
		currentglobal false setglobal
	  userdict /Adobe_CoolType_Data 2 copy known not
		  { 2 copy 10 dict put }
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	} bind def
/doc_trailer
	{
	currentdict Adobe_CoolType_Core eq
		{ end }
	if
	} bind def
/page_setup
	{
	Adobe_CoolType_Core begin
	} bind def
/page_trailer
	{
	end
	} bind def
/unload
	{
	systemdict /languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{ undef }
				{ pop pop }
			ifelse
			}
		if
		}
	if
	} bind def
/ndf
	{
	1 index where
		{ pop pop pop }
		{ dup xcheck { bind } if def }
	ifelse
	} def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where { /globaldict get begin } if
			dup where pop exch get
		/globaldict where { pop end } if
		end
	end
Adobe_CoolType_Core_Defined
	{ /systemfindfont exch def }
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{ pop } ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq { 0 } { dup length } ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index /FID eq
				{ pop pop }
				{ def }
			ifelse
			}
		forall
		dup null eq
			{ pop }
			{ { def } forall }
		ifelse
		currentdict
		end
	exch setglobal
	} bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	} bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index  known
			{ SharedFontDirectory 3 index get /FontReferenced known }
			{ false }
		ifelse
		}
		{
		FontDirectory 3 index known
			{ FontDirectory 3 index get /FontReferenced known }
			{
			SharedFontDirectory 3 index known
				{ SharedFontDirectory 3 index get /FontReferenced known }
				{ false }
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont /FontReferenced get
		2 index dup type /nametype eq
			{findfont}
		if ne
			{ pop false }
		if
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{ 2 copy get 3 index 3 1 roll put }
		for
		pop pop pop
		}
		{
		dup type /nametype eq
		  { findfont }
	  if
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index /FID ne
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type /stringtype eq { cvn } if def dup
			currentdict
			end
		definefont def
		}
	ifelse
	} bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type /dicttype ne
			{ 0 dict }
		if
		currentdict /$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{ def } forall
					{ def } forall
					currentdict
					dup /$Init known
						{ dup /$Init get exec }
					if
					end
				/$Strategy exch def
				}
				{ pop pop pop }
			ifelse
			}
			{ pop pop }
		ifelse
		end
	} bind def
/scff
	{
	$SubstituteFont
		begin
		dup type /stringtype eq
			{ dup length exch }
			{ null }
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{ $sname }
			ifelse def
		end
		{ findfont }
	@Stopped
		{
		dup length 8 add string exch
		1 index 0 (BadFont:) putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{ findfont }
		@Stopped
			{ pop /Courier findfont }
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	} bind def
/isWidthsOnlyFont
	{
	dup /WidthsOnly known
		{ pop pop true }
		{
		dup /FDepVector known
			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }
			{
			dup /FDArray known
				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }
				{ pop }
			ifelse
			}
		ifelse
		}
	ifelse
	} bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 4 index def
		/$doSmartSub false def
		end
	3 index
	currentglobal false setglobal exch
	/CompatibleFonts /ProcSet resourcestatus
		{
		pop pop
		/CompatibleFonts /ProcSet findresource
			begin
			dup /CompatibleFont currentexception
			1 index /CompatibleFont true setexception
			1 index /Font resourcestatus
				{
				pop pop
				3 2 roll setglobal
				end
				exch
				dup findfont
				/CompatibleFonts /ProcSet findresource
					begin
					3 1 roll exch /CompatibleFont exch setexception
					end
				}
				{
				3 2 roll setglobal
				1 index exch /CompatibleFont exch setexception
				end
				findfont
				$SubstituteFont /$substituteFound true put
				}
			ifelse
		}
		{ exch setglobal findfont }
	ifelse
	$SubstituteFont
		begin
		$substituteFound
			{
		 false
		 (%%[Using embedded font ) print
		 5 index ?str1 cvs print
		 ( to avoid the font substitution problem noted earlier.]%%\n) print
		 }
			{
			dup /FontName known
				{
				dup /FontName get $fontname eq
				1 index /DistillerFauxFont known not and
				/currentdistillerparams where
					{ pop false 2 index isWidthsOnlyFont not and }
				if
				}
				{ false }
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		exch pop exch pop exch
		2 dict dup /Found 3 index put
		exch findfont exch
		}
		{
		exch exec
		exch dup findfont
		dup /FontType get 3 eq
	  {
		  exch ?str1 cvs
		  dup length 1 sub
		  -1 0
		{
			  exch dup 2 index get 42 eq
			{
				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop
				 exit
			  }
			  {exch pop} ifelse
		  }for
		}
		{
		 exch pop
	  } ifelse
		2 dict dup /Downloaded 6 5 roll put
		}
	ifelse
	dup /FontName 4 index put copyfont definefont pop
	} bind def
/?str2 256 string def
/?add
	{
	1 index type /integertype eq
		{ exch true 4 2 }
		{ false 3 1 }
	ifelse
	roll
	1 index findfont
	dup /Widths known
		{
		Adobe_CoolType_Data /AddWidths? true put
		gsave dup 1000 scalefont setfont
		}
	if
	/Downloaded known
		{
		exec
		exch
			{
			exch ?str2 cvs exch
			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length
			?str1 1 index 1 add 3 index putinterval
			exch length 1 add 1 index add
			?str1 2 index (*) putinterval
			?str1 0 2 index getinterval cvn findfont 
			?str1 3 index (+) putinterval
			2 dict dup /FontName ?str1 0 6 index getinterval cvn put
			dup /Downloaded Downloaded put end copyfont
			dup /FontName get exch definefont pop pop pop
			}
			{
			pop
			}
		ifelse
		}
		{
		pop
		exch
			{
			findfont
			dup /Found get
			dup length exch ?str1 cvs pop
			?str1 1 index (+) putinterval
			?str1 1 index 1 add 4 index ?str2 cvs putinterval
			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn
			1 dict exch 1 index exch /FontName exch put copyfont
			dup /FontName get exch definefont pop
			}
			{
			pop
			}
		ifelse
		}
	ifelse
	Adobe_CoolType_Data /AddWidths? get
		{ grestore Adobe_CoolType_Data /AddWidths? false put }
	if
	} bind def
/?sh
	{
	currentfont /Downloaded known { exch } if pop
	} bind def
/?chp
	{
	currentfont /Downloaded known { pop } { false chp } ifelse
	} bind def
/?mv 
	{
	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse
	} bind def
setpacking
userdict /$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{ get }
			{ pop pop { pop /Courier } bind }
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams /CannotEmbedFontPolicy 2 copy known
			{ get /Error eq }
			{ pop pop false }
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup /WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type /stringtype eq { cvn } if def
								/FontType 3 def
								/FontMatrix [ .001 0 0 .001 0 0 ] def
								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def
								/FontBBox [ 0 0 0 0 ] def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth /y exch def /x exch def
											x y setcharwidth
											$SubstituteFont /$Strategy get /$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									} bind def
								currentdict
								end
							exch setglobal
							} bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup /WMode known
										{ dup /WMode get }
										{ 0 }
									ifelse
									/$WMode exch def
									$fontname exch
									dup /FontName known
										{
										dup /FontName get
										dup type /stringtype eq { cvn } if
										}
										{ /unnamedfont }
									ifelse
									exch
									Adobe_CoolType_Data /InVMDeepCopiedFonts get
									1 index /FontName get known
										{
										pop
										Adobe_CoolType_Data /InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{ $deepcopyfont }
									ifelse
									exch 1 index exch /FontBasedOn exch put
									dup /FontName $fontname dup type /stringtype eq { cvn } if put
									definefont
									Adobe_CoolType_Data /InVMDeepCopiedFonts get
										begin
										dup /FontBasedOn get 1 index def
										end
									} bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{ /y 1000 def }
										{ /x -1000 def 500 120 translate }
									ifelse
									Level2?
										{
										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]
										setcolorspace
										}
										{ 0 setgray }
									ifelse
									10 setlinewidth
									x .8 mul
									[ 7 3 ]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{ .2 setcolor }
											{ .8 setgray }
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									} bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict /FontName known
											{
											FontName
											dup type /stringtype eq { cvn } if
											}
											{ /unnamedfont }
										ifelse
										def
										/FontName $fontname dup type /stringtype eq { cvn } if def
										/currentdistillerparams where
											{ pop }
											{
											/FontInfo currentdict /FontInfo known
												{ FontInfo null copyfont }
												{ 2 dict }
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									} bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont {} bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type /stringtype eq { cvn } if
						dup /$fontname exch def
						$sname null eq
							{ $str cvs dup length $slen sub $slen getinterval }
							{ pop $sname }
						ifelse
						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont /$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{ /$match exch def exit }
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont /$dstack get
								{
								exch
									{
									1 index eq
										{ pop false }
										{ true }
									ifelse
									}
									{ begin false }
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{ $match (fonts/) anchorsearch pop pop cvn }
							{ /Courier }
						ifelse
						} bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1  [ /Ryumin-Light /HeiseiMin-W3
										  /GothicBBB-Medium /HeiseiKakuGo-W5
										  /HeiseiMaruGo-W4 /Jun101-Light ] def
							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def
							/GB1	  [ /STSong-Light /STHeiti-Regular ] def
							/CNS1	 [ /MKai-Medium /MHei-Medium ] def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup /FontType get 0 eq
							{
							1 dict dup /FontName /copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup /FontName /copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{ $Strategies /$Type3Underprint get exec }
						ifelse
						} bind def
					/$buildfontname
						{
						dup /CIDFont findresource /CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index (-) putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy (-) putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }
							{ pop pop pop pop pop }
						ifelse
						length
						$str 1 index (-) putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						} bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{ get }
								{ pop pop [] }
							ifelse
							}
							{ pop pop [] }
						ifelse
						false exch
							{
							dup /CIDFont resourcestatus
								{
								pop pop
								save
								1 index /CIDFont findresource
								dup /WidthsOnly known
									{ dup /WidthsOnly get }
									{ false }
								ifelse
								exch pop
								exch restore
									{ pop }
									{ exch pop true exit }
								ifelse
								}
								{ pop }
							ifelse
							}
						forall
							{ $str cvs $buildfontname }
							{
							false (*)
								{
								save exch
								dup /CIDFont findresource
								dup /WidthsOnly known
									{ dup /WidthsOnly get not }
									{ true }
								ifelse
								exch /CIDSystemInfo get
								dup /Registry get Registry eq
								exch /Ordering get Ordering eq and and
									{ exch restore exch pop true exit }
									{ pop restore }
								ifelse
								}
							$str /CIDFont resourceforall
								{ $buildfontname }
								{ $fontname $findfontByEnum }
							ifelse
							}
						ifelse
						} bind def
					end
				end
				currentdict /$error known currentdict /languagelevel known and dup
					{ pop $error /SubstituteFont known }
				if
				dup
					{ $error }
					{ Adobe_CoolType_Core }
				ifelse
				begin
					{
					/SubstituteFont
					/CMap /Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{ dup $str cvs dup length $slen sub $slen getinterval cvn }
									{ $sname }
								ifelse
								Adobe_CoolType_Data /InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{ exch pop true exit }
												{ pop }
											ifelse
											}
											{
											FontDirectory 1 index known
												{ exch pop true exit }
												{
												GlobalFontDirectory 1 index known
													{ exch pop true exit }
													{ pop }
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{ pop pop false }
								ifelse
									{
									exch pop exch pop
									}
									{
									dup /CMap resourcestatus
										{
										pop pop
										dup /$cmapname exch def
										/CMap findresource /CIDSystemInfo get { def } forall
										$findfontByROS
										}
										{
										128 string cvs
										dup (-) search
											{
											3 1 roll search
												{
												3 1 roll pop
													{ dup cvi }
												stopped
													{ pop pop pop pop pop $findfontByEnum }
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup /CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup /$cmapname exch def
															/CMap findresource /CIDSystemInfo get { def } forall
															$findfontByROS
															true exit
															}
															{ pop }
														ifelse
														}
													for
													dup type /booleantype eq
														{ pop }
														{ pop pop pop $findfontByEnum }
													ifelse
													}
												ifelse
												}
												{ pop pop pop $findfontByEnum }
											ifelse
											}
											{ pop pop $findfontByEnum }
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{ //SubstituteFont exec }
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{ $findfontByEnum }
								{ //SubstituteFont exec }
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core /scfindfont /systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup /FontName known
								{ dup /FontName get dup 3 index ne }
								{ /noname true }
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def /$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{ 1 index /FID eq { pop pop } { def } ifelse }
										forall
										currentdict
										end
									definefont
									dup /FontName known { dup /FontName get } { null } ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using ) print
										dup /FontName known
											{ dup /FontName get } { (unspecified font) }
										ifelse
										$str cvs print (.\n) print
										}
									if
									}
									{ exch pop }
								ifelse
								}
								{ exch pop }
							ifelse
							end
						} bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core /findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type /stringtype ne { $str cvs } if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{ dup $inVMIndex $AddInVMFont }
						if
						$doSmartSub
							{
							currentdict /$Strategy known
								{ $Strategy /$BuildFont get exec }
							if
							}
						if
						}
					if
					end
				} bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch /FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data /InVMFontsByCMap get exch
		$DictAdd
		}
		{ pop pop pop }
	ifelse
	} bind def
/$DictAdd
	{
	2 copy known not
		{ 2 copy 4 index length dict put }
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get { forall } def
				2 copy currentdict put
				end
			}
			{ pop }
		ifelse
		}
	if
	get
		begin
			{ def }
		forall
		end
	} bind def
end
end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.21 0
%%Copyright: Copyright 1987-2005 Adobe Systems Incorporated.
%%Version: 1.21 0
systemdict /languagelevel known dup
	{ currentglobal false setglobal }
	{ false }
ifelse
exch
userdict /Adobe_CoolType_Utility 2 copy known
	{ 2 copy get dup maxlength 27 add dict copy }
	{ 27 dict }
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		  <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch /eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{ globaldict begin currentglobal true setglobal }
if
	/ct_AddStdCIDMap
		ct_Level2?
			{ {
				mark
				Adobe_CoolType_Utility /@recognizeCIDFont currentdict put
					 {
					 ((Hex) 57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec
					 }
				stopped
					 {
					 cleartomark
					 Adobe_CoolType_Utility /@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						  {
						  2 copy get 3 index eq
								{ 1 index length exch sub 1 sub { end } repeat exit }
								{ pop }
						  ifelse
						  }
					 for
					 pop pop
					 Adobe_CoolType_Utility /@eexecStartData get eexec
					 }
					 { cleartomark }
				ifelse
			} }
			{ {
				Adobe_CoolType_Utility /@eexecStartData get eexec
			} }
		ifelse bind def
userdict /cid_extensions known
dup { cid_extensions /cid_UpdateDB known and } if
	 {
	 cid_extensions
	 begin
	 /cid_GetCIDSystemInfo
		 {
		 1 index type /stringtype eq
			 { exch cvn exch }
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				 {
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					 {
					 1 index load
					 3 index get
					 dup null eq
						  { pop pop cid_UpdateDB }
						  {
						  exch
						  1 index /Created get eq
							  { exch pop exch pop }
							  { pop cid_UpdateDB }
						  ifelse
						  }
					 ifelse
					 }
					 { pop cid_UpdateDB }
				 ifelse
				 }
				 { cid_UpdateDB }
			 ifelse
			 end
		 } bind def
	 end
	 }
if
ct_Level2?
	{ end setglobal }
if
	/ct_UseNativeCapability?  systemdict /composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring () def
		/usewidths? true def
		end def
	ct_Level2? { setglobal } { pop } ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict /languagelevel known
				{ pop /CIDFont findresource /GlyphDirectory get }
				{
				1 index /CIDFont findresource /GlyphDirectory
				get dup type /dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			} def
		/+
			{
			systemdict /languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{ 1 dict begin }
			ifelse
			/$ exch def
			systemdict /languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			? { $ begin } if
			} def
		/? { $ type /dicttype eq } def
		/| {
			userdict /Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data /AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					  begin
						AddWidths?
								{
								Adobe_CoolType_Data /CC 3 index put
								? { def } { $ 3 1 roll put } ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont /Widths get exch CC exch put
								}
								{ ? { def } { $ 3 1 roll put } ifelse }
							ifelse
					end
				end
				}
				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse
				}
				{ ? { def } { $ 3 1 roll put } ifelse }
			ifelse
			} def
		/!
			{
			? { end } if
			systemdict /languagelevel known
				{ gvm setglobal }
			if
			end
			} def
		/: { string currentfile exch readstring pop } executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx [.001 0 0 .001 0 0] def
		/ct_1000Mtx [1000 0 0 1000 0 0] def
		/ct_raise {exch cvx exch errordict exch get exec stop} bind def
		/ct_reraise
			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print
					errordict exch get exec stop
			} bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			} bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility /ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{ dup string /dst_string exch def }
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex  get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string  dst_index 2 index putinterval
						length dst_index add /dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string  dst_index 2 index putinterval
						pop dup dst_index add /dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							  { arrayIndex get }
							  {
							  pop
							  exit
							  }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			} bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{ /unknowninstancename /Category resourcestatus }
			stopped
				{ cleartomark setglobal true }
				{ cleartomark currentglobal not exch setglobal }
			ifelse
				{
					{
					mark 3 1 roll /Category findresource
						begin
						ct_Vars /vm currentglobal put
						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
							{ cleartomark false }
							{ { 3 2 roll pop true } { cleartomark false } ifelse }
						ifelse
						ct_Vars /vm get setglobal
						end
					}
				}
				{ { resourcestatus } }
			ifelse bind def
			/CIDFont /Category ct_resourcestatus
				{ pop pop }
				{
				currentglobal  true setglobal
				/Generic /Category findresource
				dup length dict copy
				dup /InstanceType /dicttype put
				/CIDFont exch /Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit /ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				  /Registry (Adobe) def
				  /Ordering (Identity) def
				  /Supplement 0 def
				end def
				/CMapName /Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000> <FFFF>
				endcodespacerange
				1 begincidrange
				<0000> <FFFF> 0
				endcidrange
				endcmap
				CMapName currentdict /CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont  10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{ pop pop /defineresource /undefined ct_raise }
				ifelse
				} bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{ get 3 1 roll pop pop}
						{ pop pop /findresource /undefinedresource ct_raise }
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/ct_resourcestatus /resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup (Binary) eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{ cid_BYTE_COUNT () /SubFileDecode filter }
							stopped
								{ pop pop pop }
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup (Hex) eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{ null exch /ASCIIHexDecode filter /readstring }
							stopped
								{ pop exch pop (>) exch /readhexstring }
							if
							}
							{ (>) exch /readhexstring }
						ifelse
						load
						exit
						}
					if
					/StartData /typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch /GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop /readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				} bind def
			/StartData
				{
				mark
					{
					currentdict
					dup /FDArray get 0 get /FontMatrix get
					0 get 0.001 eq
						{
						dup /CDevProc known not
							{
							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known
								{ get }
								{
								pop pop
								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }
								}
							ifelse
							def
							}
						if
						}
						{
						 /CDevProc
							 {
							 pop pop pop pop pop
							 0
							 1 cid_temp /cid_CIDFONT get
							 /FDArray get 0 get
							 /FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							 } def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup /cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup /SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup /SubrMapOffset undef
										dup /SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{ pop }
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict /CIDFont defineresource pop
					end end
					}
				stopped
					{ cleartomark /StartData ct_reraise }
				if
				} bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit /ProcSet ct_resourcestatus
				{ true }
				{ /CIDInitC /ProcSet ct_resourcestatus }
			ifelse
				{
				pop pop
				/CIDInit /ProcSet findresource
				ct_UseNativeCapability?
					{ pop null }
					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }
				ifelse
				}
				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }
			ifelse
			ct_Vars exch /ct_oldCIDInit exch put
			} bind def
		/ct_restoreCIDInit
			{
			ct_Vars /ct_oldCIDInit get dup null ne
				{ /CIDInit exch /ProcSet defineresource pop }
				{ pop }
			ifelse
			} bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility /ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{ pop 0 }
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{ get }
								{ pop pop nullstring }
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{ 0 FDBytes ct_cvnsi }
									{ pop 0 }
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{ /charstring nullstring def exit }
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			} def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			} def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont /Widths get cid
					2 copy known
						{ get exch pop aload pop }
						{ pop pop stringwidth }
					ifelse
					}
					{ stringwidth }
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			} def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{ get }
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup /FontMatrix 2 copy known
						{ get }
						{ pop pop ct_defaultFontMtx }
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont /Widths get def
					/CharStrings 1 dict dup /.notdef
						<d841272cf18f54fc13> dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup /CharStrings get 1 index /Encoding get
			ct_dfCharCode get charstring put
			rootfont /WMode 2 copy known
				{ get }
				{ pop pop 0 }
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ ct_str1 show }
			ifelse
			} def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ ct_1000Mtx matrix concatmatrix concat }
				{ pop }
			ifelse
			/Private get
			Adobe_CoolType_Utility /ct_Level2? get not
				{
				ct_dfDict /Private
				3 -1 roll
					{ put }
				1183615869 internaldict /superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility /ct_Level2? get
				{ 1 index }
				{ 3 index /Private get mark 6 1 roll }
			ifelse
			dup /RunInt known
				{ /RunInt get }
				{ pop /CCRun }
			ifelse
			get exec
			Adobe_CoolType_Utility /ct_Level2? get not
				{ cleartomark }
			if
			} bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility /ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{ stop }
			if
			end
			end
			end
			end
			} bind def
		/BaseFontNameStr (BF00) def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/BuildChar /ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString /ct_Type3ShowCharString load def
				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup /lenIV 4 put def
				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def
				/PaintType 0 def
				/ct_ShowCharString /ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{ exit }
				if
				}
			for
			exch pop exch pop
			} bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch /WMode exch def
				exch /FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup /FontMatrix known
				{ dup /FontMatrix get /FontMatrix exch def }
				{ /FontMatrix matrix def }
			ifelse
				/bfCount 1 index /CIDCount get 256 idiv 1 add
					dup 256 gt { pop 256} if def
				/Encoding
					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for
					bfCount 1 255 { 2 copy bfCount put pop } for
					def
				/FDepVector bfCount dup 256 lt { 1 add } if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont /FontBBox known
						{ CIDFont /FontBBox get /FontBBox exch def }
					if
					CIDFont /CDevProc known
						{ CIDFont /CDevProc get /CDevProc exch def }
					if
					currentdict
					end
				BaseFontNameStr 3 (0) putinterval
				0 1 bfCount dup 256 eq { 1 sub } if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup /CIDFirstByte exch 256 mul def
						FontType 3 eq
							{ /ct_FDDict 2 dict def }
						if
						currentdict
						end
					1 index  16
					BaseFontNameStr  2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont /Widths get
						begin
						exch /CIDFont get /GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{ exch pop }
			ifelse
			} bind def
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{
				2 index /CMap ct_resourcestatus
					{ pop pop exch pop }
					{
					/CIDInit /ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch /WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry (Adobe) def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-) search
									{
									pop pop
									(-) search
										{
										dup length string copy
										exch pop exch pop
										}
										{ pop (Identity)}
									ifelse
									}
									{ pop  (Identity)  }
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000> <FFFF>
							endcodespacerange
							1 begincidrange
							<0000> <FFFF> 0
							endcidrange
							endcmap
							CMapName currentdict /CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index /CMap ct_resourcestatus
					{ pop pop }
					{
					/CIDInit /ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry (Adobe) def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-) search
							{
							pop pop
							(-) search
								{ dup length string copy exch pop exch pop }
								{ pop (Identity) }
							ifelse
							}
							{ pop (Identity) }
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000> <FFFF>
					endcodespacerange
					1 begincidrange
					<0000> <FFFF> 0
					endcidrange
					endcmap
					CMapName currentdict /CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		currentdict readonly pop
		end
	end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict /ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
  version
  cvi
  2015
  ge
} bind def
/AllocGlyphStorage
{
  Is2015?
  {	
		pop
  } 
  { 
		{string} forall
  } ifelse
} bind def
/Type42DictBegin
{
	25 dict begin
  /FontName exch def
  /CharStrings 256 dict 
	begin
		  /.notdef 0 def
		  currentdict 
	end def
  /Encoding exch def
  /PaintType 0 def
  /FontType 42 def
  /FontMatrix [1 0 0 1 0 0] def
  4 array  astore cvx /FontBBox exch def
  /sfnts
} bind def
/Type42DictEnd  
{
	 currentdict dup /FontName get exch definefont end
	ct_T42Dict exch
	dup /FontName get exch put
} bind def
/RD {string currentfile exch readstring pop} executeonly def
/PrepFor2015
{
	Is2015?
	{		  
		 /GlyphDirectory 
		 16
		 dict def
		 sfnts 0 get
		 dup
		 2 index
		 (glyx)
		 putinterval
		 2 index  
		 (locx)
		 putinterval
		 pop
		 pop
	}
	{
		 pop
		 pop
	} ifelse			
} bind def
/AddT42Char
{
	Is2015?
	{
		/GlyphDirectory get 
		begin
		def
		end
		pop
		pop
	}
	{
		/sfnts get
		4 index
		get
		3 index
	  2 index
		putinterval
		pop
		pop
		pop
		pop
	} ifelse
} bind def
/T0AddT42Mtx2
{
	/CIDFont findresource /Metrics2 get begin def end
}bind def
end
%%EndResource
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Image 75 dict dup begin put
/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf () def
/AGMIMG_ybuf () def
/AGMIMG_kbuf () def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/doc_setup
{ 
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage /colorimage ldf
	}if
	end
	end
}def
/page_setup
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists {/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				 }ifelse
			 }ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode [ Decode 1 get Decode 0 get] def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode [1 1] def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub} currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{ pop 1 } currenttransfer addprocs settransfer
		}def
	}ifelse
	/img /imageormask ldf
	/sepimg /sep_imageormask ldf
	/devnimg /devn_imageormask ldf
	/idximg /indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/doc_trailer
{
}def
/AGMIMG_flushfilters
{
	dup type /arraytype ne
		{1 array astore}if
	aload length
		{
		dup type /filetype eq
			{
			dup status 1 index currentfile ne and
				{dup flushfile closefile}
				{pop}
			ifelse
			}{pop}ifelse
		} repeat
}def
/imageormask_sys
{
	begin
		save mark
		level2{
			currentdict
			Operator /imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask {
					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator /imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix /DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix /DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint {
		0 get dup type /nametype eq {
			dup /DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			} forall
			not
		} ifelse
	}{
		pop false
	}ifelse
}def
/process_mask_L3
{
	dup begin
	/ImageType 1 def
	end
	4 dict begin
		/DataDict exch def
		/ImageType 3 def
		/InterleaveType 3 def
		/MaskDict 9 dict begin
			/ImageType 1 def
			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def
			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def
			/ImageMatrix [Width 0 0 Height neg 0 Height] def
			/NComponents 1 def
			/BitsPerComponent 1 def
			/Decode [0 1] def
			/DataSource AGMIMG_maskSource def
		currentdict end def
	currentdict end
}def
/use_mask
{
	dup type /dicttype eq
	{
		dup /Mask known	{
			dup /Mask get {
				level3
				{true}
				{
					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch
					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse
					3 -1 roll and
				} ifelse
			}
			{false} ifelse
		}
		{false} ifelse
	}
	{false} ifelse
}def
/make_line_source
{
	begin
	MultipleDataSources {
		[
		Decode length 2 div cvi {Width string} repeat
		]
	}{
		Width Decode length 2 div mul cvi string
	}ifelse
	end
}def
/datasource_to_str
{
	exch dup type
	dup /filetype eq {
		pop exch readstring
	}{
		/arraytype eq {
			exec exch copy
		}{
			pop
		}ifelse
	}ifelse
	pop
}def
/masked_image_simulation
{
	3 dict begin
	dup make_line_source /line_source xdf
	/mask_source AGMIMG_maskSource /LZWDecode filter def
	dup /Width get 8 div ceiling cvi string /mask_str xdf
	begin
	gsave
	0 1 translate 1 -1 Height div scale
	1 1 Height {
		pop
		gsave
		MultipleDataSources {
			0 1 DataSource length 1 sub {
				dup DataSource exch get
				exch line_source exch get
				datasource_to_str
			} for
		}{
			DataSource line_source datasource_to_str
		} ifelse
		<<
			/PatternType 1
			/PaintProc [
				/pop cvx
				<<
					/ImageType 1
					/Width Width
					/Height 1
					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix
					/MultipleDataSources MultipleDataSources
					/DataSource line_source
					/BitsPerComponent BitsPerComponent
					/Decode Decode
				>>
				/image cvx
			] cvx
			/BBox [0 0 Width 1]
			/XStep Width
			/YStep 1
			/PaintType 1
			/TilingType 2
		>>
		matrix makepattern set_pattern
		<<
			/ImageType 1
			/Width Width
			/Height 1
			/ImageMatrix Width 1 matrix scale
			/MultipleDataSources false
			/DataSource mask_source mask_str readstring pop
			/BitsPerComponent 1
			/Decode [0 1]
		>>
		imagemask
		grestore
		0 1 translate
	} for
	grestore
	end
	end
}def
/imageormask
{
	begin
		SkipImageProc {
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator /imagemask eq DeviceN_PS2 not and {
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{
						[/Separation /Black /DeviceGray {}] setcolorspace
						/Decode [ Decode 1 get Decode 0 get ] def
					}if
					use_mask {
						level3 {process_mask_L3 image}{masked_image_simulation}ifelse
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not {
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file {
									Names {
										dup (None) ne {
											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq {true setoverprint} if
											/names_index names_index 1 add def
										}{
											pop
										} ifelse
									} forall
									close_image_file
								} if
								grestore
								end
							}{
								Operator /imagemask eq {
									imagemask
								}{
									image
								} ifelse
							} ifelse
						}{
							Operator /imagemask eq {
								imagemask
							}{
								image
							} ifelse
						} ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator /imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix /DataSource load
					/Adobe_AGM_OnHost_Seps where {
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator /colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource [
											DataSource 0 get /exec cvx
											DataSource 1 get /exec cvx
											DataSource 2 get /exec cvx
											DataSource 3 get /exec cvx
											/AGMCORE_get_ink_data cvx
										] cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0 () /SubFileDecode filter def
									}ifelse
									/Decode [ Decode 0 get Decode 1 get ] def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator /image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
  			 							1 AGMCORE_&setgray
  			 							currentdict imageormask_sys
  			 						}{
  			 							currentdict ignoreimagedata
  			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator /image eq{
							AGMCORE_host_sep{
								/DoImage true def
								HostSepColorImage{
									invert_image_samples
								}{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}ifelse
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys} if
							}{
								use_mask {
									level3 {process_mask_L3 image}{masked_image_simulation}ifelse
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	SkipImageProc {
		currentdict consumeimagedata
	}
	{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get /DeviceCMYK eq and
		currentdict/Components known and 
		Name () ne and 
		Name (All) ne and 
		Operator /image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load /exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			} /exec cvx
			] cvx bind
			MappedCSA 0 get /DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{ 
					currentdict
					Operator /imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name (All) ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator /imagemask eq{
 											/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									[ /Separation Name [/DeviceGray]
	 									{ 
	 										sep_colorspace_proc AGMCORE_get_ink_data
											1 exch sub
	 									} bind
										] AGMCORE_&setcolorspace
										/sep_tint AGMCORE_gget AGMCORE_&setcolor
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator /imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name (All) eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					currentcolorspace 0 get /Separation ne{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentoverprint 
					MappedCSA 0 get /DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					Name inRip_spot_has_ink not and 
					Name (All) ne and {
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
	end
	end
}def
/decode_image_sample
{
	4 1 roll exch dup 5 1 roll
	sub 2 4 -1 roll exp 1 sub div mul add
} bdf
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
} bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub {
			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx
			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx
		} for
	] cvx bind
	end
} bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0 () /SubFileDecode filter
				BitsPerComponent 8 idiv string /readstring cvx /pop cvx /putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0 () /SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv {DataSource /read cvx /not cvx{0}/if cvx /mul cvx}repeat /mul cvx /add cvx
			}for
		/convProc load /exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2 /add cvx /index cvx
			3 1 /roll cvx /exch cvx 255 /mul cvx /cvi cvx /put cvx
			}for
	]bind cvx 0 () /SubFileDecode filter
	end
} bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs [ 3 -1 roll begin
		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt {1 add 2 div cvi}{exit}ifelse
			} loop
			string
		} repeat
		end ] def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	SkipImageProc {
		currentdict consumeimagedata
	}
	{
		save mark 
		AGMCORE_producing_seps not {
			level3 not {
				Operator /imagemask ne {
					/DataSource [ [
						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 
						devn_alt_datasource 1 /string cvx /readstring cvx /pop cvx] cvx colorSpaceElemCnt 1 sub{dup}repeat] def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def
				} if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process {
					CSA get_csa_by_name 0 get /DeviceCMYK eq {
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 
							devn_alt_datasource
						filter_cmyk 0 () /SubFileDecode filter def
						/MultipleDataSources false def
						/Decode [1 0] def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate {
							/DataSource
								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
								CSA get_csa_by_name 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def
				 			currentdict imageormask_sys
				 		}
						{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						} ifelse
 					} ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget /names_index known {
	 					Operator/imagemask ne{
	 						MultipleDataSources {
		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						} ifelse
							invert_image_samples
	 					} if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{ 			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN [
				AGMIMG_c 0 ne {/Cyan} if
				AGMIMG_m 0 ne {/Magenta} if
				AGMIMG_y 0 ne {/Yellow} if
				AGMIMG_k 0 ne {/Black} if
				] /DeviceCMYK {}] setcolorspace
				AGMIMG_c 0 ne {AGMIMG_c} if
				AGMIMG_m 0 ne {AGMIMG_m} if
				AGMIMG_y 0 ne {AGMIMG_y} if
				AGMIMG_k 0 ne {AGMIMG_k} if
				setcolor			
			}{	
				/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
				[/Indexed 				
					[
						/DeviceN [
							AGMIMG_c 0 ne {/Cyan} if
							AGMIMG_m 0 ne {/Magenta} if
							AGMIMG_y 0 ne {/Yellow} if
							AGMIMG_k 0 ne {/Black} if
						] 
						/DeviceCMYK {
							AGMIMG_k 0 eq {0} if
							AGMIMG_y 0 eq {0 exch} if
							AGMIMG_m 0 eq {0 3 1 roll} if
							AGMIMG_c 0 eq {0 4 1 roll} if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				] setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation /Black /DeviceGray {}] setcolorspace
			gsave
			/Black
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Yellow /DeviceGray {}] setcolorspace
			gsave
			/Yellow
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Magenta /DeviceGray {}] setcolorspace
			gsave
			/Magenta
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Cyan /DeviceGray {}] setcolorspace
			gsave
			/Cyan 
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		} if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
} def
/indexed_imageormask
{
	begin
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {
					/CSA get get_csa_by_name
				}{
					/Names get
				} ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN {
					/devicen_colorspace_dict AGMCORE_gget /names_index known {
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					} ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator /imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN {
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget begin
					CSA get_csa_by_name 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {
						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]
						setcolorspace
					} if
					end
				} ifelse
				imageormask
				Indexed_DeviceN {
					end
				} if
			}{ 
				Operator /imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not {
			currentcolorspace 
			dup 1 /DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		} if
		currentdict 
		Operator /imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask {
				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
  /OPIimage
  {
  	dup type /dicttype ne{
  		10 dict begin
  			/DataSource xdf
  			/ImageMatrix xdf
  			/BitsPerComponent xdf
  			/Height xdf
  			/Width xdf
  			/ImageType 1 def
  			/Decode [0 1 def]
  			currentdict
  		end
  	}if
  	dup begin
  		/NComponents 1 cdndf
  		/MultipleDataSources false cdndf
  		/SkipImageProc {false} cdndf
  		/HostSepColorImage false cdndf
  		/Decode [
  				0 
  				currentcolorspace 0 get /Indexed eq{
  					2 BitsPerComponent exp 1 sub
  				}{
  					1
  				}ifelse
  		] cdndf
  		/Operator /image cdndf
  	end
  	/sep_colorspace_dict AGMCORE_gget null eq{
  		imageormask
  	}{
  		gsave
  		dup begin invert_image_samples end
  		sep_imageormask
  		grestore
  	}ifelse
  }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter /WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0 (%EndMask) /SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not {exit} if
	}loop
	WriteFilter closefile
	end
}def
/cachemask_level3
{
	currentfile
	<<
		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]
		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]
		/Intent 1
	>>
	/ReusableStreamDecode filter
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type /dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode [/customcolor_tint AGMCORE_gget 0] def
				/Operator /image def
				/HostSepColorImage false def
				/SkipImageProc {false} def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA [ /DeviceCMYK ] 
			/TintMethod /Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components [ AGMIMG_colorAry aload pop pop ] 
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch
		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch
		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch
		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch
		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat
	}{
	}ifelse
	end
} def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					} if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage	
		end
	} def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				} currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get /DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer
						currentdict imageormask
					}{ 
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get /DeviceGray eq {
						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get /DeviceCMYK eq {
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{ 
							currentcolortransfer
							{pop 1} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{ 
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get /DeviceGray eq {
					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get /DeviceCMYK eq {
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{ 
						currentcolortransfer
						{pop 1} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/doc_setup get exec
Adobe_CoolType_Core/doc_setup get exec
Adobe_AGM_Image/doc_setup get exec
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
/currentdistillerparams where
{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse
{ userdict /AI11_PDFMark5 /cleartomark load put
userdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}
{ userdict /AI11_PDFMark5 /pdfmark load put
userdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse
[/NamespacePush AI11_PDFMark5
[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5
[{ai_metadata_stream_123}
currentfile 0 (%  &&end XMP packet marker&&)
/SubFileDecode filter AI11_ReadMetadata_PDFMark5
<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="3.1.1-111">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS2</xap:CreatorTool>
         <xap:CreateDate>2007-09-18T18:25:06+01:00</xap:CreateDate>
         <xap:ModifyDate>2007-09-18T18:25:06+01:00</xap:ModifyDate>
         <xap:MetadataDate>2007-09-18T18:25:06+01:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>256</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXkX54/nnF5EVdG&#xA;0qEXPmS6hEyPJQwW8bMVDuK1ZzxPFfpPYFWnzzo//OQH5p2GuR6pPrU1+gflPY3HH6vItfiT01Cq&#xA;lfFAKYpp9oeWPMFj5i8vafrliT9V1CBJ41PVeQ+JD7q1VOKEzxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;8/fn5+f9xolxP5T8qSmPVo/g1PUxQ+hUV9KH/izf4m/Z7b9FID5fl1C/lvWvpbmWS9ZubXTOzSlv&#xA;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</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:9659AFC20A66DC118654DD4296681B4C</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:9759AFC20A66DC118654DD4296681B4C</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:9559AFC20A66DC118654DD4296681B4C</stRef:instanceID>
            <stRef:documentID>uuid:053ABC30AE4DDC11857AD399716CB32A</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>
%  &&end XMP packet marker&&
[{ai_metadata_stream_123}
<</Type /Metadata /Subtype /XML>>
/PUT AI11_PDFMark5
[/Document
1 dict begin /Metadata {ai_metadata_stream_123} def
currentdict end /BDC AI11_PDFMark5
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
Adobe_AGM_Utils begin
Adobe_AGM_Core/page_setup get exec
Adobe_AGM_Core/capture_currentpagedevice get exec
Adobe_CoolType_Core/page_setup get exec
Adobe_AGM_Image/page_setup get exec
%%EndPageSetup
Adobe_AGM_Core/AGMCORE_save save ddf
1 -1 scale 0 -288.732 translate
[1 0 0 1 0 0 ]  concat
% page clip
gsave
newpath
gsave % PSGState
0 0 mo
0 288.732 li
287.51 288.732 li
287.51 0 li
cp
clp
[1 0 0 1 0 0 ] concat
54.1377 155.727 mo
54.1377 155.727 54.5649 154.856 54.9634 154 cv
55.312 153.251 55.6392 152.499 55.6392 152.499 cv
55.6392 152.499 55.5093 151.987 55.6426 151.491 cv
55.7573 151.066 56.1396 150.646 56.1396 150.646 cv
56.1396 150.646 56.5259 149.966 56.8071 149.033 cv
57.0762 148.14 57.9746 147.615 57.9746 147.615 cv
57.9746 147.615 56.7705 146.258 56.8018 145.616 cv
56.833 144.958 57.3657 144.391 57.3657 144.391 cv
57.3657 144.391 57.8979 143.194 58.6816 142.376 cv
59.3062 141.724 60.2183 141.413 60.2183 141.413 cv
60.2183 141.413 61.2178 140.763 62.1177 140.099 cv
62.9272 139.502 63.647 138.885 63.647 138.885 cv
63.647 138.885 64.0356 137.803 64.5781 136.852 cv
65.043 136.037 65.6733 135.332 65.6733 135.332 cv
65.6733 135.332 66.6597 134.044 67.6191 132.608 cv
68.5737 131.178 69.502 129.602 69.502 129.602 cv
69.502 129.602 70.6113 127.612 71.6831 125.928 cv
72.5044 124.636 73.356 123.546 73.356 123.546 cv
73.356 123.546 74.3691 122.012 75.3369 120.94 cv
75.8706 120.35 76.6343 119.917 76.6343 119.917 cv
76.6343 119.917 76.7593 119.368 77.2222 118.931 cv
77.6597 118.518 78.4355 118.216 78.4355 118.216 cv
78.4355 118.216 78.5 117.524 78.8979 117.029 cv
79.2622 116.575 79.9619 116.314 79.9619 116.314 cv
79.9619 116.314 79.9463 115.985 80.2056 115.731 cv
80.5278 115.416 81.1382 115.163 81.1382 115.163 cv
81.1382 115.163 80.9844 114.564 81.1733 114.091 cv
81.353 113.64 81.876 113.313 81.8638 113.361 cv
81.8496 113.419 82.2964 112.979 82.5479 112.389 cv
82.731 111.96 82.7397 111.334 82.7397 111.334 cv
82.7397 111.334 82.7856 110.798 82.9116 110.357 cv
83.0068 110.025 83.1904 109.758 83.1904 109.758 cv
83.1904 109.758 83.6724 107.095 84.2749 104.799 cv
85.2793 100.972 86.6187 96.6958 86.6187 96.6958 cv
86.6187 96.6958 84.2803 92.5723 84.2939 89.3384 cv
84.3057 86.5205 86.6689 84.5342 86.6689 84.5342 cv
86.6689 84.5342 86.9517 83.6143 87.0645 82.127 cv
87.189 80.4937 87.144 78.2783 87.144 78.2783 cv
87.144 78.2783 84.7275 76.0488 83.6377 74.2852 cv
82.9736 73.2114 83.4155 72.2471 83.4155 72.2471 cv
83.4155 72.2471 83.6519 70.1377 83.9243 68.4077 cv
84.1104 67.2305 84.3662 66.2163 84.3662 66.2163 cv
84.3662 66.2163 84.3872 65.772 84.5171 65.3745 cv
84.6221 65.0542 84.8418 64.7651 84.8418 64.7651 cv
84.8418 64.7651 85.0327 62.7114 85.3257 61.2085 cv
85.5015 60.3071 85.8428 59.6353 85.8428 59.6353 cv
85.8428 59.6353 86.5728 58.1997 87.9673 57.0005 cv
88.8853 56.2109 90.6724 55.4814 90.6724 55.4814 cv
90.6724 55.4814 91.7358 55.2632 92.7734 55.3164 cv
93.6782 55.3628 94.5762 55.6816 94.5762 55.6816 cv
94.5762 55.6816 94.9375 55.3809 95.5176 55.3169 cv
95.9385 55.271 96.6279 55.4561 96.6279 55.4561 cv
96.6279 55.4561 97.0625 54.9434 97.543 53.7505 cv
98.1538 52.2354 98.915 49.8545 99.7935 48.5576 cv
100.406 47.6523 102.033 47.4736 102.033 47.4736 cv
102.033 47.4736 104.991 47.1367 107.524 47.9932 cv
110.024 48.8384 110.616 50.5015 110.616 50.5015 cv
110.616 50.5015 110.767 50.9043 111.138 51.2573 cv
111.54 51.6392 111.97 52.2178 112.125 52.7661 cv
112.298 53.3784 111.583 53.4971 110.935 53.979 cv
110.05 54.6338 109.265 56.1318 109.265 56.1318 cv
109.265 56.1318 109 57.416 108.615 58.0439 cv
108.403 58.3906 107.963 58.2593 107.963 58.2593 cv
107.963 58.2593 108.112 59.582 107.797 60.1157 cv
107.543 60.5474 106.813 60.2109 106.813 60.2109 cv
106.813 60.2109 106.571 60.3633 106.532 60.5703 cv
106.474 60.8623 106.667 61.2129 106.406 61.4927 cv
106.058 61.8652 105.036 61.8623 105.036 61.8623 cv
105.036 61.8623 104.968 62.4131 104.741 62.6929 cv
104.544 62.936 104.186 62.9136 104.186 62.9136 cv
104.186 62.9136 103.939 63.3892 103.667 63.7207 cv
103.509 63.9126 103.259 64.0396 103.259 64.0396 cv
103.259 64.0396 103.213 64.4448 103.552 65.5264 cv
103.687 65.9565 104.02 66.3906 104.211 66.8862 cv
104.462 67.5317 104.561 68.1934 104.561 68.1934 cv
104.561 68.1934 105.407 69.4287 105.817 71.3398 cv
106.207 73.1553 106.162 75.6504 106.162 75.6504 cv
106.162 75.6504 106.203 77.3008 106.406 78.8857 cv
106.589 80.3076 107.013 81.8809 107.013 81.8809 cv
116.847 75.0503 li
116.847 75.0503 116.654 74.5996 116.762 74.356 cv
116.835 74.189 117.223 74.1992 117.223 74.1992 cv
117.673 74.4243 li
118.398 73.9487 li
118.398 73.9487 117.898 73.2891 117.898 72.9478 cv
117.898 72.3262 118.398 72.7979 118.398 72.7979 cv
118.949 73.2983 li
118.949 73.2983 119.012 72.9326 119.172 72.5967 cv
119.293 72.3438 119.274 72.2974 119.524 72.0972 cv
119.775 71.897 125.33 71.5718 125.33 71.5718 cv
125.33 71.5718 126.884 72.3223 126.169 73.999 cv
126.012 74.3672 125.28 74.2744 125.28 74.2744 cv
125.28 74.2744 125.058 74.1631 124.833 74.0264 cv
124.607 73.8877 124.379 73.7236 124.379 73.7236 cv
124.379 73.7236 124.165 73.8276 123.729 74.4419 cv
123.562 74.6772 123.503 75.2344 123.319 75.5352 cv
123.077 75.9321 123.178 76.001 122.728 76.0508 cv
122.277 76.1011 121.821 75.8052 121.209 75.7168 cv
120.942 75.6782 120.651 75.7505 120.651 75.7505 cv
120.651 75.7505 120.882 77.0195 120.91 78.2051 cv
120.931 79.1411 120.75 80.0547 120.75 80.0547 cv
120.75 80.0547 120.354 81.9404 119.977 83.1318 cv
119.673 84.0923 119.375 84.4087 119.375 84.4087 cv
119.375 84.4087 118.501 85.0088 117.358 85.5576 cv
116.316 86.0576 114.995 86.5107 114.995 86.5107 cv
114.995 86.5107 112.095 87.9204 109.737 88.9556 cv
108.441 89.5234 107.013 90.0137 107.013 90.0137 cv
107.013 90.0137 107.433 90.71 108.348 91.0122 cv
108.863 91.1821 110.116 91.04 110.116 91.04 cv
110.116 91.04 111.316 90.6616 111.736 91.2358 cv
112.189 91.855 111.392 92.9419 111.392 92.9419 cv
111.392 92.9419 111.113 93.5273 109.946 93.9932 cv
109.467 94.1841 108.644 94.3242 108.054 94.4438 cv
107.436 94.5688 107.063 94.6685 107.063 94.6685 cv
107.063 94.6685 107.769 95.9106 108.725 97.5908 cv
110.114 100.032 111.267 102.026 111.917 103.202 cv
112.567 104.378 115.421 111.435 116.071 112.911 cv
116.722 114.387 117.691 115.83 117.948 117.665 cv
118.164 119.407 117.51 121.882 117.51 121.882 cv
117.51 121.882 117.33 122.466 117.072 123.822 cv
116.85 124.988 116.888 125.472 117.01 126.824 cv
117.01 126.824 117.11 128.252 117.722 131.118 cv
118.072 132.762 118.223 136.558 118.223 136.558 cv
118.223 136.558 118.335 138.838 118.663 140.739 cv
118.973 142.539 119.5 143.965 119.5 143.965 cv
119.5 143.965 119.609 144.528 119.383 144.854 cv
119.135 145.214 118.549 145.342 118.549 145.342 cv
118.549 145.342 117.832 145.471 117.172 145.452 cv
116.571 145.434 116.021 145.267 116.021 145.267 cv
116.021 145.267 118.097 146.458 119.047 147.3 cv
119.45 147.656 119.612 147.707 120.513 148.032 cv
121.414 148.357 124.147 148.821 124.925 149.734 cv
125.789 150.748 124.633 151.547 124.333 151.697 cv
124.033 151.848 121.964 151.998 119.825 151.998 cv
117.869 151.998 115.321 152.173 114.795 151.848 cv
114.27 151.522 113.882 151.974 113.882 151.974 cv
113.294 152.198 li
113.294 152.198 111.839 152.456 110.616 152.421 cv
109.73 152.396 108.965 152.073 108.965 152.073 cv
108.965 151.297 li
108.965 151.297 108.427 150.175 108.14 149.344 cv
107.972 148.856 108.093 147.227 108.406 146.18 cv
108.626 145.443 109.09 144.791 109.09 144.791 cv
109.09 144.791 108.859 141.141 108.829 137.234 cv
108.797 133.21 108.965 128.926 108.965 128.926 cv
108.965 128.926 109.026 127.852 109.315 125.761 cv
109.463 124.689 109.94 121.869 109.94 121.869 cv
109.94 121.869 109.97 119.899 109.568 118.615 cv
109.156 117.298 109.115 117.69 108.314 116.664 cv
107.513 115.639 105.719 113.42 103.538 110.407 cv
101.84 108.063 100.431 105.779 100.431 105.779 cv
100.431 105.779 99.8843 106.257 99.2915 106.434 cv
98.7085 106.607 98.0537 106.755 98.0537 106.755 cv
98.0537 106.755 97.7183 107.54 96.8247 108.582 cv
95.9165 109.642 94.4507 110.959 94.4507 110.959 cv
94.4507 110.959 93.022 112.846 91.5728 115.12 cv
91.084 115.887 90.7891 116.616 90.3647 117.347 cv
89.6899 118.508 88.9956 119.517 88.9956 119.517 cv
88.9956 119.517 88.0234 120.631 86.7573 122.571 cv
85.7217 124.159 84.7163 126.073 84.7163 126.073 cv
84.7163 126.073 83.6416 127.686 82.1572 130.219 cv
80.8359 132.475 79.0859 135.682 79.0859 135.682 cv
79.0859 135.682 77.5278 138.288 76.0684 140.868 cv
74.7861 143.136 73.5811 145.417 73.5811 145.417 cv
73.5811 145.417 72.8232 146.793 71.8921 148.416 cv
70.7129 150.471 69.3018 152.873 69.3018 152.873 cv
69.3018 152.873 68.7822 153.934 68.2144 154.079 cv
67.5293 154.256 66.7744 153.523 66.7744 153.523 cv
66.3242 153.224 li
66.3242 153.224 66.1299 153.677 66.0029 154.214 cv
65.8564 154.834 65.8989 155.301 65.8989 155.301 cv
65.7896 154.554 66.5503 156.808 67.6089 156.999 cv
68.5547 157.272 70.8862 159.543 70.7363 159.376 cv
71.9834 160.768 70.9185 162.157 68.1196 162.39 cv
68.1196 162.39 65.1689 162.066 62.583 160.981 cv
62.583 160.981 60.5811 160.606 59.8306 159.168 cv
59.4048 158.351 56.4731 158.709 56.4731 158.709 cv
56.4731 158.709 54.0957 158.208 54.0127 156.623 cv
54.1377 155.727 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
ef
110.129 84.3521 mo
116.42 79.1865 li
116.42 79.1865 116.55 79.2437 116.745 79.2637 cv
116.903 79.2788 117.135 79.2578 117.135 79.2578 cv
117.135 79.2578 116.92 80.2339 116.771 81.1665 cv
116.669 81.8164 116.617 82.5288 116.617 82.5288 cv
116.617 82.5288 115.219 83.2119 113.444 83.7109 cv
112.012 84.1138 110.129 84.3521 110.129 84.3521 cv
cp
0 0 0 0 cmyk
ef
98.895 85.5352 mo
98.895 85.5352 99.0605 86.4492 99.5034 87.4292 cv
99.8975 88.3018 100.575 89.2524 100.575 89.2524 cv
100.575 89.2524 100.974 89.7119 101.41 90.2363 cv
101.688 90.5703 102.076 91.0581 102.076 91.0581 cv
102.076 91.0581 102.083 91.6904 102.253 91.9702 cv
102.431 92.2622 102.773 92.2021 102.773 92.2021 cv
102.773 92.2021 103.168 92.2212 103.253 91.9331 cv
103.369 91.54 103.255 91.2007 103.185 90.8076 cv
103.113 90.4146 102.916 89.7891 102.916 89.7891 cv
102.916 89.7891 103.077 89.8252 103.38 90.1284 cv
103.625 90.3726 104.024 90.897 104.024 90.897 cv
104.024 90.897 104.444 91.5474 104.944 91.1514 cv
105.462 90.7524 104.918 89.8066 104.918 89.8066 cv
104.918 89.8066 104.787 89.4941 104.854 89.4009 cv
104.899 89.3398 105.15 89.4849 105.15 89.4849 cv
105.15 89.4849 105.413 89.6665 105.631 89.7422 cv
106.024 89.877 106.258 89.771 106.258 89.771 cv
106.258 89.771 106.753 90.4766 107.347 90.9854 cv
107.995 91.5405 108.564 91.5586 108.564 91.5586 cv
108.564 91.5586 109.182 91.6382 109.69 91.6294 cv
110.192 91.6211 110.655 91.5225 110.655 91.5225 cv
110.655 91.5225 111.388 91.2524 111.371 91.6475 cv
111.326 92.6396 110.317 93.1484 109.372 93.4639 cv
108.375 93.7959 107.17 93.9355 107.17 93.9355 cv
107.17 93.9355 106.054 94.1733 105.308 95.1567 cv
104.51 96.2085 104.078 98.0112 104.078 98.0112 cv
104.078 98.0112 103.382 100.89 101.963 102.637 cv
101.62 103.059 100.9 103.146 100.423 102.059 cv
99.8306 100.711 100.552 98.4038 99.6309 96.8384 cv
98.0791 94.1987 95.1587 90.3965 95.1587 90.3965 cv
95.1587 90.3965 94.3394 89.3525 94.3574 88.2129 cv
94.376 87.0059 95.3369 86.3569 95.3369 86.3569 cv
95.3369 86.3569 95.9224 85.9204 96.9268 85.688 cv
97.6563 85.5195 98.895 85.5352 98.895 85.5352 cv
cp
ef
101.928 97.4932 mo
102.106 97.8296 102.024 98.2207 101.746 98.3672 cv
101.469 98.5137 101.1 98.3599 100.923 98.0239 cv
100.745 97.687 100.827 97.2959 101.104 97.1494 cv
101.382 97.0034 101.751 97.1572 101.928 97.4932 cv
cp
0 0 0 1 cmyk
ef
102.053 99.6836 mo
102.23 100.02 102.148 100.41 101.872 100.557 cv
101.594 100.703 101.225 100.549 101.048 100.213 cv
100.871 99.8765 100.952 99.4858 101.229 99.3394 cv
101.507 99.1929 101.876 99.3467 102.053 99.6836 cv
cp
ef
101.24 95.2412 mo
101.417 95.5776 101.336 95.9688 101.058 96.1147 cv
100.781 96.2617 100.412 96.1069 100.234 95.771 cv
100.057 95.4351 100.139 95.0439 100.417 94.8979 cv
100.694 94.7515 101.063 94.9053 101.24 95.2412 cv
cp
ef
185.418 260.654 mo
187.709 265.478 192.092 260.902 192.092 260.902 cv
192.092 260.902 192.631 261.701 193.314 262.273 cv
193.803 262.684 194.504 262.922 194.504 262.922 cv
194.504 262.922 195.133 263.151 195.637 262.72 cv
196.113 262.311 196.467 261.238 196.467 261.238 cv
196.467 261.238 197.586 261.072 198.465 260.634 cv
199.029 260.351 199.496 259.725 199.496 259.725 cv
199.496 259.725 200.391 259.683 201.16 259.336 cv
201.813 259.042 202.357 258.435 202.357 258.435 cv
202.357 258.435 203.969 258.757 204.813 258.189 cv
205.496 257.729 205.443 256.358 205.443 256.358 cv
205.443 256.358 205.617 255.377 205.678 254.561 cv
205.73 253.84 205.666 253.273 205.666 253.273 cv
205.666 253.273 208.557 251.579 211.129 250.342 cv
212.885 249.497 214.643 248.953 214.643 248.953 cv
214.643 248.953 214.557 250.189 214.402 251.406 cv
214.223 252.837 213.971 254.283 213.971 254.283 cv
213.971 254.283 213.92 255.938 213.512 257.216 cv
213.055 258.65 212.23 259.725 212.23 259.725 cv
212.23 259.725 207.414 266.125 203.529 272.521 cv
200.484 277.53 197.795 282.624 196.318 285.507 cv
229.381 285.507 li
230.207 284.775 231.105 283.958 231.918 283.169 cv
233.213 281.909 234.445 280.257 234.445 280.257 cv
234.672 285.507 li
260.879 285.507 li
261.52 283.251 262.359 279.794 262.793 275.914 cv
263.654 268.214 263.279 259.108 263.279 259.108 cv
263.279 259.108 262.244 253.978 261.113 250.03 cv
260.42 247.604 259.41 245.588 259.41 245.588 cv
259.41 245.588 261.307 241.965 262.953 238.17 cv
264.559 234.478 265.916 230.61 265.916 230.61 cv
265.916 230.61 266.525 227.824 266.361 224.66 cv
266.219 221.908 265.299 218.717 265.299 218.717 cv
265.299 218.717 264.043 213.315 263.229 207.44 cv
262.891 205.007 263.041 202.565 262.877 200.532 cv
262.689 198.203 262.215 196.446 262.215 196.446 cv
262.215 196.446 263.6 195.732 263.584 193.979 cv
263.572 192.611 263.057 191.396 262.158 190.106 cv
261.26 188.815 260.971 189.154 260.291 188.117 cv
259.832 187.417 259.33 185.949 258.783 184.896 cv
258.254 183.879 257.67 183.263 257.67 183.263 cv
257.67 183.263 256.055 182.211 253.939 181.738 cv
251.432 181.18 248.357 181.187 248.357 181.187 cv
248.357 181.187 246.963 181.174 246.092 180.907 cv
244.975 180.566 244.318 179.952 244.318 179.952 cv
244.318 179.952 245.578 179.707 246.297 178.574 cv
246.803 177.773 246.842 175.97 246.842 175.97 cv
246.842 175.97 247.172 175.557 247.313 174.951 cv
247.42 174.48 247.348 173.781 247.348 173.781 cv
247.348 173.781 247.732 172.794 248.133 172.039 cv
248.408 171.522 248.807 170.752 248.807 170.752 cv
248.807 170.752 249.896 170.903 250.58 170.174 cv
251.146 169.568 250.994 168.508 250.994 168.508 cv
250.994 168.508 253.842 169.711 256.381 169.68 cv
257.25 169.671 265.504 169.087 268.119 166.684 cv
272.145 162.986 270.797 156.896 270.797 156.896 cv
270.797 156.896 270.453 162.408 267.594 164.483 cv
264.238 166.922 258.287 165.983 258.287 165.983 cv
258.287 165.983 263.258 165.799 266.281 163.896 cv
268.391 162.566 268.891 159.309 268.891 159.309 cv
268.891 159.309 267.887 161.266 266.41 162.411 cv
264.998 163.508 263.111 163.796 263.111 163.796 cv
263.111 163.796 264.969 162.705 266.133 160.966 cv
266.955 159.738 267.207 157.682 267.207 157.682 cv
267.207 157.682 266.906 158.188 266.652 158.473 cv
266.469 158.68 266.309 158.691 266.309 158.691 cv
266.309 158.691 267.17 156.556 268.518 154.967 cv
269.646 153.633 271.303 152.801 271.303 152.801 cv
271.303 152.801 269.795 153.41 268.484 154.373 cv
267.791 154.881 266.871 156.055 266.871 156.055 cv
266.871 156.055 267.82 154.423 268.889 153.079 cv
269.594 152.191 270.574 151.398 270.574 151.398 cv
270.574 151.398 268.787 152.661 267.271 154.211 cv
266.205 155.298 265.244 156.84 265.244 156.84 cv
265.244 156.84 265.313 156.124 266.049 154.058 cv
266.266 153.445 266.986 152.604 267.305 151.808 cv
267.801 150.568 267.881 149.435 267.881 149.435 cv
267.881 149.435 267.279 150.719 266.508 151.922 cv
265.828 152.982 265.131 153.642 264.627 155.045 cv
263.66 157.731 262.496 157.484 262.201 156.85 cv
261.951 156.313 263.729 155.325 263.729 155.325 cv
263.729 155.325 263.039 155.342 262.225 155.701 cv
261.385 156.071 260.42 156.784 260.42 156.784 cv
260.42 156.784 261.156 155.628 262.238 154.658 cv
262.91 154.057 264.012 153.501 264.16 153.427 cv
263.92 153.546 261.002 154.977 258.754 155.61 cv
257.422 155.985 256.211 155.662 256.211 155.662 cv
256.211 155.662 258.051 155.54 259.592 154.969 cv
260.699 154.557 261.652 153.642 261.652 153.642 cv
261.652 153.642 258.041 155.514 256.371 155.002 cv
255.898 154.856 255.258 153.474 255.258 153.474 cv
255.258 153.474 257.365 154.303 259.383 153.94 cv
261.566 153.547 263.672 151.959 263.672 151.959 cv
263.672 151.959 259.896 153.078 257.605 152.381 cv
256.4 152.015 255.818 150.276 255.818 150.276 cv
255.818 150.276 259.693 148.754 262.063 145.857 cv
264.598 142.756 265.639 138.27 265.58 138.327 cv
265.508 138.399 264.053 144.515 258.057 147.221 cv
255.867 148.208 253.744 147.19 253.744 147.19 cv
253.744 147.19 255.961 146.465 257.553 145.295 cv
259.129 144.137 260.084 142.535 260.084 142.535 cv
260.084 142.535 257.41 144.71 254.83 145.692 cv
252.951 146.406 250.939 146.013 250.939 146.013 cv
250.939 146.013 255.588 143.987 258.998 140.772 cv
261.918 138.021 263.672 134.008 263.672 134.008 cv
263.672 134.008 261.568 137.591 258.998 139.73 cv
256.941 141.442 254.305 141.805 254.305 141.805 cv
254.305 141.805 255.822 140.854 256.973 139.655 cv
257.9 138.691 258.512 137.43 258.512 137.43 cv
258.512 137.43 255.143 140.756 252.457 142.317 cv
250.627 143.38 249.145 142.872 249.145 142.872 cv
249.145 142.872 253.992 138.019 256.244 132.516 cv
257.957 128.328 257.221 123.125 257.221 123.125 cv
257.221 123.125 257.193 127.936 255.516 132.226 cv
254.293 135.349 251.275 138.327 251.275 138.327 cv
251.275 138.327 252.012 134.044 251.674 130.085 cv
251.313 125.862 249.873 121.946 249.873 121.946 cv
249.873 121.946 249.967 124.97 249.869 127.217 cv
249.809 128.586 249.537 129.632 249.537 129.632 cv
249.537 129.632 249.283 126.448 248.828 124.219 cv
248.416 122.195 247.797 121.105 247.797 121.105 cv
247.797 121.105 248.266 126.226 247.926 130.518 cv
247.703 133.345 246.619 135.971 246.619 135.971 cv
246.619 135.971 245.129 129.749 243.453 126.249 cv
242.549 124.357 240.953 124.134 240.953 124.134 cv
240.953 124.134 242.617 125.637 243.576 128.234 cv
244.197 129.923 244.264 133.11 244.264 133.11 cv
244.264 133.11 243.729 132.982 243.363 132.519 cv
243 132.057 242.805 131.259 242.805 131.259 cv
242.805 131.259 242.729 132.038 242.93 133.184 cv
243.094 134.117 243.455 135.315 243.561 135.652 cv
243.578 135.713 243.59 135.747 243.59 135.747 cv
243.59 135.747 243.578 135.711 243.561 135.652 cv
243.396 135.135 242.57 132.567 241.652 130.687 cv
241.07 129.498 240.111 128.622 240.111 128.622 cv
240.111 128.622 241.195 130.456 241.906 132.325 cv
242.469 133.804 242.691 135.41 242.691 135.41 cv
242.691 135.41 241.371 132.97 240.275 131.318 cv
239.596 130.293 238.934 129.744 238.934 129.744 cv
238.934 129.744 240.859 132.755 242.098 135.315 cv
242.807 136.782 243.141 138.439 243.141 138.439 cv
243.141 138.439 240.496 137.549 238.619 135.724 cv
237.621 134.752 236.801 132.269 236.801 132.269 cv
236.801 132.269 236.854 133.3 237.137 134.513 cv
237.348 135.413 237.813 136.588 237.813 136.588 cv
237.813 136.588 236.248 134.498 234.301 133.333 cv
232.727 132.391 230.688 132.325 230.688 132.325 cv
230.688 132.325 233.146 133.114 234.725 134.626 cv
235.525 135.393 236.016 137.43 236.016 137.43 cv
236.016 137.43 233.359 135.071 231.279 133.896 cv
229.783 133.051 228.668 133.278 228.668 133.278 cv
228.668 133.278 230.326 133.719 231.699 135.012 cv
232.666 135.923 233.492 137.822 233.492 137.822 cv
233.492 137.822 233.279 138.71 232.818 138.963 cv
232.414 139.185 231.754 138.776 231.754 138.776 cv
231.754 138.776 231.137 137.71 231.473 136.756 cv
231.473 136.756 231.17 137.486 230.975 138.33 cv
230.848 138.881 230.799 139.674 230.799 139.674 cv
230.799 139.674 229.773 139.802 228.826 139.543 cv
227.922 139.297 227.096 138.664 227.096 138.664 cv
227.096 138.664 226.992 139.082 227.107 139.487 cv
227.217 139.866 227.545 140.235 227.545 140.235 cv
227.545 140.235 225.652 140.935 224.4 142.476 cv
223.375 143.74 222.945 145.9 222.945 145.9 cv
222.945 145.9 221.145 147.967 220.229 150.942 cv
219.479 153.384 219.58 156.84 219.58 156.84 cv
219.58 156.84 219.465 157.934 219.021 159.006 cv
218.596 160.036 217.84 161.047 217.84 161.047 cv
217.84 161.047 213.336 160.758 210.049 160.011 cv
208.299 159.613 206.732 158.522 206.732 158.522 cv
206.732 158.522 208.104 159.544 209.781 160.325 cv
210.23 160.534 210.9 160.746 211.451 160.905 cv
212.033 161.044 212.398 161.159 212.398 161.159 cv
212.398 161.159 211.98 161.058 211.451 160.905 cv
210.57 160.694 209.189 160.431 207.799 160.431 cv
205.451 160.431 203.086 161.159 203.086 161.159 cv
203.086 161.159 207.102 160.574 210.992 161.567 cv
213.697 162.258 216.719 164.638 216.719 164.638 cv
216.719 164.638 214.268 166.026 210.895 166.813 cv
208.201 167.439 204.434 167.498 204.434 167.498 cv
204.434 167.498 207.166 167.908 209.652 167.782 cv
211.459 167.69 213.24 167.05 213.24 167.05 cv
213.24 167.05 210.771 168.662 207.84 169.742 cv
205.512 170.6 202.582 170.977 202.582 170.977 cv
202.582 170.977 205.596 170.76 208.082 170.266 cv
209.551 169.974 211.053 169.294 211.053 169.294 cv
211.053 169.294 209.047 170.297 207.172 171.005 cv
206.053 171.426 204.656 171.706 204.656 171.706 cv
204.656 171.706 205.664 171.873 206.459 171.825 cv
207.029 171.792 207.463 171.538 207.463 171.538 cv
207.463 171.538 206.166 172.394 204.877 173.155 cv
203.703 173.849 202.525 174.455 202.525 174.455 cv
202.525 174.455 205.463 173.147 208.41 172.137 cv
211.268 171.156 214.139 170.472 214.139 170.472 cv
214.139 170.472 211.736 172.224 209.734 173.398 cv
208.615 174.055 207.35 174.455 207.35 174.455 cv
207.35 174.455 208.314 174.574 209.209 174.458 cv
209.709 174.394 210.379 174.063 210.379 174.063 cv
210.379 174.063 209.729 174.792 208.822 175.339 cv
207.963 175.856 206.846 176.193 206.846 176.193 cv
206.846 176.193 208.26 176.27 209.539 176.239 cv
210.521 176.215 211.445 176.082 211.445 176.082 cv
211.445 176.082 209.834 178.171 207.715 179.964 cv
206.371 181.1 204.152 182.253 204.152 182.253 cv
204.152 182.253 205.555 182.277 207.035 181.82 cv
208.133 181.481 209.426 180.625 209.426 180.625 cv
209.426 180.625 208.176 182.568 206.885 184.169 cv
205.883 185.412 204.77 186.404 204.77 186.404 cv
204.77 186.404 206.803 184.899 208.502 183.123 cv
209.848 181.718 210.939 179.952 210.939 179.952 cv
210.939 179.952 210.066 182.979 208.926 185.776 cv
207.914 188.263 206.621 190.555 206.621 190.555 cv
206.621 190.555 208.617 187.896 209.846 185.938 cv
210.498 184.898 210.771 183.936 210.771 183.936 cv
210.771 183.936 210.85 185.757 210.533 187.161 cv
210.301 188.196 209.65 188.929 209.65 188.929 cv
209.65 188.929 207.703 190.37 206.215 192.058 cv
205.014 193.42 204.209 195.1 204.209 195.1 cv
204.209 195.1 203.992 197.089 203.744 198.463 cv
203.533 199.634 203.285 200.234 203.297 200.096 cv
203.238 200.728 203.646 201.102 203.646 201.102 cv
204.488 202.224 li
204.488 202.224 204.779 204.188 205.508 206.765 cv
206.342 209.717 206.9 210.694 206.9 210.694 cv
206.9 210.694 207.285 212.004 207.775 214.569 cv
207.969 215.575 208.137 216.96 208.314 218.061 cv
208.502 219.217 208.697 220.063 208.697 220.063 cv
208.697 220.063 209.203 221.663 209.641 223.868 cv
209.975 225.545 210.268 227.973 210.268 227.973 cv
210.268 227.973 210.346 229.472 209.791 230.957 cv
209.348 232.144 208.338 233.159 207.756 234.588 cv
206.838 236.835 205.666 239.248 205.666 239.248 cv
205.666 239.248 202.889 242.761 200.578 244.921 cv
199.389 246.034 197.869 246.541 197.869 246.541 cv
197.869 246.541 195.807 248.033 193.547 249.343 cv
192.152 250.151 190.127 251.029 190.127 251.029 cv
190.127 251.029 189.285 251.056 188.992 251.669 cv
188.67 252.343 188.893 253.61 188.893 253.61 cv
188.893 253.61 188.594 254.27 188.631 254.735 cv
188.676 255.273 189.063 255.629 189.063 255.629 cv
189.063 255.629 183.436 256.478 185.418 260.654 cv
cp
f
154.143 69.3032 mo
153.916 70.5474 152.977 72.2129 152.977 72.2129 cv
152.977 72.2129 152.469 73.8599 152.258 75.3223 cv
152.037 76.8511 151.814 78.5542 152.182 80.5991 cv
152.379 81.6997 151.626 82.7817 151.626 82.7817 cv
151.626 82.7817 151.163 82.7178 150.623 82.8374 cv
149.957 82.9849 149.187 83.3218 149.187 83.3218 cv
149.187 83.3218 148.372 78.5186 148.307 76.8564 cv
148.25 75.4375 148.375 73.8018 148.17 72.2456 cv
147.9 70.2031 147.076 68.3052 147.076 68.3052 cv
147.076 68.3052 147.076 66.6504 147.77 63.9082 cv
148.445 61.2319 149.808 57.4946 150.34 55.2837 cv
150.729 53.6694 150.84 52.6709 150.84 52.6709 cv
150.84 52.6709 151.646 54.4976 152.305 56.5327 cv
152.742 57.8809 153.125 59.729 153.125 59.729 cv
153.125 59.729 153.098 60.9282 153.357 62.8022 cv
153.545 64.1641 154.041 66.3677 154.041 66.3677 cv
154.041 66.3677 154.439 67.6768 154.143 69.3032 cv
cp
229.633 55.2212 mo
228.684 53.855 226.893 54.3008 226.893 54.3008 cv
212.818 58.1011 li
212.818 58.1011 212.018 58.1982 210.848 58.7632 cv
210.217 59.0679 209.836 59.9858 209.219 60.3413 cv
208.322 60.8574 207.289 60.7729 207.289 60.7729 cv
198.395 65.8716 li
198.395 65.8716 198.48 64.9956 198.453 64.0503 cv
198.41 62.6152 198.248 60.9009 198.248 60.9009 cv
198.248 60.9009 198.91 58.4658 198.945 57.5918 cv
199.025 55.647 198.52 54.312 198.52 54.312 cv
198.52 54.312 198.873 54.1323 198.979 53.8872 cv
199.109 53.584 198.996 53.2031 198.996 53.2031 cv
198.996 53.2031 198.84 48.9248 198.375 45.7119 cv
197.785 41.6245 196.436 39.5239 196.436 39.5239 cv
196.436 39.5239 195.285 36.9097 193.609 35.4473 cv
190.877 33.0625 187.084 31.3613 187.084 31.3613 cv
187.084 31.3613 183.375 29.5229 180.389 27.5493 cv
177.115 25.3862 174.662 23.7471 174.662 23.7471 cv
174.662 23.7471 173.955 21.3101 173.195 18.2988 cv
172.455 15.3711 171.555 11.2324 170.227 8.46191 cv
167.92 3.65527 164.469 2.08936 164.469 2.08936 cv
164.469 2.08936 163.416 1.2417 162.133 .738281 cv
160.797 .213867 159.227 .0327148 159.227 .0327148 cv
159.227 .0327148 156.395 -.26123 154.121 .914063 cv
151.214 2.4165 148.709 5.47021 148.709 5.47021 cv
148.709 5.47021 145.934 6.95703 145.397 10.873 cv
145.023 13.6133 146.063 16.1465 147.194 18.7241 cv
148.203 21.0205 149.006 25.376 149.073 26.4814 cv
149.213 28.7705 149.559 31.0513 149.559 31.0513 cv
149.559 31.0513 149.583 29.8711 149.771 28.8594 cv
150.05 27.3584 150.529 25.8276 150.529 25.8276 cv
150.529 25.8276 150.329 26.8013 150.357 27.4326 cv
150.417 28.8145 150.733 30.5049 150.733 30.5049 cv
150.733 30.5049 150.562 28.7163 150.806 27.208 cv
151.184 24.8711 152.039 22.4395 152.039 22.4395 cv
152.039 22.4395 151.486 24.2241 151.48 25.2734 cv
151.463 28.2393 152.682 29.959 152.682 29.959 cv
152.682 29.959 152.352 29.4087 152.281 28.7246 cv
152.16 27.5693 152.271 26.0225 152.271 26.0225 cv
152.271 26.0225 152.25 27.5215 152.59 28.3711 cv
152.955 29.2871 153.684 29.5596 153.684 29.5596 cv
153.684 29.5596 152.916 28.8374 152.766 28.1396 cv
152.51 26.9585 152.813 25.5356 152.813 25.5356 cv
152.813 25.5356 153.369 26.6885 154.107 27.5635 cv
154.941 28.5479 155.965 29.2676 155.965 29.2676 cv
155.965 29.2676 152.578 30.2188 149.8 31.5786 cv
147.758 32.5776 146.094 34.0981 146.094 34.0981 cv
146.094 34.0981 144.512 35.2666 143.401 37.1118 cv
142.201 39.106 141.465 41.7881 141.465 41.7881 cv
141.465 41.7881 140.232 45.0869 140.153 47.3159 cv
140.092 49.0186 141.18 49.7939 141.18 49.7939 cv
141.18 49.7939 140.136 51.8657 139.758 53.3936 cv
139.196 55.6641 139.226 57.6929 139.226 57.6929 cv
139.226 57.6929 138.167 61.9829 137.874 65.6089 cv
137.528 69.8677 137.941 73.5645 137.941 73.5645 cv
137.941 73.5645 138.359 76.0737 139.204 78.3237 cv
139.999 80.4414 141.139 82.3521 141.895 83.9819 cv
142.5 85.2856 142.817 86.5513 142.817 86.5513 cv
142.817 86.5513 140.892 88.7119 139.71 90.4624 cv
138.259 92.6147 137.494 94.4409 137.494 94.4409 cv
137.494 94.4409 135.764 97.9492 135.464 99.792 cv
134.579 105.236 134.359 113.721 134.359 113.721 cv
134.359 113.721 134.143 115.813 135.257 117.002 cv
136.668 118.505 139.479 119.182 139.479 119.182 cv
139.479 119.182 141.172 119.791 142.582 119.786 cv
144.275 119.78 145.738 119.16 145.738 119.16 cv
145.738 119.16 145.368 121.301 145.516 123.703 cv
145.766 127.771 146.59 133.018 146.59 133.018 cv
146.59 133.018 146.309 133.989 146.518 135.237 cv
146.847 137.214 147.722 144.693 148.301 149.75 cv
166.453 149.75 li
166.311 148.765 166.201 147.742 166.201 147.742 cv
166.201 147.742 165.957 146.553 165.613 146.041 cv
165.123 145.311 164.482 145.179 164.482 145.179 cv
164.482 145.179 164.676 144.514 164.551 144.224 cv
164.361 143.773 163.822 143.625 163.822 143.625 cv
163.822 143.625 164.109 142.757 164.107 142.336 cv
164.1 140.681 163.811 141.076 163.811 141.076 cv
163.811 141.076 164.234 139.571 164.313 138.539 cv
164.383 137.623 164.107 137.166 164.107 137.166 cv
164.107 137.166 164.439 135.151 164.416 133.639 cv
164.391 131.985 164.012 130.821 164.012 130.821 cv
164.012 130.821 165.061 128.297 165.895 125.663 cv
167.039 122.053 168.07 118.02 168.07 118.02 cv
168.07 118.02 168.533 116.283 169.063 115.556 cv
169.607 114.81 170.221 115.072 170.221 115.072 cv
170.221 115.072 170.938 116.605 171.68 119.118 cv
172.291 121.181 172.678 124.405 173.238 126.504 cv
173.871 128.886 174.641 130.021 174.641 130.021 cv
174.641 130.021 174.105 131.912 174.373 132.75 cv
174.83 134.181 176.199 134.893 176.199 134.893 cv
176.199 134.893 176.117 136.307 176.545 137.161 cv
176.967 137.999 177.898 138.276 177.898 138.276 cv
177.898 138.276 176.896 139.529 177.043 140.413 cv
177.225 141.502 178.563 142.267 178.563 142.267 cv
178.563 142.267 178.273 142.883 178.393 143.879 cv
178.576 145.439 178.957 147.828 179.279 149.75 cv
195.15 149.75 li
194.707 144.332 li
194.707 144.332 194.381 142.489 193.906 140.898 cv
193.264 138.74 192.416 136.658 192.416 136.658 cv
192.416 136.658 192.77 135.681 192.58 135.082 cv
192.342 134.325 191.551 133.908 191.551 133.908 cv
191.551 133.908 192.068 132.967 191.955 132.43 cv
191.762 131.519 190.893 130.805 190.893 130.805 cv
190.893 130.805 191.066 130.08 191.027 129.639 cv
190.971 128.998 190.695 128.563 190.695 128.563 cv
190.695 128.563 190.887 127.492 190.77 126.743 cv
190.605 125.703 190.117 124.887 190.117 124.887 cv
190.117 124.887 190.836 119.014 190.881 113.552 cv
190.945 105.871 190.342 97.8315 190.342 97.8315 cv
190.342 97.8315 190.443 95.7598 190.33 93.894 cv
190.174 91.3086 189.787 88.6909 189.787 88.6909 cv
189.787 88.6909 190.105 88.3481 190.045 87.9365 cv
189.961 87.3623 189.549 86.5068 189.357 85.7974 cv
189.143 85.0005 189.148 84.3804 189.148 84.3804 cv
189.148 84.3804 190.561 83.6982 191.67 82.8652 cv
193.059 81.8223 194.209 80.5806 194.209 80.5806 cv
194.209 80.5806 196.035 78.3379 196.697 76.8926 cv
197.721 74.6572 198.445 71.6162 198.445 71.6162 cv
208.523 66.0449 li
208.523 66.0449 209.992 65.4136 211.117 65.7031 cv
212.068 65.9482 212.58 66.9014 212.58 66.9014 cv
212.58 66.9014 212.545 67.9268 213.334 68.3306 cv
214.438 68.897 215.328 67.9707 215.328 67.9707 cv
215.328 67.9707 217.512 66.5493 218.906 65.2734 cv
221.105 63.2603 222.891 61.0435 222.891 61.0435 cv
222.891 61.0435 225.02 62.585 226.496 62.0244 cv
228.08 61.4224 229.471 59.5 229.471 59.5 cv
229.471 59.5 231.137 57.3857 229.633 55.2212 cv
cp
ef
42.8467 62.0742 mo
42.8467 62.0742 42.5151 55.9229 42.6777 51.9214 cv
42.7539 50.043 43.3965 48.5527 43.3965 48.5527 cv
43.3965 48.5527 43.7324 49.5972 44.1851 51.2959 cv
44.4663 52.353 44.7705 53.9561 45.1343 54.8271 cv
45.7314 56.2563 47.9116 57.0972 49.2183 57.5464 cv
50.2144 57.8882 51.3481 57.9702 51.3481 57.9702 cv
42.8467 62.0742 li
cp
19.6641 51.02 mo
19.377 52.1543 18.479 53.4263 18.479 53.4263 cv
18.479 53.4263 17.812 55.3398 16.7412 57.1401 cv
16.0332 58.3296 14.9839 59.2632 14.4248 60.2993 cv
13.7998 61.4575 13.7153 62.2573 13.7153 62.2573 cv
13.7153 62.2573 13.3965 63.2393 12.9546 64.1709 cv
12.5557 65.0117 12.0298 65.8115 12.0298 65.8115 cv
12.0298 65.8115 11.6113 64.3242 11.5215 62.5137 cv
11.4282 60.6421 11.6636 58.4463 11.6636 58.4463 cv
11.6636 58.4463 11.8071 56.2114 11.8374 54.415 cv
11.8613 52.9707 12.1118 51.3496 12.5293 50.6509 cv
13.2163 49.4995 14.0698 48.4458 15.002 46.0601 cv
15.7104 44.2461 16.1338 42.5068 16.1338 42.5068 cv
16.1338 42.5068 16.7095 42.3672 17.228 41.8784 cv
17.6528 41.478 18.0391 40.7109 18.0391 40.7109 cv
18.0391 40.7109 18.4146 42.8228 18.9888 44.8267 cv
19.3008 45.916 19.8716 46.7573 19.9814 47.4902 cv
20.0913 48.2231 20.0972 49.3086 19.6641 51.02 cv
cp
94.0815 41.6055 mo
93.6821 39.584 91.5576 39.6851 91.5576 39.6851 cv
82.3662 41.6089 li
78.4761 42.5493 li
78.4761 42.5493 77.3594 42.4521 77.0796 42.9824 cv
76.5884 43.9146 76.8086 45.7129 76.8086 45.7129 cv
67.917 49.9023 li
67.917 49.9023 67.3862 49.7935 66.9028 49.8613 cv
66.3262 49.9419 65.7788 50.2017 65.7788 50.2017 cv
65.7788 50.2017 65.1128 50.2319 64.8613 50.5337 cv
64.5801 50.8711 64.7104 51.4844 64.7104 51.4844 cv
64.7104 51.4844 64.3638 51.3262 64.1553 51.4429 cv
63.8491 51.6143 63.6416 52.083 63.6416 52.083 cv
58.8965 54.2202 li
58.8965 54.2202 55.6777 52.9355 53.396 51.4971 cv
51.9321 50.5742 51.0303 49.2612 51.0303 49.2612 cv
51.0303 49.2612 50.6899 47.1948 50.1411 45.6245 cv
49.3628 43.3994 48.6362 42.0366 48.6362 42.0366 cv
48.6362 42.0366 49.5508 41.625 49.9976 41.0825 cv
50.4482 40.5347 50.4316 39.856 50.4316 39.856 cv
50.4316 39.856 49.5146 39.2754 49.1694 38.0669 cv
48.5933 36.0503 48.7646 33.7432 48.6792 32.9307 cv
48.5933 32.1182 48.0386 30.6797 47.5293 29.9063 cv
46.5283 28.3862 45.0879 27.8433 45.0879 27.8433 cv
45.0879 27.8433 43.7065 27.4307 42.6001 26.877 cv
41.4419 26.2983 40.5566 25.5776 40.5566 25.5776 cv
40.5566 25.5776 39.2046 25.2222 38.562 23.605 cv
37.9668 22.106 38.0767 19.3359 38.0767 19.3359 cv
38.0767 19.3359 38.1006 17.438 38.0806 15.6587 cv
38.0581 13.6665 37.9912 11.769 37.9912 11.769 cv
37.9912 11.769 38.168 10.2676 38.043 9.21338 cv
37.9116 8.10986 37.4785 7.45166 37.4785 7.45166 cv
37.4785 7.45166 36.8525 5.71143 36.106 4.67578 cv
35.165 3.37012 34.0586 2.70605 34.0586 2.70605 cv
34.0586 2.70605 32.6987 1.38525 30.644 1.51172 cv
28.0845 1.66992 25.3804 3.73242 25.3804 3.73242 cv
25.3804 3.73242 25.124 4.05078 24.8296 4.33496 cv
24.5317 4.62207 24.1953 4.87402 24.1953 4.87402 cv
24.1953 4.87402 22.79 5.47363 22.0405 6.45557 cv
21.2012 7.55518 21.0073 9.05127 21.0073 9.05127 cv
21.0073 9.05127 20.7715 10.1133 20.4434 10.6465 cv
20.1968 11.0464 19.835 10.957 19.835 10.957 cv
19.835 10.957 20.0693 11.2339 20.1201 11.4717 cv
20.1704 11.7041 20.0361 11.8975 20.0361 11.8975 cv
20.0361 11.8975 19.9956 12.127 19.8589 12.0977 cv
19.6982 12.063 19.438 11.769 19.438 11.769 cv
19.438 11.769 19.4092 11.9858 19.5718 12.1846 cv
19.7866 12.4473 20.207 12.7095 20.207 12.7095 cv
20.207 12.7095 19.8945 12.6353 19.7236 12.7007 cv
19.4644 12.7993 19.3096 13.0518 19.3096 13.0518 cv
19.3096 13.0518 19.8379 13.1191 20.0923 13.2886 cv
20.4087 13.499 20.4639 13.8213 20.4639 13.8213 cv
20.4639 13.8213 20.459 14.1655 20.2754 14.2573 cv
20.0752 14.3574 19.6943 14.2061 19.6943 14.2061 cv
19.6943 14.2061 20.0947 14.7603 20.5713 14.8608 cv
21.2695 15.0078 22.1313 14.7188 22.1313 14.7188 cv
22.1313 14.7188 21.9048 15.2407 21.541 15.5005 cv
21.0322 15.8643 20.3354 16.0015 20.3354 16.0015 cv
20.3354 16.0015 20.6069 16.2905 21.02 16.2803 cv
21.4609 16.2695 22.0459 15.9585 22.0459 15.9585 cv
22.0459 15.9585 22.0054 16.1191 21.7065 16.3579 cv
21.2803 16.6992 20.5493 17.1558 20.5493 17.1558 cv
20.5493 17.1558 21.1611 17.0503 21.5557 16.8091 cv
22.2344 16.3945 22.8579 15.7451 22.8579 15.7451 cv
22.8579 15.7451 22.0947 17.4268 21.04 18.46 cv
20 19.4785 18.6685 19.8486 18.6685 19.8486 cv
18.6685 19.8486 19.1597 19.8574 19.6235 19.7339 cv
20.1201 19.6016 20.5923 19.3359 20.5923 19.3359 cv
20.5923 19.3359 20.6221 19.5259 20.4492 19.7065 cv
20.1758 19.9927 19.6514 20.3193 19.6514 20.3193 cv
19.6514 20.3193 19.9043 20.3423 20.1582 20.2363 cv
20.417 20.1284 20.6777 19.8916 20.6777 19.8916 cv
20.6777 19.8916 20.6812 20.5225 20.3589 20.9453 cv
19.792 21.6885 18.7539 22.4141 18.7539 22.4141 cv
18.7539 22.4141 19.4028 22.2734 20.0352 21.8145 cv
20.7256 21.3135 21.4043 20.4902 21.4043 20.4902 cv
21.4043 20.4902 21.4189 20.8823 21.1748 21.2051 cv
20.7896 21.7144 20.0791 22.2432 20.0791 22.2432 cv
20.0791 22.2432 20.6187 22.1074 20.9927 21.8047 cv
21.4966 21.3965 21.8745 20.7896 21.8745 20.7896 cv
21.8745 20.7896 21.8843 21.5186 21.5796 22.2383 cv
21.2441 23.0327 20.5923 23.8247 20.5923 23.8247 cv
21.6182 23.1406 22.5156 21.8154 22.5156 21.8154 cv
22.5156 21.8154 22.438 22.48 22.2324 22.833 cv
21.8809 23.436 21.3188 23.8677 21.3188 23.8677 cv
21.3188 23.8677 19.9268 24.6577 18.8486 25.3203 cv
17.6084 26.083 16.6592 26.7319 16.6592 26.7319 cv
16.6592 26.7319 14.5596 27.8701 13.73 29.1396 cv
12.4712 31.0645 12.2983 33.4009 12.2983 33.4009 cv
12.2983 33.4009 12.1816 34.7432 11.8379 35.9009 cv
11.5444 36.8887 11.0161 37.7188 11.0161 37.7188 cv
11.0161 37.7188 10.6172 38.3999 10.5693 38.833 cv
10.5337 39.1519 10.8447 39.2578 10.8447 39.2578 cv
10.8447 39.2578 10.2822 40.2349 9.79248 41.4019 cv
8.979 43.3428 8.06641 45.8838 8.06641 45.8838 cv
8.06641 45.8838 6.60547 48.3198 6.07715 50.3447 cv
5.25977 53.478 5.24463 56.6997 5.24463 56.6997 cv
5.24463 56.6997 5.25244 58.2246 5.65039 60.0908 cv
5.94336 61.4644 6.50439 62.5 6.8667 63.915 cv
7.41211 66.042 7.72412 68.3281 7.72412 68.3281 cv
7.72412 68.3281 7.59619 68.8516 7.59619 69.5249 cv
7.59619 70.7847 7.72412 72.4316 7.72412 72.4316 cv
7.72412 72.4316 5.53564 73.5845 5.47949 75.7646 cv
5.40918 78.4839 7.46777 82.3501 7.46777 82.3501 cv
7.46777 82.3501 10.2495 87.9214 12.1089 89.8462 cv
14.936 92.772 17.2573 92.4814 17.2573 92.4814 cv
17.2573 92.4814 17.5894 95.5854 17.3979 97.9121 cv
17.1841 100.508 16.4453 102.357 16.4453 102.357 cv
16.4453 102.357 16.1543 103.14 15.7598 103.917 cv
15.4468 104.534 15.0679 105.069 14.7183 105.769 cv
13.7695 107.666 12.9399 109.369 12.9399 109.369 cv
12.9399 109.369 11.9844 110.931 11.5815 112.936 cv
11.0596 115.534 11.0586 118.73 11.0586 118.73 cv
11.0586 118.73 10.5171 119.639 10.23 120.637 cv
9.93994 121.647 9.9043 122.749 9.9043 122.749 cv
9.9043 122.749 9.33691 123.473 9.06396 124.471 cv
8.78125 125.503 8.79297 126.811 8.79297 126.811 cv
8.79297 126.811 8.35254 127.803 8.26514 129.078 cv
8.20557 129.947 8.51611 130.994 8.43457 131.768 cv
8.22949 133.706 7.98047 134.505 7.98047 134.505 cv
7.98047 134.505 7.99121 136.228 7.78809 137.35 cv
7.58496 138.472 7.16846 138.995 7.16846 138.995 cv
7.16846 138.995 6.86719 140.265 6.97803 141.377 cv
7.06885 142.291 7.37451 142.926 7.54932 143.8 cv
7.78906 144.997 7.89502 146.305 7.89502 146.305 cv
7.89502 146.305 7.8291 148.094 8.69922 148.879 cv
10.1089 150.151 11.187 150.708 12.7261 150.665 cv
14.2651 150.622 14.7446 150.685 16.0747 150.43 cv
17.1826 150.218 17.6421 149.725 17.6421 149.725 cv
17.6421 149.725 18.0361 148.872 17.7231 148.275 cv
17.5757 147.994 17.0981 148.051 16.8359 147.861 cv
16.4468 147.58 16.2744 147.117 16.2744 147.117 cv
16.2744 147.117 16.0439 146.399 15.7783 145.868 cv
15.4175 145.146 14.9917 144.552 14.9917 144.552 cv
14.9917 144.552 15.1919 142.972 15.2256 141.259 cv
15.2744 138.793 15.1626 135.916 15.1626 135.916 cv
15.1626 135.916 15.3066 134.769 15.4731 133.935 cv
15.7026 132.789 15.9751 131.855 15.9751 131.855 cv
15.9751 131.855 16.6177 130.835 16.8359 129.489 cv
17.2129 127.163 17.2573 123.946 17.2573 123.946 cv
17.2573 123.946 17.8223 122.676 18.3652 121.354 cv
18.9536 119.922 19.5234 118.431 19.5234 118.431 cv
19.5234 118.431 20.5977 114.728 21.3418 112.623 cv
22.2124 110.16 22.7725 109.24 22.7725 109.24 cv
22.7725 109.24 23.9312 107.86 24.5806 106.658 cv
25.4736 105.005 25.936 103.383 25.936 103.383 cv
25.936 103.383 26.5645 102.154 26.9595 100.476 cv
27.5503 97.9658 27.9878 94.6621 27.9878 94.6621 cv
27.9878 94.6621 28.1226 91.7886 28.2847 90.0757 cv
28.5317 87.4707 28.8428 85.6421 28.8428 85.6421 cv
28.8428 85.6421 29.6426 86.834 30.0347 89.2192 cv
30.6108 92.7256 30.8521 97.8682 30.8521 97.8682 cv
30.8521 97.8682 30.7153 98.8403 30.6045 100.135 cv
30.4463 101.987 30.2964 104.367 30.2964 104.367 cv
30.2964 104.367 29.8315 104.817 29.7056 105.278 cv
29.5747 105.758 29.7832 106.248 29.7832 106.248 cv
29.7832 106.248 27.9707 108.599 26.0952 112.227 cv
24.085 116.114 22.0029 121.296 22.0029 121.296 cv
22.0029 121.296 21.4272 121.638 21.2974 122.274 cv
21.085 123.311 21.2764 124.844 21.2764 124.844 cv
21.2764 124.844 20.5723 125.9 20.4531 127.19 cv
20.2993 128.864 20.7202 130.872 20.7202 130.872 cv
20.7202 130.872 20.2842 131.707 20.1729 132.739 cv
20.0146 134.214 19.9937 135.617 20.1646 136.044 cv
20.3354 136.472 20.938 136.549 21.3989 137.373 cv
21.835 138.151 21.96 139.251 21.96 139.251 cv
21.96 139.251 22.1191 140.459 22.6152 141.491 cv
23.2017 142.709 24.1406 143.782 24.1406 143.782 cv
24.1406 143.782 25.9966 144.949 27.0649 145.131 cv
28.9966 145.459 30.6812 144.894 30.6812 144.894 cv
30.6812 144.894 31.5088 144.695 31.5425 144.301 cv
31.6592 142.956 30.9375 142.884 30.9375 142.884 cv
30.9375 142.884 30.4009 142.779 29.9307 142.265 cv
29.2939 141.568 28.6719 140.405 28.6719 140.405 cv
28.6719 140.405 28.4331 138.977 27.9175 137.449 cv
27.5718 136.424 27.0566 135.532 26.7183 134.821 cv
26.3916 134.134 26.2349 133.18 26.2349 133.18 cv
26.2349 133.18 26.5264 131.42 26.8442 130.245 cv
27.2256 128.833 27.646 127.964 27.646 127.964 cv
27.646 127.964 28.9443 125.105 30.1187 122.894 cv
31.6357 120.037 33.1182 117.662 33.1182 117.662 cv
33.1182 117.662 34.5913 114.952 35.8926 112.639 cv
37.2817 110.169 38.5044 108.086 38.5044 108.086 cv
38.5044 108.086 39.54 107.019 40.022 105.455 cv
40.7793 102.997 41.1123 99.6216 41.1123 99.6216 cv
41.1123 99.6216 42.8311 94.6514 43.2568 90.644 cv
43.9126 84.4683 43.3779 78.2891 43.3779 78.2891 cv
43.3779 78.2891 44.2212 77.2495 44.3003 76.3203 cv
44.3916 75.2505 43.7202 74.27 43.7202 74.27 cv
43.7202 74.27 43.7231 72.7793 43.6782 71.3213 cv
43.6187 69.3853 43.5063 67.3447 43.5063 67.3447 cv
58.2979 59.3931 li
58.2979 59.3931 59.7725 59.5435 61.3271 59.6504 cv
62.8716 59.7568 63.6846 59.9917 64.4966 60.0771 cv
65.3091 60.1626 65.6992 59.9561 66.751 59.4175 cv
68.2158 58.6665 69.6694 57.1699 69.6694 57.1699 cv
69.6694 57.1699 70.3027 56.8247 70.8115 56.3477 cv
71.3286 55.8628 71.7217 55.2461 71.7217 55.2461 cv
71.7217 55.2461 71.9556 54.5742 72.2041 53.9517 cv
72.3545 53.5757 72.5103 53.2988 72.624 52.9673 cv
72.9214 52.0957 72.9185 51.7407 72.9185 51.7407 cv
78.3906 48.8765 li
78.3906 48.8765 79.395 48.4487 80.2715 48.4487 cv
81.1479 48.4487 81.896 48.8765 81.896 48.8765 cv
81.896 48.8765 82.6235 49.5259 83.4072 49.2129 cv
84.3228 48.8462 85.3159 47.5083 85.3159 47.5083 cv
85.3159 47.5083 87.1372 45.9131 88.2129 45.1846 cv
89.2529 44.481 89.5483 44.644 89.5483 44.644 cv
89.5483 44.644 90.5562 45.2354 91.5571 45.1895 cv
92.4023 45.1504 93.2676 44.4731 93.2676 44.4731 cv
93.2676 44.4731 94.5459 43.9551 94.0815 41.6055 cv
cp
ef
51.313 229.145 mo
51.313 229.145 50.585 228.515 50.2646 227.646 cv
49.9541 226.8 50.0513 225.713 50.0513 225.713 cv
50.0513 225.713 51.6504 226.424 53.2251 226.869 cv
54.1318 227.125 55.4019 227.228 55.4019 227.228 cv
51.313 229.145 li
cp
18.8574 213.396 mo
18.8574 213.396 18.5845 216.182 18.186 218.026 cv
17.9424 219.152 17.4941 219.706 17.4941 219.706 cv
17.4941 219.706 16.0601 217.803 14.6694 214.305 cv
14.4077 213.646 14.1387 212.16 13.8384 211.116 cv
13.3154 209.298 12.8003 207.895 12.8003 207.895 cv
12.8003 207.895 12.1392 206.411 12.021 205.481 cv
11.9492 204.916 12.3965 204.715 12.3965 204.715 cv
12.3965 204.715 14.5581 203.008 16.2026 201.075 cv
17.3398 199.738 18.1509 197.951 18.1509 197.951 cv
18.1509 197.951 19.1528 200.637 19.3809 205.63 cv
19.5508 209.35 18.8574 213.396 18.8574 213.396 cv
cp
103.572 208.729 mo
103.193 206.343 99.416 206.684 99.416 206.684 cv
88.1602 207.844 li
88.1602 207.844 87.4487 207.978 87.4409 208.5 cv
87.4263 209.591 88.1099 211.528 88.1099 211.528 cv
79.8384 215.574 li
79.8384 215.574 79.4932 214.851 79.3286 214.657 cv
79.0811 214.366 78.52 214.508 78.52 214.508 cv
78.52 214.508 78.1465 214.78 78.0615 215.112 cv
77.9297 215.623 78.0654 216.273 78.0654 216.273 cv
76.9043 216.778 li
76.9043 216.778 76.7651 215.975 76.4531 215.607 cv
76.1885 215.298 75.7432 215.416 75.7432 215.416 cv
75.7432 215.416 75.3799 215.571 75.3687 216.071 cv
75.3545 216.673 75.6924 217.637 75.6924 217.637 cv
75.6924 217.637 75.2549 217.521 74.9688 217.626 cv
74.5313 217.786 74.1787 218.191 74.1787 218.191 cv
64.1846 222.836 li
64.1846 222.836 63.0894 222.645 61.6855 221.928 cv
60.6421 221.396 59.4287 220.392 58.3691 219.919 cv
56.5381 219.103 55.3511 218.898 55.3511 218.898 cv
55.3511 218.898 55.1929 217.81 54.7637 217.42 cv
53.7959 216.542 52.0703 215.92 52.0703 215.92 cv
52.0703 215.92 52.2144 213.793 52.2651 211.833 cv
52.3369 209.064 52.3228 206.179 52.3228 206.179 cv
52.3228 206.179 53.8276 205.781 54.314 205.479 cv
55.0938 204.993 54.998 204.513 54.998 204.513 cv
54.998 204.513 54.1538 203.339 53.8774 201.031 cv
53.4917 197.814 53.6353 193.156 53.6353 193.156 cv
53.6353 193.156 53.585 190.069 52.6865 188.883 cv
50.7314 186.301 47.3252 184.424 47.3252 184.424 cv
47.3252 184.424 46.7563 183.722 46.3086 183.049 cv
45.6045 181.994 44.9028 180.789 44.9028 180.789 cv
44.9028 180.789 44.5151 179.813 44.4116 178.809 cv
44.251 177.242 44.3477 175.389 44.3477 175.389 cv
44.3477 175.389 44.8765 176.254 45.272 177.584 cv
45.707 179.049 46.0127 180.991 46.0127 180.991 cv
46.0127 180.991 45.9185 180.031 45.9863 179.545 cv
46.0884 178.819 46.3667 178.468 46.3667 178.468 cv
46.3667 178.468 46.2676 179.02 46.332 179.638 cv
46.4351 180.622 46.7197 181.85 46.7197 181.85 cv
46.7197 181.85 46.6318 179.429 46.8022 177.653 cv
46.9844 175.748 47.4268 174.48 47.4268 174.48 cv
47.4268 174.48 47.3369 175.615 47.4165 176.304 cv
47.5659 177.588 47.9312 178.821 47.9312 178.821 cv
47.9312 178.821 47.7441 177.74 47.814 176.797 cv
47.8945 175.706 48.2339 174.732 48.2339 174.732 cv
48.2339 174.732 48.374 175.189 48.6875 175.573 cv
49.0518 176.018 49.5972 176.398 49.5972 176.398 cv
49.5972 176.398 49.0742 175.271 48.8638 174.048 cv
48.6709 172.928 48.7896 171.703 48.7896 171.703 cv
48.7896 171.703 49.0103 172.457 49.3975 172.977 cv
49.8164 173.54 50.4048 173.875 50.4048 173.875 cv
50.4048 173.875 50.2407 173.189 50.0601 172.66 cv
49.8403 172.016 49.5972 171.502 49.5972 171.502 cv
49.5972 171.502 50.1279 171.868 50.624 172.163 cv
51.0581 172.421 51.4648 172.612 51.4648 172.612 cv
51.4648 172.612 50.2773 171.679 49.7725 170.759 cv
49.0542 169.452 48.9409 168.02 48.9409 168.02 cv
48.9409 168.02 49.2837 165.282 49.272 163.225 cv
49.2583 160.731 48.8901 158.833 48.8901 158.833 cv
48.8901 158.833 48.3496 156.924 47.7539 155.767 cv
47.0259 154.351 46.2153 153.634 46.2153 153.634 cv
46.2153 153.634 45.3794 152.092 44.7192 151.499 cv
43.2861 150.216 41.3696 149.293 41.3696 149.293 cv
41.3696 149.293 40.1587 148.836 39.1611 149.099 cv
37.2329 149.607 34.8584 151.009 34.8584 151.009 cv
34.8584 151.009 33.5591 151.752 32.646 153.099 cv
31.1914 155.244 29.8608 158.378 29.8608 158.378 cv
29.356 160.246 li
29.356 160.246 29.269 160.509 29.0034 160.52 cv
28.6709 160.533 28.1445 160.296 28.1445 160.296 cv
28.1445 160.296 28.6802 161.074 29.1509 161.315 cv
29.7075 161.601 30.2144 161.356 30.2144 161.356 cv
30.2144 161.356 29.8101 162.131 29.1699 162.201 cv
28.4521 162.281 27.4888 161.659 27.4888 161.659 cv
27.4888 161.659 27.8359 162.41 28.2456 162.82 cv
28.8364 163.411 29.5581 163.729 29.5581 163.729 cv
29.5581 163.729 29.2832 164.103 28.9185 163.996 cv
28.2007 163.787 27.1353 163.022 27.1353 163.022 cv
27.1353 163.022 27.8228 164.002 28.3906 164.345 cv
29.0303 164.731 29.5581 164.486 29.5581 164.486 cv
29.5581 164.486 29.6304 164.928 29.502 165.363 cv
29.3779 165.785 29.0537 166.202 29.0537 166.202 cv
29.0537 166.202 28.7256 166.472 28.4956 166.956 cv
28.063 167.866 27.5894 169.281 27.5894 169.281 cv
27.5894 169.281 27.8262 168.683 28.1455 168.297 cv
28.5483 167.812 29.0537 167.515 29.0537 167.515 cv
29.0537 167.515 28.8442 168.797 28.2593 169.66 cv
27.7988 170.34 26.9336 170.645 26.9336 170.645 cv
26.9336 170.645 26.6211 170.659 26.4102 170.878 cv
26.0063 171.297 25.5703 172.058 25.5703 172.058 cv
25.5703 172.058 25.981 171.741 26.3306 171.729 cv
26.6616 171.716 26.9336 172.007 26.9336 172.007 cv
26.9336 172.007 26.7012 172.385 26.2925 172.479 cv
25.647 172.625 24.7124 172.512 24.7124 172.512 cv
24.7124 172.512 25.4185 172.996 26.1797 172.969 cv
27.4688 172.925 29.104 172.36 29.104 172.36 cv
29.104 172.36 28.9458 172.705 28.7495 172.946 cv
28.4248 173.346 27.9932 173.724 27.9932 173.724 cv
27.9932 173.724 29.916 173.771 30.6851 172.591 cv
31.7573 170.946 31.7788 167.918 31.7788 167.918 cv
31.7788 167.918 32.0801 169.534 31.8657 171.023 cv
31.627 172.681 30.8706 174.228 30.8706 174.228 cv
30.8706 174.228 27.8774 174.442 26.627 175.019 cv
25.061 175.738 22.542 175.489 22.542 175.489 cv
22.542 175.489 19.7598 176.681 18.1821 177.705 cv
13.8491 180.518 15.6968 179.979 12.5425 184.296 cv
10.9585 186.464 9.16602 188.311 9.16602 188.311 cv
9.16602 188.311 8.49658 189.332 8.37646 189.979 cv
8.24463 190.691 8.66113 191.036 8.66113 191.036 cv
8.66113 191.036 8.21289 192.07 7.75732 192.906 cv
7.1499 194.022 6.49072 195.023 6.49072 195.023 cv
6.49072 195.023 4.61621 197.384 3.25195 199.771 cv
1.79248 202.324 .837891 204.917 .837891 204.917 cv
.837891 204.917 .0449219 205.891 .00341797 206.728 cv
-.0537109 207.883 .635742 209.005 .635742 209.005 cv
.635742 209.005 1.00537 210.666 1.72607 212.323 cv
2.44385 213.973 3.5127 215.617 3.5127 215.617 cv
3.5127 215.617 4.6709 218.071 6.26904 220.226 cv
9.04736 223.97 12.9517 228.337 12.9517 228.337 cv
12.9517 228.337 9.21924 231.407 8.11133 234.378 cv
6.58691 238.468 7.55078 242.824 7.55078 242.824 cv
7.55078 242.824 8.30273 247.045 9.66797 250.224 cv
12.1748 256.057 16.0308 262.561 16.0308 262.561 cv
16.0308 262.561 15.7964 266.173 15.8174 269.879 cv
15.8452 274.942 16.1318 280.529 16.1318 280.529 cv
16.1318 280.529 15.5503 281.496 15.5244 282.345 cv
15.5 283.161 16.0308 283.86 16.0308 283.86 cv
16.0308 283.86 15.3716 284.731 15.1567 286.07 cv
15.0132 286.962 15.0303 288.024 15.0664 288.732 cv
30.7173 288.732 li
30.8228 288.485 30.9204 288.206 30.98 287.919 cv
31.2144 286.789 31.0723 285.526 31.0723 285.526 cv
31.0723 285.526 31.5801 283.814 31.6318 282.494 cv
31.6807 281.243 31.2744 280.378 31.2744 280.378 cv
31.2744 280.378 31.5532 279.654 31.7173 279.179 cv
32.0156 278.313 32.2837 277.45 32.2837 277.45 cv
32.2837 277.45 32.7266 275.939 32.8965 274.165 cv
33.1597 271.416 33.1924 267.961 33.1924 267.961 cv
33.1924 267.961 34.7642 267.659 35.9468 266.673 cv
37.8096 265.118 39.6025 262.61 39.6025 262.61 cv
39.6025 262.61 42.5532 264.19 45.5298 266.558 cv
49.0449 269.354 52.6758 273.009 52.6758 273.009 cv
52.6758 273.009 53.5352 274.563 54.3789 275.395 cv
55.2983 276.301 56.209 276.491 56.209 276.491 cv
56.209 276.491 56.3765 277.415 56.7539 278.09 cv
57.3027 279.072 58.127 279.923 58.127 279.923 cv
58.127 279.923 58.1362 281.729 58.5815 282.738 cv
58.9937 283.671 59.8433 283.81 59.8433 283.81 cv
59.8433 283.81 59.6616 284.481 59.75 284.817 cv
59.8979 285.38 60.3486 285.728 60.3486 285.728 cv
60.3486 285.728 59.8896 286.142 59.5874 286.866 cv
59.3364 287.47 59.123 288.214 58.9883 288.732 cv
75.2031 288.732 li
75.4399 287.142 li
75.4399 287.142 76.6235 283.882 76.5278 281.891 cv
76.3823 278.84 74.9355 276.592 74.9355 276.592 cv
74.9355 276.592 73.0498 273.435 70.8774 269.006 cv
69.3052 265.8 67.7266 261.808 65.9131 258.441 cv
62.3882 251.896 59.0864 247.165 59.0864 247.165 cv
59.0864 247.165 60.5396 245.521 59.3398 244.096 cv
58.4795 243.071 56.0073 243.632 56.0073 243.632 cv
53.0293 240.25 li
53.0293 240.25 53.0273 239.42 52.9663 238.746 cv
52.8799 237.801 52.7266 236.918 52.7266 236.918 cv
67.0107 228.641 li
67.0107 228.641 68.5771 229.641 70.23 229.508 cv
72.771 229.304 75.7939 227.934 75.7939 227.934 cv
75.7939 227.934 76.9746 227.651 77.8667 227.285 cv
78.688 226.946 79.207 226.837 79.207 226.837 cv
79.207 226.837 79.7197 226.944 80.1743 226.324 cv
80.4497 225.948 80.6284 225.003 80.855 224.456 cv
81.1436 223.76 81.4473 223.492 81.4473 223.492 cv
81.4473 223.492 82.3687 222.095 82.6519 221.199 cv
82.9722 220.184 82.6582 219.656 82.6582 219.656 cv
89.8257 215.719 li
89.8257 215.719 90.4331 214.878 91.1675 215.021 cv
91.7837 215.141 92.1362 215.869 92.6479 216.23 cv
93.0693 216.526 93.7124 216.476 93.7124 216.476 cv
93.7124 216.476 94.8896 215.915 95.793 215.022 cv
96.8896 213.939 97.751 212.488 97.751 212.488 cv
97.751 212.488 98.2808 211.896 98.9634 211.91 cv
99.5615 211.922 100.459 212.599 100.459 212.599 cv
103.909 213.776 103.866 210.579 103.572 208.729 cv
cp
ef
258.738 26.5801 mo
258.291 26.1406 257.955 25.4512 257.955 25.4512 cv
257.955 25.4512 257.621 24.1885 257.48 22.7803 cv
257.293 20.9043 257.287 18.7466 257.287 18.7466 cv
257.287 18.7466 257.545 18.8511 257.697 19.0044 cv
257.83 19.1377 257.863 19.3232 257.863 19.3232 cv
257.863 19.3232 258.332 20.5405 258.645 21.9575 cv
259.137 24.1982 259.563 27.0288 259.563 27.0288 cv
259.563 27.0288 259.08 26.915 258.738 26.5801 cv
cp
251.174 55.0073 mo
250.623 55.6455 250.082 56.3623 250.041 56.498 cv
250.039 56.5142 250.039 56.522 250.037 56.5161 cv
250.037 56.5127 250.037 56.5059 250.041 56.498 cv
250.045 56.3662 250.016 55.5493 249.873 54.7231 cv
249.656 53.4902 249.279 52.1475 249.279 52.1475 cv
249.279 52.1475 249.18 50.4146 249.205 49.2041 cv
249.24 47.6147 249.4 46.4443 249.4 46.4443 cv
249.4 46.4443 249.574 47.208 249.822 47.6904 cv
250.199 48.4268 250.705 48.9927 250.705 48.9927 cv
250.705 48.9927 251.041 49.8306 251.098 50.4546 cv
251.156 51.0737 250.918 51.2983 250.918 51.2983 cv
250.918 51.2983 250.207 51.8721 250.387 52.3057 cv
250.729 53.1226 252.07 54.0591 252.07 54.0591 cv
252.07 54.0591 251.59 54.5254 251.174 55.0073 cv
cp
287.473 136.97 mo
287.473 136.97 287.223 135.784 286.582 135.447 cv
285.578 134.918 284.014 135.149 284.014 135.149 cv
284.014 135.149 283.141 134.32 281.961 133.529 cv
280.463 132.525 278.584 131.509 278.584 131.509 cv
278.584 131.509 278.363 131.381 278.246 131.056 cv
278.082 130.6 278.008 129.901 278.008 129.901 cv
278.008 129.901 278.23 128.914 278.109 128.119 cv
277.973 127.208 277.492 126.473 277.492 126.473 cv
277.492 126.473 277.701 125.082 277.801 123.343 cv
277.938 120.99 277.977 118.1 277.977 118.1 cv
277.977 118.1 278.389 114.255 278.555 110.422 cv
278.721 106.611 278.645 102.81 278.645 102.81 cv
278.645 102.81 278.76 101.828 278.67 101.254 cv
278.428 99.6807 278.068 99.0791 278.068 99.0791 cv
278.068 99.0791 278.244 98.5713 278.236 98.2314 cv
278.229 97.8599 278.037 97.6528 278.037 97.6528 cv
278.037 97.6528 277.992 95.5176 278.082 93.314 cv
278.213 90.123 278.494 86.4888 278.494 86.4888 cv
278.494 86.4888 278.715 82.9165 278.912 79.8164 cv
279.123 76.4932 279.313 73.626 279.313 73.626 cv
279.313 73.626 279.813 70.3301 279.535 68.1641 cv
279.105 64.7949 277.826 62.0073 277.826 62.0073 cv
277.826 62.0073 277.018 60.1631 276.371 58.6216 cv
275.602 56.7905 274.975 55.2119 274.975 55.2119 cv
274.975 55.2119 274.33 54.1079 273.813 53.0015 cv
273.033 51.3413 272.273 49.4478 272.273 49.4478 cv
272.273 49.4478 271.215 47.9375 270.609 46.4609 cv
269.852 44.6123 269.514 42.7129 269.514 42.7129 cv
269.514 42.7129 269.361 41.4463 269.18 40.1299 cv
268.898 38.0752 268.604 36.0693 268.604 36.0693 cv
268.604 36.0693 269.695 34.6748 269.695 33.2476 cv
269.695 30.2134 268.604 26.9375 268.604 26.9375 cv
268.604 26.9375 267.965 25.8853 266.984 25.4771 cv
265.654 24.9224 263.871 24.9658 263.871 24.9658 cv
263.871 24.9658 263.307 23.5952 262.74 22.3335 cv
262.098 20.9058 261.443 19.5654 261.443 19.5654 cv
261.443 19.5654 261.027 18.9551 260.836 18.2534 cv
260.605 17.4063 260.594 16.4414 260.594 16.4414 cv
260.594 16.4414 260.375 14.5796 260.221 13.3745 cv
259.994 11.5986 259.807 10.2524 259.807 10.2524 cv
259.807 10.2524 259.975 9.55859 259.787 9.18457 cv
259.543 8.69482 258.926 8.49268 258.926 8.49268 cv
258.926 8.49268 259.342 7.41357 259.637 6.36816 cv
260.641 2.7876 260.91 1.48486 260.467 1.18945 cv
259.826 .76123 259.412 1.69727 259.412 1.69727 cv
259.412 1.69727 258.596 3.42041 257.875 4.96436 cv
256.928 6.99365 256.014 8.97803 256.014 8.97803 cv
256.014 8.97803 255.541 8.73389 254.752 8.57764 cv
253.936 8.41553 252.797 8.34131 252.797 8.34131 cv
252.797 8.34131 250.883 8.53467 250.125 8.94727 cv
248.688 9.72852 247.943 10.9805 247.943 10.9805 cv
247.943 10.9805 247.279 11.9888 246.768 13.1543 cv
246.191 14.4678 245.76 15.9556 245.76 15.9556 cv
245.76 15.9556 245.35 16.8369 245.123 17.687 cv
244.895 18.5356 244.85 19.3535 244.85 19.3535 cv
244.85 19.3535 244.916 19.1104 245.066 18.9644 cv
245.293 18.7461 245.639 18.5952 245.639 18.5952 cv
245.639 18.5952 245.389 19.0723 245.195 19.6509 cv
245.045 20.103 244.939 20.6885 244.939 20.6885 cv
244.939 20.6885 245.145 20.4165 245.299 20.2559 cv
245.477 20.0693 245.607 19.9902 245.607 19.9902 cv
245.607 19.9902 245.354 20.6997 245.283 21.3564 cv
245.217 21.9727 245.334 22.5391 245.334 22.5391 cv
245.334 22.5391 245.42 22.1484 245.527 21.9521 cv
245.59 21.8389 245.699 21.8716 245.699 21.8716 cv
245.699 21.8716 245.535 22.7559 245.588 23.5693 cv
245.654 24.584 245.941 25.5728 245.941 25.5728 cv
245.941 25.5728 245.877 25.0708 245.904 24.7251 cv
245.936 24.3174 246.063 24.0557 246.063 24.0557 cv
246.063 24.0557 246.25 24.752 246.221 25.5083 cv
246.178 26.6226 245.912 27.939 245.912 27.939 cv
245.912 27.939 245.498 28.2925 245.311 28.6865 cv
244.924 29.4956 244.607 30.6689 244.607 30.6689 cv
244.607 30.6689 244.918 30.1396 245.162 29.9209 cv
245.471 29.646 245.729 29.668 245.729 29.668 cv
245.729 29.668 245.752 30.0591 245.709 30.3013 cv
245.648 30.6357 245.518 30.8511 245.518 30.8511 cv
245.518 30.8511 244.02 31.9531 243.008 32.8667 cv
242.355 33.4585 242.027 34.0063 242.027 34.0063 cv
242.027 34.0063 241.654 34.998 241.574 35.7324 cv
241.475 36.6592 241.664 37.3735 241.664 37.3735 cv
241.664 37.3735 241.719 38.4795 241.799 39.438 cv
241.838 39.9219 241.908 41.8965 242.293 43.7222 cv
242.76 45.9443 243.576 48.6587 243.576 48.6587 cv
243.576 48.6587 243.969 49.5654 244.207 50.6626 cv
244.52 52.0981 244.697 53.8159 244.697 53.8159 cv
244.697 53.8159 244.508 54.7222 244.529 55.6074 cv
244.553 56.5117 244.789 57.396 244.789 57.396 cv
244.789 57.396 244.127 57.7021 243.893 58.0527 cv
243.578 58.5195 243.666 59.0645 243.666 59.0645 cv
243.666 59.0645 242.912 59.1753 242.686 59.5884 cv
242.283 60.3218 242.301 61.5522 242.301 61.5522 cv
242.301 61.5522 238.988 62.3501 236.496 63.4404 cv
232.867 65.0298 229.621 67.104 229.621 67.104 cv
229.621 67.104 228.342 67.9175 227.865 68.9258 cv
227.264 70.1934 227.436 71.7148 227.436 71.7148 cv
227.436 71.7148 227.012 72.7339 226.719 74.002 cv
226.271 75.9399 225.889 78.4194 225.889 78.4194 cv
225.889 78.4194 225.432 81.6016 225.311 84.792 cv
225.189 87.9414 225.404 91.1001 225.404 91.1001 cv
225.404 91.1001 224.986 92.0537 224.809 93.2725 cv
224.621 94.54 224.676 96.0757 224.676 96.0757 cv
224.676 96.0757 224.164 97.1606 223.969 98.5225 cv
223.729 100.193 223.795 102.204 223.795 102.204 cv
223.795 102.204 223.525 102.796 223.6 103.388 cv
223.664 103.899 224.078 104.379 224.043 104.845 cv
223.99 105.508 223.523 105.692 223.523 105.692 cv
223.523 105.692 222.578 106.886 222.359 107.722 cv
222.139 108.57 222.643 109.06 222.643 109.06 cv
222.643 109.06 221.17 110.692 219.496 111.875 cv
217.715 113.132 215.727 113.944 215.727 113.944 cv
215.727 113.944 214.006 114.132 212.705 114.486 cv
211.508 114.813 210.721 115.309 210.721 115.309 cv
210.721 115.309 209.752 116.055 209.609 116.737 cv
209.479 117.357 210.174 117.918 210.174 117.918 cv
210.174 117.918 211.553 119.296 213.736 119.654 cv
218.588 120.447 222.553 119.283 222.553 119.283 cv
222.553 119.283 225.539 119.472 227.893 119.396 cv
229.762 119.337 231.107 119.01 231.107 119.01 cv
231.107 119.01 231.689 118.321 231.736 117.313 cv
231.836 115.246 231.441 112.033 231.441 112.033 cv
231.441 112.033 231.434 111.439 231.619 110.939 cv
231.828 110.38 232.229 109.909 232.229 109.909 cv
232.229 109.909 232.697 109.232 232.781 108.567 cv
232.891 107.697 232.623 106.784 232.623 106.784 cv
232.623 106.784 232.488 106.013 232.654 105.521 cv
232.908 104.766 233.504 104.175 233.504 104.175 cv
233.504 104.175 233.736 103.574 233.725 103.115 cv
233.707 102.458 233.443 101.87 233.443 101.87 cv
233.443 101.87 233.539 100.693 233.803 99.7754 cv
234.217 98.3403 234.869 96.9248 234.869 96.9248 cv
234.869 96.9248 235.342 95.5156 235.656 93.3101 cv
236.127 89.9868 236.506 85.397 236.506 85.397 cv
236.506 85.397 236.768 84.1226 236.943 82.7021 cv
237.262 80.146 237.539 77.0845 237.539 77.0845 cv
237.539 77.0845 239.967 76.3745 242.492 75.9253 cv
245.684 75.3574 250.316 75.3945 252.215 75.1313 cv
254.352 74.8354 256.41 74.127 258.537 73.7173 cv
260.926 73.2573 263.264 73.1104 263.264 73.1104 cv
263.264 73.1104 263.951 73.2705 264.326 74.1416 cv
265.008 75.7188 265.57 78.4497 265.57 78.4497 cv
265.57 78.4497 266.053 80.0825 266.389 81.8169 cv
266.949 84.6948 267.48 88.2788 267.48 88.2788 cv
267.48 88.2788 267.139 89.3291 267.203 90.5547 cv
267.301 92.3989 267.814 94.6797 267.814 94.6797 cv
267.814 94.6797 267.57 95.6431 267.727 96.1147 cv
267.902 96.6411 268.482 96.6821 268.482 96.6821 cv
268.572 99.0791 li
268.572 99.0791 268.389 99.8262 268.459 100.287 cv
268.563 100.977 268.938 101.476 268.938 101.476 cv
268.938 101.476 268.672 101.817 268.68 102.173 cv
268.688 102.499 268.967 102.84 268.967 102.84 cv
268.967 102.84 268.762 106.039 268.77 109.272 cv
268.777 112.929 268.998 116.674 268.998 116.674 cv
268.998 116.674 268.707 117.438 268.551 118.435 cv
268.35 119.721 268.27 121.316 268.27 121.316 cv
268.27 121.316 268.207 122.297 268.389 123.129 cv
268.68 124.454 269.271 125.866 269.271 125.866 cv
269.271 125.866 268.807 125.981 268.65 126.333 cv
268.426 126.845 268.482 127.656 268.482 127.656 cv
268.482 127.656 268.465 128.229 268.789 128.913 cv
269.342 130.08 270.363 131.63 270.363 131.63 cv
270.363 131.63 270.383 132.052 270.441 132.447 cv
270.527 133.031 270.666 133.663 270.666 133.663 cv
270.666 133.663 270.424 134.92 270.424 136.181 cv
270.424 137.512 270.666 138.851 270.666 138.851 cv
270.666 138.851 270.541 140.239 271.117 140.364 cv
272.76 140.718 276.43 140.094 276.43 140.094 cv
276.43 140.094 277.404 141.073 278.547 141.283 cv
279.908 141.531 281.471 141.019 281.406 141.035 cv
281.346 141.049 284.775 140.589 286.275 139.588 cv
287.836 138.549 287.473 136.97 287.473 136.97 cv
cp
ef
150.113 200.557 mo
150.113 200.557 150.102 202.435 150.502 203.627 cv
151.074 205.333 152.123 206.543 152.123 206.543 cv
152.123 206.543 151.658 205.961 151.574 205.447 cv
151.473 204.813 151.748 204.222 151.748 204.222 cv
151.748 204.222 152.092 204.718 152.75 205.434 cv
153.811 206.588 155.387 208.176 155.387 208.176 cv
155.387 208.176 154.887 207.461 154.771 206.701 cv
154.604 205.621 154.801 204.381 154.801 204.381 cv
154.801 204.381 155.34 205.128 155.967 205.704 cv
156.865 206.53 157.951 207.277 157.951 207.277 cv
157.951 207.277 157.074 206.213 156.639 205.138 cv
156.172 203.983 156.145 202.813 156.145 202.813 cv
156.145 202.813 156.695 202.876 157.023 203.373 cv
157.701 204.4 158.428 206.28 158.428 206.28 cv
158.428 206.28 158.412 205.082 157.934 204.108 cv
157.545 203.315 156.998 202.521 156.564 201.941 cv
156.551 201.933 156.537 201.923 156.523 201.912 cv
156.113 201.612 155.875 201.074 155.875 201.074 cv
155.875 201.074 156.174 201.42 156.564 201.941 cv
157.197 202.39 158.066 202.678 158.066 202.678 cv
158.066 202.678 156.91 201.672 156.752 201.262 cv
156.27 200.009 156.014 197.91 155.947 197.302 cv
155.936 197.196 155.93 197.132 155.93 197.132 cv
155.93 197.132 155.936 197.193 155.947 197.302 cv
155.982 197.609 156.072 198.268 156.242 198.74 cv
156.707 200.036 157.496 201.504 157.496 201.504 cv
157.496 201.504 156.975 199.958 156.795 198.714 cv
156.514 196.775 156.527 194.821 156.527 194.821 cv
156.527 194.821 157.104 197.852 157.848 200.448 cv
158.84 203.904 160.072 207.176 160.072 207.176 cv
160.072 207.176 160.033 208.218 159.832 208.707 cv
159.639 209.177 159.285 209.095 159.285 209.095 cv
158.096 208.842 li
158.096 208.842 156.176 208.646 154.404 208.524 cv
152.65 208.405 151.045 208.361 151.045 208.361 cv
151.045 208.361 150.485 208.135 150.247 207.14 cv
149.893 205.664 149.813 203.226 149.813 203.226 cv
150.113 200.557 li
cp
112.393 270.931 mo
112.393 270.931 114.982 270.222 117.056 268.917 cv
120.035 267.044 122.832 264.364 122.832 264.364 cv
122.832 264.364 124.317 263.147 124.834 261.251 cv
125.837 257.58 125.151 251.989 125.149 250.855 cv
125.143 247.701 125.413 243.891 125.413 243.891 cv
125.413 243.891 125.738 246.4 126.431 248.588 cv
126.907 250.089 127.835 251.53 127.835 251.53 cv
127.835 251.53 128.633 252.929 128.885 254.365 cv
129.153 255.9 128.877 257.48 128.877 257.48 cv
128.877 257.48 128.858 259.174 128.671 260.652 cv
128.458 262.338 128.074 263.83 128.115 263.723 cv
128.153 263.625 127.221 265.49 127.024 267.294 cv
126.817 269.19 127.344 271.033 127.344 271.033 cv
127.344 271.033 127.28 271.678 126.991 272.236 cv
126.596 273.001 125.942 273.745 125.942 273.745 cv
125.942 273.745 125.051 274.593 124.673 275.75 cv
124.077 277.575 123.891 280.026 123.891 280.026 cv
123.891 280.026 122.976 281.521 122.646 283.321 cv
122.609 283.523 122.512 283.962 122.379 284.549 cv
185.205 284.549 li
183.758 282.329 li
183.758 282.329 183.984 280.703 183.545 279.399 cv
183.057 277.954 181.879 276.771 181.488 275.726 cv
180.066 271.917 178.438 268.082 178.438 268.082 cv
178.438 268.082 178.014 266.633 177.463 265.487 cv
176.484 263.455 175.119 261.188 175.119 261.188 cv
175.119 261.188 174.363 258.841 173.484 257.041 cv
172.617 255.272 171.627 254.052 171.627 254.052 cv
171.627 254.052 170.619 253.268 169.762 251.815 cv
168.893 250.344 168.172 248.205 168.172 248.205 cv
168.172 248.205 168.15 245.813 167.664 243.732 cv
167.082 241.24 166.018 238.986 166.018 238.986 cv
166.018 238.986 165.762 236.021 165.477 233.377 cv
165.082 229.72 164.623 226.048 164.623 226.048 cv
164.623 226.048 164.373 224.858 164.379 224.085 cv
164.387 223.058 164.65 222.374 164.65 222.374 cv
164.65 222.374 166.08 221.899 167.207 221.315 cv
168.377 220.708 169.246 219.99 169.246 219.99 cv
169.246 219.99 170.066 219.299 170.389 218.605 cv
171.322 216.602 171.869 214.363 171.869 214.363 cv
171.869 214.363 172.947 212.115 172.838 210.369 cv
172.664 207.589 171.27 204.81 171.27 204.81 cv
171.27 204.81 170.332 201.435 168.238 197.817 cv
166.768 195.277 164.77 192.8 163.271 190.634 cv
161.654 188.294 160.592 186.359 160.592 186.359 cv
160.592 186.359 159.936 185.63 159.473 184.653 cv
158.773 183.178 158.166 181.243 158.166 181.243 cv
158.166 181.243 158.473 181.151 158.771 180.988 cv
159.035 180.843 159.299 180.624 159.299 180.624 cv
159.299 180.624 159.723 180.243 159.813 179.853 cv
159.977 179.126 159.805 178.4 159.805 178.4 cv
159.805 178.4 160.025 177.86 160.127 177.257 cv
160.27 176.417 160.25 175.781 160.25 175.781 cv
160.25 175.781 160.758 174.925 160.457 174.466 cv
159.824 173.497 157.951 172.696 157.951 172.696 cv
157.951 172.696 159.635 170.527 161.271 168.02 cv
163.961 163.899 167.305 158.42 167.305 158.42 cv
167.305 158.42 168.783 155.691 167.629 154.713 cv
166.861 154.062 165.209 155.155 165.209 155.155 cv
165.209 155.155 162.98 156.864 160.988 159.214 cv
157.172 163.72 152.316 170.37 152.316 170.37 cv
152.316 170.37 151.87 170.11 151.327 170.297 cv
150.975 170.417 150.656 170.744 150.351 170.949 cv
150.027 171.166 149.729 171.256 149.729 171.256 cv
149.729 171.256 149.352 171.32 149.115 171.541 cv
148.869 171.772 148.762 172.161 148.762 172.161 cv
148.762 172.161 148.443 172.436 148.162 172.521 cv
147.769 172.642 147.373 172.584 147.373 172.584 cv
147.373 172.584 144.568 170.619 142.191 170.159 cv
139.24 169.587 136.592 170.495 136.592 170.495 cv
136.592 170.495 134.221 171.218 132.185 172.651 cv
129.893 174.267 127.905 176.615 127.905 176.615 cv
127.905 176.615 127.246 177.408 126.551 177.901 cv
126.038 178.266 125.072 178.843 125.072 178.843 cv
125.072 178.843 125.707 178.843 125.413 179.35 cv
125.05 179.976 124.239 180.203 123.586 181.141 cv
121.938 183.508 121.021 185.923 121.021 185.923 cv
121.021 185.923 121.655 184.922 121.58 186.449 cv
121.483 188.409 122.053 190.418 122.053 190.418 cv
122.053 190.418 121.635 190.947 121.162 191.027 cv
120.39 191.158 119.411 190.866 119.411 190.866 cv
119.411 190.866 119.99 191.237 120.619 191.314 cv
121.345 191.403 122.134 191.201 122.134 191.201 cv
122.134 191.201 122.109 191.852 121.899 192.557 cv
121.626 193.475 121.237 194.213 121.237 194.213 cv
121.237 194.213 120.795 195.583 120.782 196.637 cv
120.76 198.387 121.163 200.188 121.163 200.188 cv
121.163 200.188 121.039 199.199 121.104 198.334 cv
121.176 197.388 121.438 196.557 121.438 196.557 cv
121.438 196.557 122.242 198.834 122.068 200.307 cv
121.903 201.704 120.761 202.301 120.761 202.301 cv
120.761 202.301 120.15 202.625 119.554 202.609 cv
118.958 202.594 118.377 202.238 118.377 202.238 cv
118.377 202.238 118.744 202.726 119.199 202.891 cv
119.725 203.083 120.35 202.958 120.35 202.958 cv
120.35 202.958 119.416 204.349 118.227 204.816 cv
116.119 205.644 113.202 205.764 113.202 205.764 cv
113.202 205.764 115.498 206.027 117.688 205.647 cv
119.792 205.282 121.794 204.273 121.794 204.273 cv
121.794 204.273 120.893 206.373 119.56 207.884 cv
117.909 209.756 115.756 211.116 115.756 211.116 cv
115.756 211.116 115.148 210.972 114.568 211.742 cv
113.358 213.348 111.67 216.537 111.67 216.537 cv
111.67 216.537 111.286 217.539 111.273 218.256 cv
111.25 219.58 111.594 221.015 111.594 221.015 cv
111.594 221.015 110.853 223.674 110.866 225.906 cv
110.893 230.559 111.67 234.157 111.67 234.157 cv
111.67 234.157 111.903 237.129 112.314 239.764 cv
112.929 243.718 113.512 245.974 113.512 245.974 cv
113.512 245.974 113.98 247.582 113.946 249.116 cv
113.892 251.471 113.326 254.11 113.326 254.11 cv
113.326 254.11 112.483 254.611 111.91 255.538 cv
110.941 257.105 110.024 259.451 110.024 259.451 cv
110.024 259.451 109.479 260.215 108.824 260.161 cv
107.537 260.058 105.679 259.099 105.679 259.099 cv
105.679 259.099 103.95 258.39 102.729 258.728 cv
101.418 259.092 101.092 260.671 101.092 260.671 cv
101.092 260.671 99.9702 260.804 99.2505 260.815 cv
98.1162 260.834 96.7051 260.566 96.7051 260.566 cv
96.7051 260.566 95.6753 260.161 94.8477 260.505 cv
93.2676 261.161 91.3677 262.781 91.3677 262.781 cv
91.3677 262.781 90.1792 263.855 90.2524 265.256 cv
90.3076 266.308 91.6294 267.787 91.6294 267.787 cv
91.6294 267.787 90.3164 269.261 90.4604 270.475 cv
90.6064 271.704 92.21 272.676 92.21 272.676 cv
92.21 272.676 91.9946 273.762 92.4424 274.623 cv
93.0244 275.745 94.3042 276.709 94.3042 276.709 cv
94.3042 276.709 93.5684 278.297 93.979 279.211 cv
94.4756 280.316 96.1353 280.784 96.1353 280.784 cv
96.1353 280.784 98.0317 281.016 99.1558 280.864 cv
100.037 280.745 100.206 280.235 100.206 280.235 cv
100.206 280.235 100.671 279.245 100.299 278.783 cv
99.7778 278.137 98.3691 277.956 98.3691 277.956 cv
98.3691 277.956 100.024 276.996 101.691 276.446 cv
103.443 275.867 105.377 275.47 105.377 275.47 cv
105.377 275.47 108.759 274.856 110.077 274.004 cv
112.107 272.689 112.393 270.931 112.393 270.931 cv
cp
ef
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
% page clip
grestore
grestore % PSGState
Adobe_AGM_Core/AGMCORE_save get restore
%%PageTrailer
[/EMC AI11_PDFMark5
[/NamespacePop AI11_PDFMark5
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/page_trailer get exec
Adobe_CoolType_Core/page_trailer get exec
Adobe_AGM_Core/page_trailer get exec
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/doc_trailer get exec
Adobe_CoolType_Core/doc_trailer get exec
Adobe_AGM_Core/doc_trailer get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 12.0
%%AI8_CreatorVersion: 12.0.0
%%For: (Chris) (Home)
%%Title: (Live Music Vector.eps)
%%CreationDate: 9/18/2007 6:25 PM
%AI9_DataStream
%Gb",KB7&XLf'*'[SnJ$)l(-H@"6n>-KI!A&0jkV,^r4%T4o<.ogTMl,[Ns%M1,D[[;_fK=>#hW&0JeniH`_%roo`2P>mlKU+r$#i
%U8^-I-h?YS1GaCNF/?e='94AJ''L/?a+[J*1l1+HOFV91e4QpD[(8\#XXK`8<c+d=B.]?^aH^u=4M;hd0%:h46.MEE2j=^YW)8L9
%B6s5?oq^1j.iNr$8tu%C1E,2W,JPXB+nXH$heuL5]rFs5j!rUX-@"B5:D2";bD"C3!gE^r&Rq"g^-0^63aK.M`W3-\J*6:HQ'Zfp
%X3'2/g3R!X7P?48G!k[ILu_*3#ff;A+r3qM,a%n[?N;pVc7<?\(/C`).I]of!;=>tOsG`M5nHC<.2n4LmoZYhIajX4ej=_@>ZEV5
%951MT;?%/'*>J_PJ"uhPf2/it<kSl3P>GIUkL$P<<>kj?lh*S3L("X?Imr\,dA%t&01m&%=)IRPnS=ho#mJE/8H,T%#6,g-e$d[S
%WE0@&5\)u.8Vp7p-AFr<,)&G+P)(B;P)3iXI##LH+]60c70HdNL509TOY@3>3CP(!;m$$sDlp,e67[&tOQWcIY?KpZ6paKD%iRL!
%,lXFQs#3aY%-Vl"(8_*\=n^Jd8J&bZ(D(Q"<R%O<-jch=1Duhs/YKfeou2/jI6l2p&A>M<$#4]K;8EY5(**,(s%`3!ald-.#9N;J
%C9P>.Wi=nT2kR7QAL1<?]<>U/.'75s+_7tE?UOZ?T_58_"#ktrH@*J<aH@lO!:\?Lq+[i1_>?]Sp$&2Pmj`d@.RK_@Xj`SrVUk(G
%L.\K"0Ms\g(lq@LJ\p[?"9s\8R0N^S%.<%V\^@@jBQF!X?K$miH#<\(Gh3JYM[JH)%jLtn"D3-.(iUUmC\8IIVBMc1(?a1Z)nNB&
%`N.dKc*1i3kii?PS5KIWMi]N*c*r-M%CN<?m:M7b!+*iPgD=p[2Toj1hJ$.U+^3+9IYIpt:F"4P?bsK7pogl(g5oOE(.&O*Cli3X
%b.u^cedAff_oA="jWlG<b)3+AN9\`JahJU[^ML==VG]:rJI'9X1]hTGS3d:'^ZQ[9K0>e;](r=T56.>55jLYM0cc&;+,*Pa)f38L
%LX4ob:&P/2kQlW(".C<qqPPV<d"6`_&M,Z$dm9LuIt7D4`"_]l+=;uC+qa<1P_;F[#!N<T6nBsF?mtXU6ER&V!sKdCQp.Z$OWQlE
%,HEKo=OU\%OAQRH6rP;JZUoQMmTGJM:RhFbMU>6E)32a&kRte*.^4+b#Y1)oM]6MB+rlN=b]iU/Lu-h[.OFb3n@MR<21q$N:\r-:
%>b_b'KjQ1RY*^Id?D9AQ'UsY?Ys6OF-jN]X&Lp:-P)>)m3Ds<QMC"p9kj!ba"6]_c%e('G6nCoY`#>?D[4-kFTp<OnDNGE*;'a(+
%MM-5-id<:GE?9Te\79p*berlf]EKODSB#T.2N/E#R6[6A%L^6fTMY!9Z[OH\OGlTf;5bI3p`J-4!]>i#b+[RGVXZBQ=<rIm`3CYb
%C5=Sb@=VLEqOTGhQ>"Ve6"hY9#G%%o'B#,)q1i=qgsd^IrlniYnX^n[,lXJ21]SG2-9fGM"MUs4R(,!UJm2TpF>FW1,d7M-[D<q1
%p`F#p`42%rFC!6f6IY^c2$!CZiZlKkOP180BPfH<)\g5b'Ep4B+sAF54HDr\VW4iaF7<7`GPGHr[:!O.nJEm-.aa2&ct8Q[6EqCV
%'`6qWn:i,9R*(PubQDN&5%9LB$=)\CQA\]Po=I9iZ?[2l^a,'gO;8M:@;BYkCDgKmF.D5PIb-@9,j-mer%pudSj8cF%L^6fTMY!9
%ZbqP8\rFMqB/F(D%,rMPT((acQpA]a8?[ju$0o2F,oN>RpsWn4_DhBFr[La\*M/;d?":<pOc<.9E+cOd[.)6Ag77re5c5JJ'`6qW
%n<QGN&NKd.)A,W*+$'%J(OooU0Y^-B.*4^o9EUF\dY(f?*IcVG`aj%DR:k5ke$>1-a)I"rN#(Y'*0e?-Yo+r(qr@&40o'WkE;U%A
%B1/<A-]U(C`Li80*If98-=S=#odFE-5*5<4dA4g&k)4Ja&M]k;LQ-O1@DmE1#:d_Lg.Zks3l]&>;t6c:82DBuou5+:`1L-J^dkI,
%TS`Hb0d"(''5N6r4[DS0#3%@g,([+g<cEiO[>ZaVgmP$BUA,3f-5hm'ihmF6GQM_Wr(1Wl?r63NZbn:`;D=@\Bpf4a08PZk,E`+0
%3H.rNQ,ENkTVEb7E=aFY,`q+-/%ELc>*U6d\23G?8W*+IA<QO$/q07b3DZ<mM*FSn#RlUhEHWW#:Jin-:Vh,iegHJ8iC0A13qu)I
%NsLl@6.A7IitE/T)K"-:MH",QU]NVkUm"ha#;!A1+OM$uW4:,d1ZLCl>mk4=i+\k4$k.I\EHEHp:TP/dUL6+llP%<ln3YDG*H>Qd
%EEm$^%H8QEJ$P_WKld#pZSY'>EsCCC2g)"7E=%r#;"Z_&=OZ08;!(08UdbIg^&C"F)TZQ!S(Ap<+/98M2l>Pld?Ri*4'j'AWCgui
%.`B?j[0:kjJR2KPC<*j*(cPPl<fUsS$$=M!@)7U@egq'F.;s+@Q"XXOmr@'Nj*J4#;2YM_UWj'#n@SHG?LEVI'UsqL*![W,RXN<p
%ehIH!bpl5RE`*`0rf.RH^W1%9AP`Q^m#lPdDmWpiEQYbZ<W"gFZh^fXMat*<_ZnT]PXVpH]Vh^`holDsGDS5q\1hGG>t(t8-4<1Q
%C_.aQLKTU3crKQ<<R3G\`Y=FoaEeW&g[=JMAt9(LAkneh;HgDi(85G#^Sba4@o*?\CEdrNNU*MlMIucdU5U=Ga3<Pf?8e79G^<15
%a_8R=`sgI-FE28JO4#As8BI&pDB?,r\nR>O([5BB<DL>TB@JV,A20dmkm;D2JljfrLf,SAKIbHgRbsmI8\ubdJYJGM`A1$[?2R]q
%9Tkf:8JK8^g&n9'$uH<>c+l81R3^42Ou/ZcUU3TJW.IHHa_m9#2Jc6cPY!V<4)p-idi=jsRO;b*-HVYQPY&_L9S(J(bjR:?,iN"E
%XC_gl,a#V=3JqC2bQ:4b/rV'S'ZUVpc!Fq<e$hmmBf:U1"D*`e"%q!XIS\<;ae0!,n-$?p_Pq[8U=h<+Ue/Fbc%+%qef:-,LJpZM
%8(fMic*U2kY_Tt?C!1("*Ve``@CaH]04n?OdrLj0;V;BpRc:euFHTU2g34r6&o&1OoJY/N).4bJ;#JiPVP=j!E9N\FC)Lm@%>^8!
%8lA+dVcOL"Y(cFS@2);:RHs0UVG5J>j0)&.@UYeOQXeZWOn=gA[Ul`5]4MaN)D%C@,Un$kPV%2IVN_%Wn,7i"D=oJdhgB8FMt/cY
%72J;\E$U`9J!6R:,b0tS[Uf/O!cBG.CjR!ZB%(KKL,B<?1b?48J+\U<bM#RCdj,#I^!<2PFptScraW_q+FT4M;[uuI&#</a),"r*
%0LeA^-?qo2TA[!@:Q3,/#Q%p&-b..p"PE'C6ARulO$_BP2B+P"iJqeATDQ4:K6`O[8u2K^>;H<IVoRj2gpOU&r&4&R\)?e:m-q)S
%"8-i$BYd[UK*fb'=85I`*06p!kenZii_0-d(Q]nO;8_C%/MODH)?qQ!cY/DR6aIGkBVn2WiFFd1Ut_'Ze53@>(h6(.6R.MZ`BUqT
%PJ]/W,g9>6J2@X&&-KlpkJS2uT`Q5b$k8:19h@\"#RF>e-pWhk.cBH?=.qVf#KABY9[IYGn4T9P&2)KQA2tp';jVls_9ZR7D-!)H
%@iC;"-BSOA^QM"DEHuEHqMH;79\3#_S,h?2;RXguJ='GjAi>]b%OE)7Gc2r%5l4K")LWMT=YljIS)DJKi)bs&&NF$P7)`g@1..#<
%5TG0-A,@SQIRR/!=Yo1]Bi"44,ps_%b4-0WU#;.Ob^Ka@.E"3EgZd`9;]7ZJF^[!2Kaq[SNE$t-5hc_L>KTED>,^[\&VCN/71H\1
%'^Boo\ktt[jopNQ4Ph"FP#V"r,L;<XXN>ZhRRsqV,aaTWdr#A6:_fX$M#*We-Z'EkT\'OtE\sj/76$XM>dX"d,lTo9a#/a/E?a;Z
%;jRQ;)_#mugD&Wuh0+E@7Q+KRB!bD[i0V!6jP'd]?u04),u$mu\_P$)PAK=60c/;4&VaYiWF_0u33-6b.PMO[Y<4W(BMGFl(fitg
%[k's!.O$M1Z[n'XOn,=]PT`Fu&Z8>9<ZfJ+;$_,[iaC'>QPbH33K?)o%5=d+3.N:%%%0[*YuRKR`9)iL#\t(/W,!$j+q?,K,iNr=
%d^]RKCRRu9ak'\,8_-=MC!->rJXIi3;<.qhjdjGfVW4lt0SKMYE,nY^Af:9Q)30f/b_1^]W;/KrGmoM[6j"aH&L1)cc;bFu,Z7Bh
%DuYbc$6"AagZTF)GYVgdCG6c'7tu"dCVEONJT'&nloIQOI[qgO_3;9`30>S*&XD/32TT4[L3u@IC%H&,W5/^rYmnm1.#ZPT'XQ`=
%M&Hj6*)*oOQ2tbU&o0/>9!aZ@&W`8@/D1V\]^hCR)lAYT("]$t/MB#)'[7ITMUu*l?.=^WR6f9\/4PBRXP$-bOiqVp;XBbjhYKpI
%=[k5>qaM18[=ipsBhVIjFkhUY)OCpd`E[uEGcY^B%d[BnUC@^b%NCClGdr?9m'+71))cN"Re+dtRmZ\r'<WT_kbRY`0EL\X>c`Jk
%Df"LUKdn6fNi0:fE"O'pV+_8qG<aUS`C'ZQZR'ol_G$)S[S,3;<<qQKb?V&^'MqO;=uPLZLk5a90u]Mn$2d)F_0j1/$F!'X8/qi)
%8E^Y+=X9^hi.pCc,4d-fd`9TBH.f<((@502j42@ul"6?LGT=^B:d;2F.K+e#J`q^p]2P(W#1!cNUI)5;;deY:Uj,lb[q_+>;U!CW
%3E\7P"jSi3qKf#k:\-BC%S9BkJk'/:cV"n\q2n;oj]Rl-<H#BM#G*4r)"U!>TW/YN&sFp28\:r?GWH]c5mk@uC'L.M:p\)%Qf2O>
%Y5+3([>%o;i?g<k7dd.*,iPi/cP?O_2'Vh+`97E?qS]Mfn>[J`;M/a^_E6T5-YC"*%^SM57Xt[g%-*Jus#&J[Q^)(U6di1s7QaC>
%'<413Mog4K)_W[a$_KQqG$\Y(NEAoG5WTCGL#Er5L2J[pJPCt=h-np8F+FdNWKeh!CmCLA\n8b75rCV!jp(,;r:#M#I$tI%SS_:$
%9G6WZH@!W;r2A4!5,P@k]X/W_A;HLpM7<%./VM%J!!XR`J)^S9WW_+MIt794%CZ8]NngEKNR@8)o4U%:39#q@M6is:d4rKf3&uqW
%<<BP#k+)oGZ_0ODl'K(@ai5`*Fo`,G!k-.C%DR;/)j-#KSS,$Q[R0%_K,Z8\TSFO.gdm!.a!C3FaWru:MLuWdf8]j?0uZF.`SqTl
%aWnfh8!GB_-r2&RR/KQDi^lPt8L2TF8=V%>G0Bt4,&nkPnK\b18L2TDLu]hD"A^3JSjXiq6mS?lfJ38c8;\dW'MfoESj\`(M6LJ"
%+H[@.+t9*OP!"RH3>+nD8OO9&7SDZC/[!ddg+@JI!hf'/c81Ur`uss,i]JG'+2URgGt(]kfgBXeS7a*mq"/8GUHC%Eiu(7&A!CUQ
%UQ0LQcEi]IcQmNMj#fC`Leo@g:aDW/i]NpQGsYr[*5YH?H%n)oZ\dJW.*kfFKp(@#-,C7P`"S$H'+-h`+Jpp>1R/U!.WQKg4B"7n
%:f9ELUj,3tnq<1e$&'C`@kH_GCFSc^,I]DQ[?bu"@,%".=\Bc2g+r6QP!!NJ*5Yl+H.J.1CrU2%`[&l6o'knm>"UnmRG\rPDPP.V
%QBJ#N9_,827;nD<P:03Tm$NE-b9YD;;P<&4Tu;4C@E0A)>"UnmRG\rPDPP.VQ?JrIGX>!kKHfr>,4U?'N]Dp'9_,82"Zja=8s1P9
%G0D,2V8T^+$(bSd2G-)IBbuY@f90BS8Xh34rSe_LG#SjBBo:8aCiZMia(C[n<]n/0Dc@+9`.KFWiPi@si]MJPW#!#[%pk,$0?Jp7
%jM>=r-2#F9j!it&`Y;`p,#=rk"Zk\DG@M@?MH8\0:@!ee,l(+]%=/7c)_^>#gJBbc>9LN(nN-&qS2^abDYD>WLR8Fh9:]4]@j=?%
%a[)AbTQ3[0&dRZs'@M`"+YAQkXNa6']K4"tRiR^>&@MQu39"c!N)Jt$7tl5*hGlO-Z"#"WlmPZ9]ouQ9ooNCYU3(a,]\2QXV;0pQ
%*k0//XlrUH4ZqSu.RpuFm@=Z*CJhN;3>t(DmVK^lddSMPRsAl-,nrth'-ktFM5T=hM$LN^_lY[j)Ep:?Csl!k\9Dc7Xc@?6ED"-(
%a4o*4M6#Ul!A(^5?lPB+iPX^$-E35a)^mC[#d;W;nYO,:]I#MKP#I1W\VQ`k#e/>G4f!^piDF7:*D4Xl,UG).gru(R7+%^Nn>MgK
%8`=PU)\e_i0(Rd+co*L0?u\QkF75<Q^:ks)-XWBi'"*UYiiF]h*0!llE\*E9J7:W+;')M]#?8nR<.Y3%_#l"R5Y2ql#q&PMo#f-h
%BkD?FaCCq%#S!uSn>$fZ8;>_3jb_0+&Ko40=H"UHDI\nY1$@hFPUEdS:H[FP-r4M/A_SV7Cb_N7\;a@ggc,:R6's%0"@l"q2Mie@
%kB`rB'3p,:,As9p':a-;:#ZI3_35J?;;qo-V1Kt4"de/hLta=t"igY"V]o8P1$p2c9>T)Hf1;0)fJ,BEP(XV26Aom#7="CT;)sAo
%KU:W6PIU*-*^"UFT!bBH.Id/TB.0+Am'mhP+gs3RG[$UL$R%53r$^@J*JM+fPL*#o@nB8l2`:Aa,4)g6ZI'NE$l_`nF<c85Lc6Yq
%A<4ag6Q=%UXX(V7M7OW5rEprJeXB#Y8RD>r:G`udjTr#@a78Crnk^kY6AgOC`pjR\e4:EoA-67R.]35`&cr+DBe3hDcQXBB3oMf$
%((gZKipW6p=V?hL$!,(=MnICZQqnDA[M+9F9i'?gE^jRbX/mn`jq^mC2]'SQ(*-!^P&Yn?UmMQ<;\=pa0&^Uo'=gM59EB.&$6mF*
%0`_Eh=c*?W=!AUr/:n!C"T?]%-',C?IT.sA!D"I\>h/FkXpYb+W1H#L0$JPQTP9">oM]WAc?'Tp3`[[,S`1(4$!?2#>k66[[M+QI
%78!U8`%\aUM7FMC),S14h9Hmi&dWBnEf\$Y_\FbXE#HT;16FBb%Y(Cae(-#fNXCri6sr*]pi9rn(ME9->S@F/&oK7\iiU/][VL<j
%;^2igC(@7:+);L,`^ZT;RdGe.jh>QV@^ZpQ.#G**K'gGu99[gh6Of,EBI\XVPA%jS:P`F&8Q]alF-o]>1ID2&YI'TNIGu^F%&e^B
%Hsf#j\FO1W(J!/o@0"otC0Zs=`/#V3"j=tPc9tUQ(elU:bJ_\6R2OCKHt@Ym0\llQG-W:8Rn%n3()n8>f2RE2/UdaQ%/fX6.e5mV
%4qTS<+8e/X8,,.\qVXgV-?Ms+0-F\M(_I2u!'=g#$JUD+Q)2MBq%38#^\Q%36cD35Eo<$KLVb4'mU-5A?k0)&LJX'!UrP=g!!5/=
%q7q_%O.-6*3d)en%V\AVPAY8*:tgXCYmC#)#"(,h$ACCo_o,2L,>JZaoY<bOX#dSXCfiHg$m+bS'G=W^M#@ZXc2a(obXOtf3/Z+W
%E0s":0I%#ofD&JYgW9_.*0m,`^nSp3s$4s@:GpCSZfsMK`cNR9c=GF?C*mi:18j-r<5^W;']NpV'/s4m3,o2X_['N&AcUS@`KVZ]
%i:r&%SGF!Q@N/A]Z;FtZ+F]E3`gVj(YhX6VU;PnDL?a9k$q'9(nHRGG"*2n>\c[R+O7*/S1]r(E<kkSP`XKnH5fGGS31(kfUjJKV
%KY\pOFMW,EK06<8kRKKjGnXb^#R:3b8o+TC,T_Oe@@?-oE<VA30H=nun96A3_2W'R!Sa@Z6&;Y,!>,io*AdqVmDPaBdaUKk0j)Tf
%%2KdXZ8'BW9L"Pa0H;^+fM6Z&jJ*n/+X,T3O+Qj4!Y'^0BL@q1K7SV"Y+FYM:*TI.UptOlLqOitl)?ZqNdjn3KV96[MF*g#@>6:e
%p2Rtd[M+[P>UKX.abD63cJX6d:IY64/m-&k8-oYG#=979QUP^<4:"tOIVQfE1*F0R"h#)&/lrkl78<btC;S\:5ht6cPc.;^29.R2
%J1,m,XTQW`:meS[bQu587;bM'lXYZ;DY&JI_d^fP1iVZs[AZ%hNLHdAZ+AY!-V?"9:db(=1r;NQlsVqHk(Ssh%=%sadtJ4X*TmR[
%M*[CSKRr-]+^>_^E`=;q<aUhGan-'&QD1<hHf7gUbIFeegPIKJ3f9!cAAa`mO/Q4e2(_T8a39gVrYBh`g8dS"C+]!a0\g>pm:>3G
%[+fs\gIZVDGR/kT5X/dU2";[Cmnd7/Cc+PP?&jpap*Fs2Y,>elR7Ip`P!)'A3t_"BUS-771pRlC!uo0%ph5U/:ps1j$l_2h3nJhe
%SM3N$0oe+g9Gb!pjsVdh'8<AV_r);lbJF0MirX)pFO[Nh1Zo=XHk^^>0,#jV)4.a$CaX8fePTRf-O*e='T/+:NETBHJlHNm$iKsh
%^*n>%X\8<$Jj2Nf\4.W9XbdOn<FMh[8h;+VMQ8^X+enT%![h<b,3uVL^t7kd]/GXXc+`(E'k8sdbX=GV7J#"b:Xo?Hg(.!oY)tQ'
%cj/6n0_eP@]A36lO"6)_]*#]Y_MAuUq_$:h2[t%qm!hU?mg<rl,)l^hd)LX1Q<)gAW?2>TDf4L:hg6jM#a]E6WDE:E8),uNJ_"cF
%.Lf;4O'X1!HaS0U2(Wr?lAJ0Xq!it=?d$4`/Ad2YD[36qoOlr.7Llec4&D3'FFY&4I4nY4\glf;Nd\1S),#F70S9*S\u"&1W\2$P
%)GeQZXiV&LU8(s=KgG`3cU08<q=9Q[)!%tXc3k^VB>Oojq?Epo%$p<XQ-"TCr<=aY;'(m,*Z8LNF/VM8Ir<[NUKiq'$73>d!CsLR
%2b7Y^YO%>0d6J(]"-jlu%nNBJaBIZ_M[KHX"CF937F<PVn5f81/Xm2K??;@[5\jj3e5e"77U\!t1>q'u-2fO6I3k'Fa$%u'q$:(B
%2E[V1XeJj7FmH/rPng&7*=X6cI/Dem)a+i<rSb`GDP>ne6[ejhWqeZ^#/8n5+.]?1"b*&HU#q'Ul9uKtoFdVm\(PGGLF_j)4B]*(
%>5n4[ro5)@USg<m6`^*d0)`0SZ`QGs9l$3qdgfM0osAbCTsQ;lDh>`Aor,OS)c]UHkrj([9"1t3ABg.350W;'X'Pg$Y#rtn8V14(
%YRlkS'QKid:a3#JmWFd)l3Nt`_ij(p8uL;)p-W3f8]*s#`0KGE;UCYh*Y?Fh^GJ:W)F,2Y>$+Zah0QR$>,jO>)u^+[W>Fcp!"qq%
%_iia=2,>`.q1jGl,69'PUgi#j0?\m7P#[ug[8ZMufl3s.7?b?`k#Y+H<WJt,&]"gJhX]$n^fsN$JXn@,<*cFcXeP/sEr37N#paeF
%-Is<.XiF+chQCc)UmBo&8iNO=>#ip"U])2tL/DL7oV1V^C?F"Bcfmpr<IP\c80#R?V9)(16qB!F5`5QK'BDBt#pM[*W9.*Z^V'E'
%:.6=fFC?@qir5oY],ndii+Xu\n?B7"3MdKp+6T?4.hAar1'fHN-Yg=Nc9sm<-5o9J3_i)nJJ6F5!(e.XU>nZ6&'*hm7!+rTrea*#
%LurlNL^'HDE?b8TB_rF!kcW_,FR!lse*-`_$jL]5rFK_TSX?'!N)QV)kuMlJO1Gb?q93819ujKc(%S7'Us`Ud`D!Ve>-4QA^WZgZ
%&NQ9*29l%L?pO*LSMR=H^>ke->)XpYm]$$m9`mu7^B7SnMmcOJ2.Z([#"sK,58+A<eU"9CA-AGh[8Xf)@jN`563%a2R+,[N7)FL#
%MDL7lo1`10TLAbQX(j']q:Z<4%];INmX]DcSXrlG/'::LDYRO&$KD%DRZ>-,SEP'EqNk@&E*"P)[@q>Ns1IVcq4Q,Lct"BOE4Yjp
%gM0AqohfE0,)nKiSB/sTX\MscKA6H*CXLRSaRpEOOhSE!(pB*NQAW^ZMe0_)b^iAH?dEaLlJ81>pMpS4g2tD>^&-M_\q++g*Jk(/
%ngsYWf%MS<hE=J0`+if_.>$4,..W/r"&>!"Td]c*6XY_`N?[9",*3L-#&qT&MY?VQ*&.s\r#XcU^qZ-DoSUpZESB$-:Olr^O`!)S
%"m&d7gUAr\&#F:9.Tb/M^><RuPt3$Acj[;t&knIChoHN?,[I1ua;%D&^;NLD@o[<ZWX\X_B7TqdIs$Sjf"smVOJp_LEZeFV>`'-D
%cR_&Is86>1dcdYW=6i$,Hh>9r&21-#2"VmeIm%9Y`)AL&A,&V!2k2TBS%qg-!l*BJj)P]PElX`jrf'8VaVrGc"Oc-9[<$X?O;j1/
%%U^!jf1u6M+cYL8M/j`pdV(;)#U5,c9.)EmrEhSt`8/)MV%\JBll`=nO:F@60utJ1I^sd&h2j-Z;e^B8j`Z0&>b<XaA#hqh>X0BP
%.>VO)kE>;)'u@6f_sP5HZ@SZsE^(pHJuF&;r_\lOfiP`7;Ap?D6`K]T=%`d[6outO[Jp_-m<J]2[F<R5;p3%q29.K9pMYR&>!GS_
%',)$9BoOBD$Y$AK"MQpQA.9FN#13PBg_rMtGO?c1n:*g6O!=6OJE13<qmMZ;i#WgE"1_EMb(2_i;QD_prl]&6nm;q9C,us.ps"78
%L]X1R-@F^^o1(3?BX3b*WUuWBmq#G'qU>kH6qK^I,!e%j3EE2p8Slm\MB'PDbSD?[3EE3RDZ,?/&iBhm3!)XG70t>llH5RqD-r9P
%jI[L]mS?8K3ZU-QUT)MaI.TbGT;AQgIcbZ(`1Eg(l?0[h+=W*RM"#&6.`5V"o,SeTOXu+dn!NQ&<*FpQb+lU.0Snl3j5*'$3GK+Z
%2e7peaL$;A"6+\SL_FLt1/B%7)Xg1j.9]:IOJMDqUuf@$5>ie`/"GXl@i]JYEXdAJ=R7*RNheqca5L9H0Vaa"N[-qX6!QJj622Be
%ZA..s'MSBXglA0Q)i2=S,R#p(+7D`=mmnAc8GZiE)G.d]`#@V@I!$"B)D^^iAG@nU*D,787oEa=A=p:ULkUu]qUd/2hN/L/OA92F
%9#:9Lb7WQp(ecM'==(\?>_9LI5F+rmDfZf@G+`3HWG)2[f_k$[rc;+?)k!Ae*Zse[ebDf<8K-k$eR2_(3PIi1NA`MQ[#M7crEYH^
%Dn'#tGO4l<IiG2u>Np`A&bLQ#h*@+'Y;db^eG;1]lnP5nYot)+_Qb7(R3@dr86(0K@1_*J2M?W<KSlXQ*N:(6_8+d@+@\IZY_.5"
%e`1mnC^.pln8C"56&^#>@g7S,S^23Y5KSqW6+4H0E>sUKgWL\.<2AHEK?1(_g^<Q+8d%t!!]mfBaK!QM\%^G<FILWW]l)$ilo3DX
%\oR5H_0UJ\h63VqK\+Xpg@/R_!"q<+QL7CQ9@r&M%5B-27tcs@#ChF=q#<DM%/sN;%mg:BRlHcikTt.V+Kn00o!c7dZ`pRQh4/tg
%eQZ%M<c?Lj\X#lbiuM*Kc4m5'$hYEEP5Y#CL4Yf"N9j0M@#FD+pbCt2Ce%NC[ae,9ctQgY-Ohe!V`g)b!bFXn?%qjtg;#:+q7_%u
%phN^Dr?tQ//`YK0Ygt%T7s[[:5%LePI;LIi5gHSGRZZMhlf%7d$FZ/Yj_O<+lX*$q)F00&p,7dj$q.l[&igYOCkE)gFU&J))b%L.
%73F%:%,dAj(BTQ\6@aU,!h\MWZfc?Cn_4pJ-ltcT8J#@#DW:iT4;u]Gcc,aq8u(%#Im+*XmYhtFJ$GOb0@&$'NYgj\5j.o$j2R#K
%'T$1FE?9g5E-XVkX9UVq)DB0m(ZYZgjENuiF0&T)(Z[fgpr3^4[NGLIeTr7t#[[<0a;F*+j4r'Y/u!.)8d4(U+$a#M$0F4`jNc"i
%K)#WRVbn_,5F"]*rFc't;j>io#VqWe&D#H?eFao+[@q]o25RmeC3&VdLf,9_juNFWmr@J-R*7?f#EuaL4Ygn<%;Pg<1]X%p1,CA8
%FXr%NRj7j7hX'oT3GUC+oU/*lX5U685?.<g."H,SW^,e8(]F8n>7ak..5G^>QC_+Z!F/u"#4Xa(RLYY+IaT`)1(#///3/>!Q%D(H
%L]$E2J/6<fT#M=-<c'#+s-YHuNKh/pT8U-U!SOq?Y+CWRBB/:1\9\oY@?.C$j6@LbLk)lg]m=:TdSLNm>Wj$-cc4MAEV4-Q4o5T:
%ZN8P@LA-a1"a0G7nmJKR?VRb7UjKp?"R3EPBn2Y?ppUs^5en$u8j+\:?a6niB35)i2FnY]-nPU#=)Gl8OkY(+/Vq]m:/'Q]d+>na
%iH)Sgn\m2SA[gi!2`_(G3QJVH(]eok.+c.[_l#C7?iOT&!&%LcB0q3"EL*0,^\Lot+KiNjG:Q?0AMho=0S-$5OBZ/-XtpRI1`C`$
%Y7gR>jcKWb092Un-_P.#79f71)ILlMni3:l!ujYQ(gkTI^7O^J>gMP@IY55K*9c_A`clq9+kmpr%ZhgY#*1i2roWN%:2@7t''.;@
%rCns\OTTHTVGr0t.&Z>'-$MXSJ,1H@LqiBdZ+!Tk&^^`OU4:5Zeu3GMs,$V%m*e4[jD2m%P:QkA4?">ENV:$Ti`3.]s,?F=*[cr>
%4P1TadO59\^2_R\:)X3[W,^8,,q9ctMM=bB"%gm"BcJL[j.p[b1ldd>5FF>4EG^DR;3Z!+[j&h)!_CeTG*74X,QT3J'9^!XhT)CJ
%]gGX?Lid&L=Q9=Z=8OrW*t'?2"q@3:,ZEuBj^(;g<W5N;35/)QGIb4\>p`U<4%_e;5'fJ*4H/_'0!SbTkP-[7nQfT<M4a5hZ'qOJ
%IICMR#P$LOSH>+[Y3MXZ+T<]$`1Nm*O%[e_c^e]un^V$"`'QNAr]!p,j@WKkS>c*G*_!Ml*IM.e'#]1TBcWq/\1Qo6QQ_'Z[*u.$
%/$Gdq_uJ$^Q?n*g$6ZSf2(Y`/?LnlTZ60&p%HM@i,T/.irbmu.jE)C0T(Yc!\"S3"]2HX-&Ufs.&ORRB%]5d6jkA%*e]-LH9ihhe
%`<2`^UYg!n.f\dUVFqO91jp611'7gk+DE&qB7t7go<n.W+R[6Yd[>*J4:[T?AY:#>QS8o7It+D5`H0?Hp[\Nbb2Rc3;]th#%(!o%
%O9?$-_+=nX?)-*2'MR6#)k;@Y6oA:Rq[AV-Lm-4/?9^-h7Fcs1d3-SQS;WDKd6NdQc:.WZlZ"QB,8Ueu20YRK#+hK-0)GBWq\$I'
%q#6IAT<&KBs%*bHH]S&"HuGJ^W;),%3;5:jHB57Pq;['I][k'rr)0fLJk"I51G#J:A#S-sJnX>f=.CJp=(nP4B6s>eCnHdGN;fX8
%/uY$)XBhb$e,N4.f:W315ENQZDTJ+;ooS%+[cL,pqf=?V"au$C^?=6`W;Z]an]"W`F8NC!*H]h,p(LSs5"bUB6:HYmIM#Q,%?cn9
%o\\@cJos";`h04[jm&D>h!,pu(!N=SCS_'ioQBJ9&C2g=<3YX1s&X.4qC&^?K=H;;&i$nQDEpW!j<6&BF#D.U,8(=N06B:0++!fQ
%7J7fV#P%"-7><B5k\2obU@^lb&8*[k#>8XGE)eDPr3/WQ5Hho9nq*]ME2+0'3ViF!l#[MJeJ=$T5-prfOj\GaH"$VgoJj2tLR-uI
%OpWcC86Sh6b@(A(]]51Q3:colOk3Zn;"4,"s4^RY8fo3K&D`>:(aj@=6:>F`V=0N4lRds@:3Z6Yf0[J]r]bsSIb@rPqQh<(HFG<S
%]j/IQ2BT5*n%L]F?sXR*&i10Yg=L9jjHFB^V5Sb8fL8,sXU$%<&:5?b*q<XB"%S0\N?XEV0ENl%.#0#(`ZgKY7E3Vtm#:s(OX"kc
%5nA<tEl\:4d'58'";D=,MZXi&%-<BL8^SZpGl1dQY$o-@[qNOFS:^288$eN7T8^g7Fo>WDO5d=F;NPh:*pJYij4g@/33du3YMo+V
%qYX5'!'9an/;&EOIM)>$`5DdQ5,3'*])\I`pQhC9q$$fi/'r0p=3EjbppZ2*_>#\PPM$R6g+f.HS!PdR3D[FH_8#o2T"isJJ$IaE
%:-V,)AU([#Dutg,radC3q;$#a^T7Rc.LpP$bh$(%KbVB!<!qdD[c?bA?c(q9\RHN=/8h,jj%G.&UaZW0annrTq-kIrP^HGmI__Mk
%i7jj^&X/A)[lUo]Fo-'Mf;b>GGfobZ3UFoM5al54i=KFEeQ2c$&di)bSg(!!GlSRuGH?=e6NP)]O:VaCJO?JGAupTV6j:Q5?j(sT
%oQp\WMF(SVU-8umFo-2Nf[h\:kZ.ITVM4&NcK@2>2H1tMi)Xmf9qgTq_o(q5%D;N5Fhb<7T:JJ]:H'0mA.`8/IfZ%Y5=ihk0tmU7
%XfBnf9b*t/*9u/><l@9&'\G+S7i,!bLAs]RGTc5hbqIKKPICI>O_uMZ0+-&$<n7+Z3n+q#:!Y2%WsGXjpM$`Hm2>#^hBJS>qqjsa
%4\P(dMN&\PH\uVj1dk?OXFr?4YO`YnQ<Wp<U4l@MWhM(i4UgRNZZ;g<J'k#uUMEG$)loZGW8.oR6S#mnl+.F0JRacp8FV="6gf\R
%02PqC!VY'aE!/JA&Vk:p!g1r;oeAEZ6j/I/kLfVJ;8Ipi&.0@-#@aDFrX4DBJCakVWGW%DI>*VIs3q!DCsR2nGu3uWdgbM\pqO<=
%s!ON?629FmJo4.VLCV$gFIH]ZpcjE)?NN=3ni[[G\Xis(5[8a]j"4On8WP%['7qA1nJ;gV9k58j/<ht*DZpcfig]d1AkG[FQI`V`
%n2G/E^cERGe:1Zc)tG3+f6Tr$-nn1R!T$.%n\BVR:s;,(W6tgEBDi_sGR_T++h^Obpbbl=_lD*sRK(u0=0B2_]U"[Aoa2!tD,krU
%Y#G@CQlQrRXil,1Hu+&C,Ma)BK%`@h.Oq[g<V-t8?uU_M^4#VEg])rR!Vl9kgAV+>4V$:4$DH`DnE_,Y"92E\i6ZP!!/gC15ffo*
%'J_p>6M$Na-3$>HSQ;egZNKuUBW;7N!6YdV=7mRmTqVrYY=QD`:HT'/oet/(>n94;"ma2k28X+-hJF[tSA\:D>H?LJUrGa%kDB[M
%ctq4$W+@9+S((W>lbX0u0G)R/mts1c,3V\[<&6R^MdGjc#p7;I*)DEjO:W2%;8Bb^6BWP^Rh-#L6D<uB,Jqh=dB4PoZp#ni79\pR
%pYSaXP]YdL&k1.;[2L_Dc4V]W5aH(ZJPU!;iAd.R\Ql923mK_bV5bMq#%*cekkDnX')9LEIt>mp8IZa,YFGO2K!2l0GVTT41R]"e
%OEof\RgqqXWPi;3p`q=$M`L*V3)[@H<f)@,6m;Z/5#;QMj+X85\EL",d4abJ_GT3qRLSLT6YTPU8taN:Q;#(6Q$aoU"NRW1`\[,5
%c+mj8$>3`l)2Woo;Q0pqR3F8Lq+J_sO[1e#?X2#=-&eW21X%+8BN(UK8'f;ZG_dTGGk_kZ:/fo@$hRB+Fr:o'SRk?Oi)bqh=V34+
%=&o,.mlrL<@9]nm(7j6h>h:Y3oKN,4Fb#dffi46EGA8?i\^AjY6\>3/BO*_7l;d(^3]*F%PDLQTDpa4P8(14"r_H3Y6OU>$BkW"I
%LEq>:$N]_Ws&CO3LlMD\=F=QcVhFVo0%=&`\-:C>A*SgtN=KRAK2`XV'.tm[a!Se>d"98IWNdUh@q!l!7=i_S@n:)3):GJ.MMaU!
%W$/OoDDD*arX8+)^0+Ju*IqIn;/ZVO\S4Hg_JbC2"TcSWP4@^rXutpG&QPrI[iFP*:gU<7Udi96^1/j5'>!sEOB;OnXUZ'e[<g*!
%g9)qHg2:XtXT;o.><RNm/P]7CU$OoYNBM)Wo9IiWR&1'.-3,\I=p=rsQO*^V40#aucnPWrG.gmTlYL29T,S\$)WL%m+BS'(Cls9B
%4>N&Ie?7S,Smd?s\+h@YYp`Ohk*-ZVZ#NHT<Rk^[^YbT1s40aVKAIQeaC7R;o-`_O+7dMta!W7o5(#,j*b]l]W"6'_%cinm;=GZp
%eEHoL<Sn&j\ULZYr]CeWT@p45pOtJOZIVuZ5=8S]d?)a9ML`W&j"0\d\Y[\$O7S\i\6$-X1?'-q/#9]td/<@G(c"$!5).d@0!"mj
%-([[*QVHmDW=dOm?6c1SKch*s)CrbY6r4eaq!0d]q&:%-mu)0YYB:CoVE]BIkX7_'N;_9]/uf^U+p(r$$4AR;(?-%e6m*ulD*=)3
%l$E&AUcBb/8Y,">43cd:TfF/1@u+_oN2PHENr7UJZG2N48J7dZa\c,sUSHXEq+!B#8MPWOM\8p-8"*q_,l$t28U^3pQR^!^Sm2+f
%lPE2>Yk8[cj=Pd8H%2jZ_XDU:;F8f;Hn$"V'6rNC$2f"gHb:IT?4aUOm;fDXI3d:;MgD_cYgOfohNDsXh.:dkNt;o$kie?e.E'U'
%hgDIs*<,Up79l&r9"1kbfG)Li!;PIIqfD8>e()h4b`>Rq2]YFAh>HYi`<o&fr:MSQU5j%+;1#/@niNV[R'CTd1$J(>o+=6>i]_!l
%L6Kd62l?)Qp3e128_Y,`K-'N8[OC>M07EsZ)K;YT7p^;RZoUK,R#t;t]r'6Ck2`ZRg7MGd"&q>VQ+E@c1_BD<bWO3I<K6EQ2tkHX
%HX4]Mo:0j570J-!mh)gud8[\t'i6Rk/6jh4F2d-oXOZ8USJMXEX=5!R"9XeDbn$_AAiL^rI#SP^[`ft2XWp3n%-PhVOEDYP0o3a!
%3bpsmnXZ:hFe40N3pR9(8^q$!s7o)mYt3g[#X.fOAYn#CWm+r#8Ukm3eA6:&TiU"bc\pC?a-PG"\pX%/EsiYtS[Ga--L1u4`088_
%*F56a#*i#JQs[$9rQM1t>7LTPA(]/-rUX[8Br=h3HnAEW.+3$!72Ju/QoK7aG[i31M6J*.k(^i_9a/7rr96pV1_Pfp@T">JqT5YX
%][bD^Zq)qi:.->35gi-Wl=_CRhsBPu?QpI+;MdZeBAMof,Hn1l6'-8ce@MP]r<6L&l8A<TaXL%3g?Am/o*-9(X8),1\ujAB5u^NS
%'0^])hA=.m=aU7d?*>80P$9S&q*bT)eTS-Uc*)7L,JB]VSbBY^?8lsYGIiZ4rsojp6K^s2D=l$o70D!^:;(bNFC%+;0bI'4A?B':
%AZZlNW"%eb#f9i=@^&@,DC\nh;fD@J1,4TE4)qo7?Z"_@&m1^)m<Y.j^7D^dA`:ajHA??QU3$,kK1snHQE+#DoBH3M]%9qV\kUGa
%5?=fW?B\d5,;BLLJq97EG*Ni9\>UkGQA-'5jZtPokLpFm<)W__L@Wl@="`)Doe(De;EQ"[4*!A-L,:]Yna$UDiF'[G,I'ef\T<E@
%f<ZtfXsXinb=m-j>dg+9fFK"MC<L"F<IP#-od\<=;d'7A?9FWBFW``UX+2?.Pe"@!IW'd*;$GG278qHfQ*BHbKi$#.Z%hm^jbEo`
%:5-i26Z,nK_C"0>2!SpC-EIjY$X!?/F:,'"EOb9s]jI!]TK6KYc:+oF1o[.V\t*n%KasB?*^JF]\'uLWeqW;B%`;!J_"DKVnljPm
%>.pVK#,h=7AOnM$a)2BcDY[mIWS3*6HR.;g>UYRp\I58K(f8WREujn?ml\h.7qtJ1^hH:2-@:tbTb2m"V6$%75iMd!WHm^GA"Y*,
%H:nQed&JARDiE%D_\PLAERp?4OJ*o\LXP*o+E-0jYR;d4X5lkf_arNSec<F:EWb6jI.8DfX3&mQHr"W[%EH8q!m9V\OV"amn>'MA
%Xm'aIgZJ$l%a;t/1l_j/%i"8b%RHX($nbZk(.itK54$32H6C;;%O<%-LE2>?fM)=PC'=mDm?cs^\1)4^*OSoUl[^69S&t)`Af+pP
%eBKtia.O?55KmJh0>aDuV&[XX^i!1?&+^UhVo=FFck"DTpFq]`qM]'3`cPsq<R\jsO/Q'd:0;DA<&Q)/FfP+<'mHkK!p8B`R##s3
%0L-/V?0uq1k]i+b;-eDKH9h5?H6&jjm:U[*g7<0dGRIK2FT_n0Q0V6[nYG7?C![X=etps_L-*1:Yqq7(;f*(T(E?Ef(i#m^drQW0
%8JUCY"ST!3C>5d")UYD1Rp$#TlS`><#&U5l5A%sk'#<s8dAl.XE&qTQ_OW][;l<N-Fkk'f41-#mT5L`_]i=AFr52=.=#Y(-XcM]T
%=m%Ne.daY[7U_l=C9SLW(%;23]+]^Y0eo3ZWYFYe'iX+kGW=^4P=0pOHI,/h6ujLh)GN@u;tWf!ge9*`>&!uS8WB!rfSh!X>i_$@
%gJ0!ck]C)!6p6eNN23Hp-;89m"5%p)jDGKfY!f(<Hp"UuMf#nr."^&NZZYBXhUX.MTH!M)_)Ki*#[l<!YB!Xj'TWhF@Kf2h?8e;_
%[2h<:PSY2YSa\>^eOEcDWE-ss,;A>Mp<lIoL/R?Kc!&h/G=ba"eX7K4_77D<Yq0[n]S@Lb@[E3Yh_kb)l`D*!g1[gj'=Lo;"p;Sg
%lk4[T=N)o*;5'%PoSH:1>)rC,1Y17)K5&u"gHHU/d1I$?nn3RBL?+(uNp,..O3!6*?n_0LV!\kJh1,dbk(OHk6;BL_<&L%&GUWZ8
%E+T_g7bc/B4(IU.<kE7,#[JSl;srkcKV,uYLW%GtARi^'[:`M(e6cAf!uu^UX,?<bp%HKkqb^*H.E%e5EP2Zj+<:p2POU?a*1?cI
%BJAR+\7LLp?K2ZAL`99FN`CMVTYK18kr+LBghsa7<S5V7f]q[1CsX&SB+;/:n)H!u6]+>dR^h@Q^L/Br`3r[THr4ar]8D.<dG#Cp
%ngN:GR`<$.7/=i@nUjhd#Z'l79cslj4Bb6PdB@OM;\-K`hWo#d'3agt(n-`Z(V\t]$_PQD[Cd#t$qV[HEmuTPH?"9(8hW)7*/feu
%NT5Vj:>,MU@6$)YPU"MREho>m2]T]:j@tegMB[MKTIMA87%eEbd==^U=g_%Z>,kS#%Fn[]ODFc3[P-1lBbFre0irV>$Ng3b7Lt2#
%WWlN.!2<W,Xfi2`'t0.G)i.S7SA-G+%1P$V\Q+K8lJgS!+/9<q=?WS]e'b^&nnNH_=!R4bbDq0d;i/_n4cCD1f@Y<HPFs]EQTXa?
%J<UFWq*F)=,PVGCL6"t%Xsjd.k?)T#Pug[s.P<8lcmV;J^&eRUl)h*cMh_u^eOJAr%lg@?I4QLel\!r\LMp``XLHtI,c3T"FMO,,
%\5IE0:oQh)^cWjZ<1I4U(J$A<<h^1I<G<jMMi)p"7\n5m%l_gL1&u>*Gc]>/Y?>bbonH[ALL2M2EEt*VX1Ik_8(*"H-u&A:0hC<,
%ae6j`rt,X+$/fm-&HY#`*L4ti%?Ei$jT:`J7A1$`Y@MK<QnQ,S@iLRg-.I?C6:Me*!`KfegJ6t)=/?Ysa?LdkE[sQ3:,n.uEX+Mg
%fBWGck5&LG"O%Ds')\R2ql09UD.!W:?k+Ws=\#.XiEkG.^,cF23<Xl#YI8t5L:SiSU8!>+aSEoNLAV^f<Qa\ecua\bG']ETLu*S2
%LZ3Yr(`ccfBL*/:Vq*EgohMI;HA>"O_S0S`dHYR8"G=g7^C#3dYLUlgM]7+T;<koC:]L\SX`aY@[J(mr)Y[33@bm3O,]9''VhH3k
%Kh"pSB&MS@.YKg5c"07*(ccRH__Gp9.Ui&(@?"WDCd"[hkoOI.aLsFj]t!;re4!GV<FsE3r,G5>j_*V2>PM%C^asLXr3LBH\tZ08
%\U,V%<4%Yr22(CVYD"]<5lgpj2sqPIJ%nta<i(;$8ErKJo@k%#p]akV;t3Ds+jf;'#(8L3ef#Auo02"fQ[JaV@9qnd`.f!K&G-9/
%2\Sf--6Poc\Bs-70=`]piR^>jm+3R>qG-Xm5MW3abX]Ijhj`SrH8+.HCHQ^&!'%`3<JfPA_@,YBV_\iNiiVn#4QrHMMl`>SiJ]@N
%_J?b3h`XfZTi:$a4!>eq>KtZ;g7#asmdDO`3<`0%oJF")3d\WKEP4BA0&J3%6t]:s1-=3-o6'Gs2/uH[=Iu/.f&^j`>.WM492fUf
%Qb-JBZ0eroLUlFcX]J(.nr_tnN#7II#sp$6Q?uaMVK^U`_M^JpbO*SMk:j1K_!J-E9k_&g5r\D@GBU@"&Q:<fp!'U2/f^I0Z,&K$
%h?&4a>[_4rEOX]I]fft:G:Ul$VL$``mpC0DQaW]h?6L,S^<XAKk,n`P>YR1+F%;]pUhYaeZhoN".3$!AL._/DHed;!00J[(Fi)D"
%h"".B0Y^ho!AK=:L$uf*k%]t/M+hEWEO/]h]QUWbM*$jZaS4@m76LG!g";n.ecu7IGHt!t:Fc,rqiTX:mS@@oP&Jh6Mj:9-Nl6o^
%m/\o?\+ujm^(NZ"cb@Djf/M,6dFkA?an#2&Sa>-C+fk5N\#p4<?Ip\Bq&Opa0BHt>Y<$>o=HsP'IJWhErTTuDC!:D>X_:?<^%B^k
%lj"eD@;#Ps2%%,ilW9-/kuMAu\[6Xp^7&_!Ct98VeP7]beggRVdefJH%U$moFKPW,&p$\)3\"+\lIf/T#[':HS6oE"16"],WRGg5
%1p`D%hjD"#0;mh!<-`B]?CKS?AC[TSNN;@C>,4:RLrS7cblEp8Ur=c2Q@%k"3bq#^D.VQ?U_Q6_YGt*Epc*Dd>Eq-Z$PQ0W)?_;$
%#>]"Ie-1@7b*2]WoOVa;Y[Mq5\BZ2]rNj]Cn+p^[gW2S*i#?*=CFd.>a_ee/)?X8`DQHps:7dP(9oQo5VjTLK"+"Mg9GAO"'ZBgl
%F4a-BTsj_a-MNJO%79CJQuj^h<RR`!gJY2_HMEVhjgjW7<5(KLfZQErV+\"WDRqf53DPnb;5aQ\`8g5!Gc?"U^\PV"1V';30;YdH
%n()0o7TeE_6G$6=[>TDIYnW-I0.^s7X^CBlJg1@Oq.F^3.MKES.-tX$lXao"pj*lN.2f=)&s2&2nkqqO4gEe<8LIZ%=euKB%L'YL
%05^FF$b;"Z&J!f9i6SQ&f*C#mb3I8uWB6M#*HZXODDKWc=HB;.UJ8P4'!u?piHgr(<UW&H']s&_$e\VGr%;=l2AU@kVC`0JEHBsS
%7-BBJNhbG&o7;^>DI_dT!D_=cE,P\-+WFHIQYQ*NUNr4jIEENGZF,=\+<HiLKl"/BM_$;I%_J-`[!?Kt/p345mkT6dWD*R'!!_AT
%SE>"PB+t@3C]bTFW)-^1<pf[fr@6aSEd+uU=\bfZemg'9:Y,8%C+WZYe0SWd=72!/KrP#6Mlq26D70c5o_APfZK%e+K=_3op#Q5,
%Zm^/[F0rI3IBGKW(Z,aDX7b+U?6>gu[jS"Fa6Ljn<G>emjHF48!6j0e;M5kharudNc$?#P]J/kj]InRJneD^=+KN&XI(R(]:-;6m
%d_]$<@J.g1=7<'9`T?K6*CXY=!>o@HaUTh\j,N0"qG"P#RU%8QOXQH@q70PrhNU`U.=ZKHLE4UuCp'(a.YK$#T0a8H3ojXh#MS0]
%qs2FddWP==OfOa(.<i"8F0Rg5HOpht%m*Y`<!CS6V,p2hmV?4-=$Js:dp&J4gVd#]c!'sk'"&G9;pn!]A[rT"AWCEd9nTj\[]8F:
%''G>+'[Ys4*UkGGLO\5-/#;^5"FQZoJo*SK>63T_6+s(<2;cVibr=%J,'q@Yh<\2ss'uN,cT1oe_d*m(*D@VP_*YhkJIn3=I1-L3
%l]'./7RtKJMafG:A5#V)9XHEkRm($,"B4B#.I@7\"*)@h)B:NE9te7C4)DdB9l#]pfm1VKj;Go>SY[^r-u"8O;Hdu/oe-_C&dB1G
%(qV-0Z=_jWaXW`(3aL=gN(Iu>6,EV3$C%7(LKMp8qPOB(Q2%A3iN%aCDB)Mq=o)UV>TJbJ^N?&[.#nj<?T@S@St=U:U!P\inOr^+
%Esr8D!i+IR1fQ<gNZf@",6b\mFnTB@/Frpmb35p^YAK_L6eBQaT`Y)#^=hmPBb8n*$nt-A,uaZY9,IBJ!L+1qG+)B]X9njTr,c?[
%K$Za0j-/l^:/?(eh4sqt*N_DET"aF59[`o-"^ujm?Fjq7RkPfbdF#eqX#_I3#PjE3[/>im8iGE,&UELZpu6Uia?INVa?C(idMrPN
%(=%_,V0('g,(1Temh1A-Z5i&*;.LBKGt0hW1He(]#UKa1>?hA]r,.-28XS5BR[])P-<G%(4Vi).]*JKcZ$pmr8B5pT06;L3Xf:sO
%m6uqZ.R-JXg"s]n`_'\qGH`n=VijB.JASgS$#W&o8Fe*+I`X$sq'1bt+p(mKq+Blr?//e3aH]&car*IjO\mqE_!&;EN%<b!SS.Sn
%ZeGt^/T"k:+#qJ=b/8nC.-`W5>r^OALe1@Jh>CQ$jsBSH@lpSY(,4P#pqBVH%2cW#0P9fl.OlXfLip\MLRd/R]nQRVHQb%oAFVuY
%70HJY'b[]K$=Jc;/Xg)]Rs:U"!#T4Q,:QRDa?P@&GUDdKJGII(i(s^[-?8j[*9M!KSVu$EnNLGV*_:N413r>[;u0*7YMW_7D.prN
%be$`TTJMD#pA4O#I-iVX(,ed/ObN%t%3,\;XNJ5X/8XWUEYeUMdtcO6dpO(G+W\]mC'Zi0k8XUO+?(^EF,E!(cOG^RQ<nL4=S![.
%XrM&9YrSs>'tunNV/i!!gNO.-0TC@g0.[eVlY%2@eUY&[aN?V$Y*Em,\V?59XVu`=_L9.eX?6don+'fGqtab64r)YKc%Z3lVg*`N
%R+qNg-$IiMD^Riro/^<[!'FBg.j1bSMr!Y;d'QM!Z?&$gdO33.o]lD;HnV4E"DkND5;74$A^]T/Ho=E+L2<Ts/o7_@7poM%=eV/(
%mMf/\hX+#5[%5mn`-N:e>e]QlPP6d?N9L4=3jjFH@Ql4!jE9d8,#MNCKS-t[FhmM9dX$3+21\$1H5[%bW'MZ;VF*:!P:ajDmbXkI
%Y7D:^93]$Scd^n3_p&#Jde(sgZ"?_L2(4-Ub^3lA_Kl3tQpm0/:74('aY]6@R&s0>cN+-;3Qh`XYN^GrrF6U7,k\%2$AGB]I]ebr
%gB[G$pIrncKSYka2/Ms15mCjkjj`Scq*Q'\*2TZfG.gJ*\Ed@`1RcX(]E^+D1VKO'9MRGPC<b']-8@5QHjI`n#)KnE_Zi25ENa@N
%cFDCu4o9Pt"Z'IGrb`ge>I:9tdamgG,*n3"g%o@`;t)QIo<DRuYUns`l"%@'&f15EQD$'u?oie,X+_q\3_MCB[#VA?^Umo8XSge'
%>Rp)^FA"Y,!3FVshW@0V65PG&HOk2^;YK`,(I#%*m&Zbjf.@eNBqJ^bS_ZBBJZ86hIT\i%V,OFS7;F<HC^<u;q9r@N'iXO$^&uDU
%^'''i,*kGP\n4p7,o=tt\\gdW4o>1@'*BtDFILsf/=h@#P%_c=#5mTLbA1MiKPg=Eac#ic?,!s$]YKW(]R!Xd4*au4kKB^T%m%@c
%oZC?OG5@s&4>hIlGV5l*YfL,4U]3+@%V1rqKGDs!0O?r7BdCuiTS9hK*o0%P)tQ/F8ue4A>KkVQ.r.bHJ\!0T-Vb!V\&Bs*Wl1q5
%i+Qirn>)MR2H.d7BL(PS4Og`)HM/7NkD^>OD!lH=<I+G$a&%Si5_cla@!YkGG!7\@3j;<*WVjn,=CR+Cq`tqs?+8C"l,,m/?EhVe
%oWbtKZ#sbcbS6Z+_5&X=+$AU7gU$G*iVpbaW]9TNf]a@q^#@,9@;P;APc[_V9?)?ab6'"Fm:B<aN$XM7f:AtrAHn%&9nnYI:f''^
%O,8S@FF<OsT+53;kpPd73WE'7>c,iuY@iXkfaq\/5'P@&_Q=kWG^!coiAo`J]p&mD]AgI\PS'hL)nHigm\F/2dL@n$F3!P:d`r(8
%Q5d?9K"1Mf0qEPkcgIl?J(,.`dAW3\V,a#E7H3bXRJ;@:A*A#MDt0U,;5eRBQ.alUU;j^I57Tj(f*=oJ[eKT$,#(c5,a=W98Y(Ud
%_9CSk.]p(D94jR!),6I#[bl9e[b<+nbLOLiI!I@4f]<J8KnU"YNbQrt6#Q*b'sd)E([u)!):m8W`T)c&N6_!S\l.5aP@siZSK<fu
%RL9J`./17W#\G;'56:--HF3kd/G*@"q\no=F0"3QMj_%lZVD!Z]bpn^j1LR_>*Nc4j:;0j[%B-M4'0neY([]lJ^)+$]i=O[mZF.[
%RcN[+V(#R62G<R1aS_ng](bl&D0E+FN,.b2BK9^2Gq-OKPQkk@oP"-;r%-,/ZC02dN8[Ms^mEXCo(W$,;Q?"Q?LDCii>1K$o9F\l
%>1c@R>6dl7$EPbEO\5'"q!nV+f"Dfkg@r4@C",g[6fhN8oW$]:e,\XC>nD/8I*WgL7O.`,e+."O<bd>jET'O42G-5c?W]BDf$?T*
%@9H6nhgj+gVp_JXV4BZ(59Bm1[*CrKRP1KNWUgpP;SMDC&bu!5`a*P6WV:MA]9l6`[uPP*Ep\.9$O66\c)4<fD\::cQ0Xtd45#;4
%nsslH^*nX'B'tE:0Vlh-nLPA@2KpiP':ckVms:nW@r,Gjo',pmmAM^g\=4[?/!h]#BYOknD$$)Iq`?*.hqUu$"VYq(CLuM]m(<V@
%MU"h3Iih-KX-lFPfm&s=`hn!(G63AmbVA>d;s>Wb(p9cr9Z'u^]LuUrgGOCR.C,pX;K!+XNU98FI<j6lJ&(?B),fb48R+-59!J"Q
%SUYNYCPY9PLHqkfp+QXl1e=Rnj@c@1R=$7MV4G<nLH.M;/n':@Nc)ppos<*k#TGB@G0:uZEr4+-ViXn69n6\?.XXIP8NFEZe$TWe
%KZkK=O/B31fdkH)J4QQeeOmQWm]Ca+/'VBbJm#cOR;":uo&gI:?JI`T!MZ\DS.R;QEtu'pbjgop&71&,erH)kpZYRik00iG?k8Jb
%ae-6`\\qNt%Y`Z%$b9AmJ`L&s\\+Qj=b")#T]eq&0$Z*e]+hh8%u#B`T#aGq7i(;*ME:Vg[D:(R]"kH)[s)HlV08``<0MDh<9"-M
%(,a(aV9SYsggbe%8uT>K9:o!nLc=WlWcDZ%7nX)R95>>f;j`\[P;)L`L"<)P(@m$5I0T-9i?5>-+2R%^68iJl%368I!1&OU+S;+,
%cE++NYL/;9#Oj[f\@7edE1=[,_`=]?G('N[jND*se$eO@aK`#)BITA%HaUFkOD"06?T0S/(<H.%b?t[AY(1L-?5TSM`G&rT:p!bj
%])@M0UN[[#\)4AEN>8_*Hi)Ut:7F%Ua\3pk3`t3U))WAoet`g2[0md$L!8:uCDqdbbT5JDlqf"Iia&;N4[6]dgj>tm>9Adhq9%C-
%-<8Yc?1q;,\R$2WD8%1EYN.H/>?>ENLf+93I"fO2ABpA$^$IKKZonjBZ'H!6cpOO!R6*NUr'4lB169GJoqs>j5:Dr-h<me@D!R`o
%cRAK-B&Jp,be6ENHWG<LfF5jF<V&j2B<r^&9ioTNXot/8KCYL0qE"?`QR5Z"4)[VNM94m;T#@rK*o&[XKK"@M:$*t8b5Jo!XhNmt
%o5?F=I.DZG[*X)##cOOp&,0V!B-Pe2/SQtAmHn/TeT=Mp3u=fj/$+.\1We'e9<nc23l<i>QWCg-e,$Pjo2b]/<h"8XeSd.qnd@-p
%SOJ&sgSk+7.UYt5&>NQ;5$i*I[@1Rr2oIt<jI(>1piC2CQ+NTHm7a^fT^D4=#"U)L2tqhIRLK?&=h078P:FOEE.r]m?g1;9f9FOZ
%VTFEI1?6sA=scff:C"9D_eLeoeh,87[DjgmEBudS]`h%%\7RSlMSK=#B((:Zq8a,$njorG"l+'G3reh)^&esLR*-4JcSrDTQUem1
%D@VZ3O\OXi6*`X<Dc3nf?-h\7Db@),BZR7WWP7JY6?JfrobO!j@r&t]@<VCD]p,+WG`CeXUW8MPo_k5O9GBGG'A5edK^*oT_W&Ef
%F9KA`h(7r0/6?'Omd0p"N:7luSX=_%aE?sKe)r4%4Q#<D^J@B"DsNm<b`CV$QUAMWTPpj<%M7iNpY]1n<U[u";BptTlj/ANTUC.u
%g2bBL\Rh=Q(6/)l&*C>Bi.aVt7j-aG7JJ&(KgtQ^CuT@K>hY(uhEaj-I7pNa?L4>g>H,=#2sWadPDgj)oP!*T%5TE5+C<fL<jJ1&
%[966X[ndKW%TAq#jPIn!\=h]tY4C;aSH.sbGD4dL@5GT"&OE/F!n(73MfkcCY[U[?'ipZ],I*67[Ira,WLM#[;S2CE;s0W*0W2Ba
%k0qE"k.1+FYn5aGS6/pb4.fX/HJb*W;8gA/jk$sL!!]kG_U5+mporGC0d+,PUKd,>NAa&uTP5N#T4a*Yh[d.-2<!(\qu_>XB\U)u
%$9Q?rWt^sth+kih>'3k61n7`_Bb-c$,QOD%/T'lMbf2]+c7pA!\Jr4gT)tEUI('.5^!0ucO#i`<hRV)Vf8HQDC@#CN+cE![0KS,t
%nKE)IHF1nMqY66,F+c#3hGu"oTU*!`eKq`J`;hfhSn&V60&)@1*n8KbPE^'=]!lgJBO*>h&JtX1[W&R[?9(126.L;=fB*l^2C?00
%TF(j2Hc#la1c:h/YGH>pk)^OoI1Qa^bScbua[1>kk-TSbc@rhkV&h?fn[q/<k73M]a%f=Be/g*%!sj%c`o5aqlf_$T3sT)MWA_;i
%9g]XL!#Oh\(t$>qM;8Af$78_4:IBQ[*j<`L%T(cKj-S;_<=:;3?=s:f=t-"%6;=Q40';q*2^T<IcIu0O&%.dTjZooe2KCm#>IU=/
%eG/@H>XmE.6]EZ[/o@[K$!R!2d$AA,psb)K46AgD$AW73#H6)#9KX3MG(=lH927f>/X<j,:@:kqc5nF<QX$K$B?;YO%e%ZF9S?bq
%W;25C!_P?W-;Q79k'!%&P8A(4pR[lEO2\O-TI/ADe>)u+7g&&Daui$A>_.ih_fll(MVPh&E7@!Cn=f8Gp6%qTPp@12Bg^R[TL.>Y
%J.KO>m:?O$pIiBBd796.oe?5a<%)QYn=W,$PkOG?NoXLd9;V)P:ijL=n<Dp"4^+7'<M()Z&QG"Ad,\LrD0?nm?Hk"HD'u:&_Y)&p
%L'JHD!J'c7f/lPUb@U8#Ep:[XlJ#k6.,t=#5nY7#mn3qd?Ikdk4h7Z/YK`RgF.kc\h)mbc<L)tI(EQNU"p-t(^?:PtHmTX^`Q=V;
%fffqHVOae^),SN("_R<VV&&Z"";QG!jiQpCD5#Of?8O/tW67)tVjm9":\gJ#!-M4MTJ!@G\'#!*pXGo@'j>8VGc#XKWOqmqk#U98
%D8j&I5Io[*:fm!ip1.aG'jWHoW7`fHiI(VVN1_BJbib<1]/Wkt1+ZCHH7aJ7gI5[f1O4!OTs!+C8i)[#[sNH%lG8,W'c!<KKGDV!
%^?XcsYFU@b-GQOLq0*kEp>s[6c!_aM[oX;i=V+^NZfKS+[lG%'CR&n\@IMR4SVU=9D>r#:!gl)SEQ.1A"uP>LDEVQ)BC*&Tj>Tj*
%H3[Z%E4789m6i2_WSQFgD$rksgG.P`?(p`8_GTu&EdBl!*)BfeSY"tte&q[#e'hsg,5^699XArQ?PY8sVC%h)L5"($n\!?"\8XIu
%&[n::ranLDH4pU[KAC;0$!3H,S,-',]#F(JKWCH)D;J3^C%k-7olM\No_OD`/`j<6:Q**G<8u<il'q0eF15g<c.:hs+[!KhQCXVE
%KW!#dW7039iE:J%=\i0pHe-.)iaLX$Fa7:eI?,@04=s?cRG"Ki1XjJ_io/SOJ]$dg<BPPfe/b,](W>(;_ccufpf"6#^<sW8A6Pd-
%S=!M?3'g=bF'J6_o[EG#G].4fJ'(s28@L=Y&Nb6DSjK;c<u0-(*,WDn>0<e7'AWlX)-h"R**T9Lcorbn92CNMFBb9g=maLG$`37/
%/P7sCGPR4PX9c"QKgI[2Y%4l,e\`[g`VVjJJ/C^tJ->)8kT%_\Oi;rud(Nuo=-&QI3FR(%V?\Ki4YW,.%715YVcN,QjTR?/-M*eh
%fijLn^Y34/DR6jI]+p\<&OrCG)LmHdONKgWZ9a"N[l4RH([>P)]'9P9jZsAQ6.?;5+IS,989/4Lhd)oCY+u?%e_/V)$S':.9W1ek
%<DT@u-H"VH*CJY":e[IN-_\O4VCe_hAJE%B:f2*q`bA;)>aQHmn=dj>miA)'%Q>U@;uhY`1<9nETu,TXl3(+,L714j#AtO'7=g0q
%eDqYZ1nL82ShY6h?rlSlCWcnhk`__1CGlpcpKRC>cNjc:Hjprt.-gbQ]+I&dkira;K*si(O3cWpX^[08SjC2`DJ(YQXgu1k/mjLZ
%k+?uUV[!WcHu5(RlMFHe%WH;0EJ>1=33,@KZW966W[A)XnX19e#>4ZX%$1o(V^=GbQl[#>(T((6^hfij08lK7G/j;%h[n2B;-q-r
%(j*L<M>>3;/jZ^u1gG[&1&`^GX#bIKC^h=rM[#i3=c.t[pG8kR8o=k4!G].sm(;;2\etFd!NkJ]ZMqmPWQ;+\SjBORgprHR5%<q!
%7&'=C94;hWRmQc1S<4tc'I#8`)#BUI7T+ue]g[moT(DG"<)#);c'jX$(`b#0?h0neQtbEP/J"WJ-8iBgn(tKCUL->^S@l73O0$.T
%gc#7[bTJl.4o$B4_65aqkkZ?$)++Nl0=NA9VY9[sKht5=#h^ND+;P:i/$q!ge<A4mgZ>S"3nW>_56h!]\Wt(Hr57'<P7ctR:He7,
%9i'+e*Zbb^gr^<uS0],3h1AN5cg".8*)6TfMbS-$Ap(ZjC1t#)apUi)rH_Rk[4R/B9[>+oj*)#HR6[>V<Gp?B*[8UsH/m,<B4o7:
%.,E'H6[_X^f$bE?L#+D*L)>m["2qWbp6?jE7Xd/c">%?Oe%VS6ojslS*!cV,QV@iFmpHdi6KGD<3A_%c&1RNei3&EMc`C6!,*Fj@
%e7d$nGloE,YpDoYKN^9]O4S=:Pb+K:U,+a5`'/!HGu&12/q"%eDgD:b+[FXRa2q'?Td20U\j_gKOEXh@bIT,]#ufLqk[3-\jls=h
%&Hl,&W<l4Ql,@+`?^p/&:W9C&7P]1e"$TI,3q*Y7Dk,4DEqGrhptTG:1BPABpM&5mA'27h3Ir5`RL_,.r"9_>q9lH9:oh,(dGC+g
%!VM@#G8m=)%VDrmoV$#@+#fs))BJ;VbI$!Wr8$S("qBA'UD[Vs>dN[4I9>/S;IimYaP8m<R\YBVkEe?PC_=dDaY`cVHOm:+m.j>&
%f]^/ASsc)BacT9C4h-)akcSX.FF(cc6.+ri_]rOQ1uJkHg"8"LT,D[e/&7_=Yc!1%!Y$Ml]Z^J3M*kPK,3(ngEQ#f&#=O"s!*^Xr
%0d1+<8&j?bYfYqZ#N&s4[lS2K3dO%tlAh/hl2=9MN>7,1<<icm]^5fJ+QqR=.1??7njhcGe++o:^hf"9,Yf$7D;QiZEPmW*UB"KR
%WKER"IDus\ecku=K"$0CVSK2>3&84[1tRfek2N36)k[]_!<fI97\n?[n+M.3.kYGj$4MXbNir@]ldbaR`)a[rhH;RNm65n+bqI!d
%855_?h1]3r1S*\lmJN\+He:O8Rg3W44/R!5(sbf^FF%eEZEL!T`BM.c2@j%j_1$EbD,Dr6paE"a(NKOrigaB8S/joe+M)u$3qg^b
%h$P=Ql-tL(k+435&>u2d!._UXI?7uABNAYs"u1[Qs$`Z!nXt[2foQDe5i0FBX+P6!`1ahbi*+mo)$Q`[JKc$odb\:\G*tl_\pZU!
%U]0HsAeXd5I7Ql^K<T:k;Ol^>"2XWq)@tLLRBIC%?Z_kum6fSb%S#79![>on@IM*#=dZGMcq3'd`5>1,f?P^V?T8lo1GOC06!%!(
%BQJZH`Y_alM`6UXj7:2AbV`l2a<9443AANUQobO<:X*%#\qWOa61_aM6Fh<3HZR#-g>F<3Y1<+!@^CRYB,0kqUCC8#jUDC/$p>!W
%j:V>nBNLIQP$=:q7e$d"=BHPd#,+n[Gb^Z'"o9'L\US^;X&3Q'Q2]>D*#p+?.dShLn@-]JY[EM[DbAUOKGg\mp;;(T%ufZ<Ie7I$
%7qMsFF'1B[Y8!GtF(A4?NVH]$+p(\%lNZpKpk#3d-PdQG]]LHUo3pH-/aMOI)aDp@9(cuUHkc&.BZ""4/,'1ANPN,JhP6jM!cVFp
%!2F)V2#E#b6*)"FKs2lqg025nL&Ib+ZAOPE>'3O=='sLS9rq"cpjai<6b+eZ/LqD`OK70h`Rm[m9Gs30/_[8jYh>'k]U*ZFi5%V/
%*g*/-GJnZGjh<).BQ:T["i+f"a8F5=_;,gNX13U1c>D<+`iUoT]1m)i3GZsjJE?m5^sIYI5)N:Ma-;=k#9#/\VMcmB+MZ["gukFr
%PW9W[mS@osO7MB"''gP!aWi"mU!)9jqT!Bd)k1)r6C<IdVYHu<1`1(/dJq)hcT1PG\*iN.:3tE&I(D1\not:T%?+b#oGVhE;/Auo
%!sp3G94[>i"8bS:Zk`<rFT;>[D17oCO0Hkh1naQtqXBOGPP_MdI9G.P%R@eHJgA:Z3GYJ$C!B>L,s78[TFLlF.<<>R*%*c,#lMp<
%B?aKh9IYr/e"kA:TKnrI/,a::F"l'%Xu1-'/Ze?7^<lGM(:HehCRpE^MI^UB<u=_EgPjO8RppS`h;#Se.R..t:+=+f-X99DcL[!u
%0A/$<GoC@30-&6'X5U/Ycj+(MBVX#;bjFJmY<"La@DO9bc^hf"$G43_06c2pqN>UPL_EYO6teRsP^RJ.[2b^@>'O@q83@;@k]b(;
%^@!n^jQG;t[?iPBVK\U=V6+3uGF["X/>"L6*:u34GnS5JQHtG^LHNlFI[3c:qB!Im552C2Q9l+-S8ZOB/DiDXki.]Eq&H%GBDDh^
%3S\U<pTo8)XJ:]k*TqKu$IA9kF$.%dkA`][Z[@]=%"=_mr@Hhbo1\,)a8+N:neoE2iK*T@TB.<LUusn)c2/K!'9-3sB:MBLmCY*t
%I^j<jnVr`86uYiP5nN,CX<Lr3En];@`m@J]!;AK72YLaJ97aT42_c4Od01ue*[ne)@[t2]*ugK-R2=-;Ns&?"JUD5JD^a[bgi_+*
%Ke=bJXN6,?dLe(W_[Lp_CupGBD)KCunW#U).!3#(MDdQ1%e&*F5l&m`VgMkK9,s*]JGuNX?Ja<5P!#a%q^E*R-oXBPh:#[\PP-u2
%p+YU!W&[r?oaR8WfU]c/-6C4qSBB'('St_Q45UE(9L7q_E>CM%@uH3,C'@uRB7C5MGkam1aO03m'WsHWOV(Eb0h3\8&XA2(Qm+=^
%h>LO@EhqkN#N(;CjiQ[WEsJu-eSL#3ZN^*`P\=p9NuA#">XnQC[*_RBCQ1"X?D]5&]9"ss+#/MB7Bc!ZMlWVuUNmnM96NgNVXUSJ
%m\.AfF/I;7-<ha2>SKs*cMP.H`UOM"O"d%a,NlZ0rq)_%B%6X,QIjFZ^<RER(Z,,5&FUE#L!QG_1PZ;n6h+Uds._TX^GA5[`t_iK
%o/Q6g-e$#]0o\>-0HAQ96SaY(([DlD;Z!D!p:LHP.\;;o^`iR2o0,d*VnM9(]l-Y9Y^DDgAUDcL(]>>lI+]H"+1)*Jm^D:@a)SN)
%=g%-ppAn*U_deY-%_XI17GLX#5u-/":p6d]R"Z9X^G04=a2<(lo@B*G[W;QRE5_X`m\7G`l*Y[A8W*1>2.4<p3qqF$cY6(+)0tS]
%FSeTtSJ<(<e%Q//"!#gs&e@%$FZu,QY861H:4(_;c.n)%Re78jq-t/C(<!/O@0JbreR'oL\^9G[9[C6piI[8qH:'$5^=?0&WLrJ#
%2tt4=I8t2jE;J^F(>"7?FS07Pb>rQ>Ypdq8fD_d/bl]'<)p`A?dHS(7l(P.:7TKCpA=Eal#G]qA"Ghu\pKsV%=4iuI_cLcLi0ij>
%\ZjN6GrUj2Ff'J;QbM]5F"iL:%6Q%ph5^?!Epn)=O?l'*#Iuj/3fm[U#L`!,pS5"EeAapJVa1)tphS3af?Rtj2o,456_`>%$0T4-
%7TJ8_"mBp@CX6[J#4sL+iY\/%1PF$1pcIKen$Qeu[5E'EDZiQcB8CCU")h%!oQbsub-BO>SF^g)S9dq?ZTa-p\'SO.Z"pY<bsN`R
%H+oc+D^2f:d.:e>DJ]5ggDfou*cDc0N&KsbH%U$imH\;SgLf(MT$6f8GAuc0H/Euk>o`-?*bj)Z_g/"@R7H]/.LgVtKJO_'PBg+G
%eb;'9h^A$0rJu:bO-Rto-hAmC2@gnF_g-[&bk"q%r^NJ`)qrJ#J&eD^)gQ>GpXVtkR`?:QL5/=K*,aV`UH't6ol9Kf_V_)Sqg#/6
%ru3T(#P*$9L<!aX)Ml\E#Gm>#iIC1^5hY7LpT*iuO0&3^a$.d'0U#?eGAf(=o.g9,Fm#I5%37\HBJPb*7gD06j`(\3Y7^Q`$9e.B
%CBce)KCb'cl.'-9ad"AhX2G"33]t/:P,jVj5f:i:4Gkj2]lnUH&*,8$roSYk%iWN=i9qNU)oh$_Fsi=%79OO*,liWmam5F9DU!+^
%m@&49F&;&TK+i[e[-NhqP._pm+kc/n*KkjG(sO4,EH5VILLe4d,<-qV7iBDl=ZFc!%`uSOFT*o(jr^@nKk=oTguVQ)h,*HcI+E*Q
%#[s2_)8A1;hsPDHqE:(`\2D=u6:2g:@nNcj,i,X`Pip,pd2pI%[id^'Tfah!Zu8_XeY,)<9OF.WpNJ%3g19.X1_+[WO,+YG'\>'Q
%/9b>S\3=fF2k9LlHX62]8,V5s9-*CmGWtk<_9kI%f8k`fZWU:P-p5Dp\ip`fJ!%u-H\M$@.hhb^3r8si;,$M&o.[Q=X"HT__,iU6
%+,+A_=.8l-`6[ofe;=)3\qYk?OSk76q=EhRqGh\5PNkXO/'4(>M8dATEFLqPIQar`olMpnr*1gJ/=+]sr)A@JZ4eaDcZ,1=h7P*D
%s0Sc>P=X`A)Z&+B]Z[Rlii58L)4uBTB)GhHB5Um!IjUIFFuNd"5(@c9!4VIUp(MaJ.nhM0*4sBbV[cP".I(^bHgL1BrNP2I7%?cM
%n_;I'g8t[H4V?iI@s/e)O3C0Kjs\s:c8boj3Hhmg\3+b])Ll&J\R')6*qkNJhRX`>HP%6k$AHM`kJMa)n#KOODpF.:A/D2V_O;]K
%Xn-Qe`BaAk*ql(JR$'(mR(VcTli&F[=#b,"&:F,l<.X+%YNjupk]](apus__\iITC\9-r7oq('_'CLrs>DS/L0R.eeSoLtU\&!@Y
%mq%+*ibXh7S50r0NKWRW#C5$`74P1Mo$,3nHL86"7I:=-]qd]iNTS<Nj39d+Nil7X]H46lp!)GPOlt'Vq%V`AA=krp>^e-Io@I$q
%]n8]OZ6%+;C+(S+o^U+N^+#lHHY.KYEt/>_:rmNGGJqTOWOeeb\S9Lt::f]^qGBEUX?)5%n8S59rpV7aC[D*,qfjN<,7_hUk[:"r
%dme_hNu+^CF8iSq5nE\ZLr2jtKVAs'Y`F".c[">fi.HIV*Q/rm?lpOAZV!A[\XS)QO-c>t$9b,9IGW_]7rki[d7KDm@%XWCp[AFb
%Gc1C[C.<NRcY_:\#S6X^Ff;nKc1MMB5R712mc9j_pVY&^p@7K#IsH18K7+G/`i2/-UcP6&ICrL,`_hmr*phq/O=:a%ia<ks<$,0)
%s3KPKD-;!t9u?X;%,M"qYuU%J$kcT36=(e"F9KJ&!tqb@2ug5a)%e\!hW:ddc<^1r7g"p^F6-"MF./INO3lXq>1A+U`J7(P4%R*K
%.nK$].BDnP9\M\lK+9nU#>XX?A^Xn-@c'pX(qU&[ARaOl*QTo'8e_)F3oheDeQ8$g[o6>bYrr@KG3`Y1`4hd'fHP-<7:P.L=aaNP
%d'"XuDl9\Nbu3Jb,kgVis)Vumg72G]jD[$:<jK`iTCh]2I9X]JD8[Hi\-KDRhg)dbIH]bR*VGFETY:Njo^,]!F4W7HSQ1]2pT*Dd
%AI3N5s(3STG#gV`<5idRJo/O<=t=(^.Xl^jc`P4<52NKCkCKPr\#hUc?8?BdO5%EWn&h$k_K?omJDWZ5A<;qebOlouWcgVW93(q@
%;mgP3hAsYDK<Q62.PDr02\Vn'2u90497,pUbei+D12Y&i*Q2g'C[o0W6*4J)ptnjB2r!Zu*=DJLl/Sl?hiYPk#;?'hkmI=;s#Yhm
%7`GCfNe]epnNVlUIIeJ?>5[h+b#@\3s6kIp]t5*\gU<ddKQTD!n\8Rhi3jTV`9T(e,?F9&:L@7ba5<M,8T*7Vg`@s$rgg6!75iPk
%#Jt]OQ\0R8s*@(T2\uB8#\q"a^RW"_,QIfCFGJWBjlY\*l#?s/!.kNW06rN$F1Wa!l/[#/)AW-UroVt:5WuVuHcP,aLWqJF>@#B)
%&%/-#nB.D)UaJ,O31bto7m;XBqsU(a^Jr_od*Z88I<SB$)BBj/#-N:*IL^Q'NZFdf_q*f%*B8f1?:D<k1d']]34UWqpQ#RV7&(6`
%IJ1\`GO/`5T)5R;kjA#FJo(mOI-!-<'cm(oUBAd'WhjuQeWSbi[=*+CF;SkM:8-=n@)'&XO7JJ0AZr>Jj,I,Dh!rBW1)Ohm!]M2C
%\[XR+dI!/bZ,P+5Y`93c6F#A?<(F,9_=Yr0MXZu"BTG2aRp`KO;IJ,J3"F(PB)9[RMhb'9rB-+KUS]l9iN[ao^I..Mm@rpM,#\tt
%*abZ0h\MWg^%C1o02nqKG=5I0TQU9p*N4MHO].^/blWJe5*('ArS)@pmG$#]f)=>hfPE2=GGsA!Ybm>s%G(J>[_4<].fjQ"qm'I`
%,KR6cp$Iqr^JoZBmDl&\h@>dB];P5+L_5U&dZI7n1#WXdbkjAiG7]UuLX#NuH3^p&FS'D,n$X(kX2=#G*?CYWCCehgh4EDFLJ+EE
%!+m0bk@iQC4$[sA$-R<umi1YEkOJ80^%4AtO\98RBnoEYd\Q9!R<EduLYnf,HVN44#J_T+!:#8hrHYX-H%;&gh]G%EC3SG(p6,T@
%l0Y$4p!1Z:hRpJc!f+t2*FmeZOm:R+YPJ:kDXVJ$h6LlnNH'Qk&!D-`nb`40GM=VE'^=B:P.n;H1aq8DcWin_+#WM1oX6-Jen30=
%^V&=5:Cge@F,rn>=dS:Ee\&T(2-o/ennpD[]E>X?@ioAd#M^(Vh\?O^rUM5+c_!ASnV+C]f:P6P&tZdF$%nlB%HJCUMuS0Lilo*D
%:QT%1M0XhknTo[peWPAsb5gp*Rr[S]4S<VV=Zr^Q9@LQihW_Wds*G3KLg<p\T03.!mG-t2fj+ID^$t@UAb`]u*5pQIb#\CJY=-;n
%r2ss\=+C&DRpFo4?LsK_jS$:C&eXU$<LW@82_/h&S0Re#p"pglAENE,DOTYXs1Il@n[VjZo1n\E%le1rrS>Zd@1-?-DRW$Po(j;4
%57G#Eb6RrZYKXYWBsS;_,n][BZTm@&orW-s3*Cac/K\qKf=-dlN#,iNHe6Slo(9rt'>)!O`.pRJqf^H"53VV:r0+8$Gg33\5MUa5
%J4EDkHN*E]^<`(rs1*:6q_,B?2a\1H*mMIQm^%fbR7%"fYXKS'hOB]>[p>k4T0M!QR5W$&QC$L3roMC^lji!M+#!)9cJ/l$[b#YM
%)>;_5>oZa(3`AfBD@uekq/F-Oh8_?/iOLiOK!Xg8o6#1o!hhsqVR_'Si7>&+i2oK-O-^@^gtHnN2XA,uNg(T/H<9Fud-5QIP^(ip
%X*3c#hEgdW#T23c?asTkRlqmOHR7De$3N3+FDTR9dWbH)^`RYlQe$V57H`ghh(c:[AA@M.gs)SZe995^lcPoKe&QX8(j"dRnEb%_
%h,X^FjYNX6r:f@1(AB(i4FiiIjjf$@2U8ue<bG@bh9KoB_thcCP5%rFmk&K"Ua.#3,E7)hXV@Sc;5skjRmZaBmbtL_Z7?@MJGupj
%2lhS_IeMNK6[-F4qg!Z%,&H[PI>+!Zh>#^\A"$fX"2rRF7=874XrVJPR'/Z_rt"&JgZ!\XZi*U,Zam6a<hJGGUWYl*l>o#gr!ur0
%DI7fe7HtAKQadP@_r3AamN.+?@JB&4YAG0+@9)tpA(p8nh('po?IF2]-#OLu0:,lm"mZ(Wq\K/kE,Op(SaqHB)BO[tD8.@&eZO!c
%n'Tn(KnKpm0Wkk2gOJZ6oJ7#@9m#m]p5=GBDUS51.<ML[gESLl>8Hh5C?+aXLms$'04cmZ,Th$;]3d<>nY#]6ql/lXUa.SUB((,c
%6i!E_^<keY6bcSmihf$.OcR!Yg3`UZ`.P5@YsnBO9;No:g^AJk,>QMG,uYEeRZFD*i2'?bGPIsS1RIg>U^rWO\:_A5A#JdiT!fs,
%iI=\*E3Z,:\&A^KFPFL?@YMG+m9XM3_Q@4us&$&<*<ME(MdhC0D9r5bZ,0uU@"We0`<u?,hS5doKq,M)X<SE0gcVG=4!%mqcl[!j
%qdh>I;=JOC;u"uG=KN'4nF-DaAZqidTb>LS+fj/="V2+Om=!*.LO3)a>]JL=-@KQS_8ErNBc#+_i<p^p\5]YdeS;MMiSNLXrIN)r
%/9nZ`&8P9f*i\)VT%a+?a'M3J2&&1.f)p.l8&3sb&,4(9D+8_VI//ALRm1e+D7c/)Fm`B$E:7(YCo<F102q@ZVZae:!J]E.n8Rh0
%Hu-!6cW=$=A=4V:b#4mUX`h3S:O>Yt0G5?!3do2iQm3A/4;<(lb83:rBjf-MmjP.\GA\M$9\D_s'HT5&H1,L'qegt;(-F^PoDYZl
%&,5L'Aulu_i8NfQD+t`"7<BTbi8NYum9&cFfN..1QS!HlGBSr@duIc(E9/k0@5\p;F4>esHWN;!Y;pX>_e$R5:3ujSKDe&LAG^cI
%::eCs>3FiP*q!>$n5W![(-F]UkkjQI&,5MRfWn92d8MZ@YBG03<0H&F*Zd)%A:)/1QVY.o1/DgDUQ1LXZ$3Un4m\ZU'g-jIl#?qW
%Gdt5c^[Q@e[G^$+JSd7m?Ue&QZ/FS6W9Q$7n8O_#DE^7qM7Zs\E:7+n*M?0dbFHU)]kF>2j"WW/.a.81%M,!FZZ![t1OE.ag``o-
%B;3GL"V2-9*qu\74g.gH4LSJRs'Z9Vm]B)%gQugCJ-?Go<i>EeftdnB0=[MCCNH<@#R(b5mU`^u4$pd$/\Ps,N,LEX?bYIW%WSJ#
%Yf%Wli8NO1Y_D]JW!*]U9"`mB>!$30__%Lk`Oas42MXr<])C]_f):JHHaJB[HUgM+-gaG.%l^WQ[VCSEg7Gn^YoO2n^,/7JE!6dH
%eelYj3dSW[]ema@:Pg3C'a5,omof$SL;temGdqt98#lD9.!W77d#BKhYGC+8q)tc!DM^irI)3_V]VE(Oc+I;t_qi@dCk0cLSjShF
%flU:XfG:W#gK"a4k!A=1fS>mFrGpqhorT:odC/^IDa?^qhqdf$>EUBnmAdq1\@ff_I<fO@12^6aT?fW'SHn:)/Fp%5]_:QP:$M#h
%IWkV)V'f'aJ,T8"ld+GbjFV=-I1tI$s4V$JJs7m"'7Kc>SL5fAr9p&_:;CjkipBt%IQOh.rZ;s%]R0XMIce=f^YUsAmI,NgG#tjE
%Z0ndmEUFikp!^)s];q!B^[=;^Wh4@a5Q:Sh]Dh;d?elNJ4o!9Mo3(GJgQ-j!l#&W^m2'uq4lc(FH0bFlm^mO!:V%XnhDjVG])11t
%maeN/IrVs4NmHM,nb]fOc_$d+lH,5;=4X!+rU8cjT02k/DE`>p]:F?GG's`j_Um+qCARY7hsXqLinESoQOe$6oY[j[:;?JapKtY^
%hYdiIi1")&o?eq(rV#EDYJ&N=5<nu??h`FT3;'bp\GO>@Qeskfo+Fh]5Po[$r+@X?'(@MYrV"u)h&?mmO1$\`mjLhFD6?6JNc@10
%MB(76-dH#Q81Oj!Xhs'Z(O):NGLDk@kPr&ahn+$rack&sS_<[?q3lEjq_R][[m+t907J5p?2`mA-gm`_5(EA"oipN1nnCnP$d\io
%jimVho,lfbe_;I5+o.D8EjOV7rBn'n`IkL$:=\nP*LjULX5!%&_ki]Cjl;Z9d:+l8,&a#3p"nlr`4>QMD^#Ycnqf:X\+LDI:OW!]
%g-.N:k,[)t+0RsknE9SU%o/Y,&FZ5Nqq:_q:7V=Hp$oS:rb8gKY<GJO5+I08ID_\kjPRZCqjhkjn%/JV]@Th@i<!;u&jC*k:Z)*;
%ci3e,q=1APs3)=2>Q=<&2?#_Pd2tPnmc<(_rsB'Xdf/mZK@AjNf1r<<kq?uTEs@+W@t/pij>m/2SGi,,Z4;UOG]r3*TDs#I-@bA7
%4FDPTl%MpJqsL@*&"[n_lM5a@q%'O`E;oel/,sSOND&`dJ%0T<q%)HD%lZ]15O^Pn5@.^rgX+&k]eFs.KjXbqXg)PXroM]qHN3WC
%D=uF$>roUg%kFj_ki4PVSnCi[]C!@G7RsYS$9p]Pj8&JZY<Dn(5Ib]Br:S5DQ_!$2mPrq'T#DqPL]781+pA@-@N0plH5i%3Mm9d!
%I^'BDoNC"As1C'iDQr$I>+kOAIuN]cIIh(k5Q>mX_<^R'Ndj2JhQZ_#X`%HOcHX],2*[/P00bu=]RK%W\)-rRdG$U_^3:n%Z+?WA
%Ics;ZJ$j%ImM'aNfD?8VHh=qHe!1L$*rSiZbC368d_>#6UT5KNrSZGR+5aO_T&U3npN&]O)pV\Pqr[LN-a.srEB*XCD'WS2a,R"b
%Ur>IO=l!t>^Gq#E3]e\!4rSpaZ-K*urq*nqGHZLDCAd<d0?&27m]CHBIiQJNh7XKtVks:,DT,8LfAP:]X.j!A:_+]VhSYsL_1,;W
%66bCT5C\0fZRFI0C3]\/I,%:L2ho,V&,G5$BcbE:rI/gVhbW23Sp%0JRN;9]++/:ocIL[IIf'l]?k!A<Ue6b5GkrdAe^mRN3VT_Z
%LWek04>W#kqe,)L5RIo7@^KEEK?j&$/FN&#;bJ,l?X;RBO"t7agk+/tF+]FhRnc;f?ZYs;SpY/lk]ceF-iK<7n%:U65!5m:p,WnI
%YQ#Il=4^J``D9:urd"%;f,e5jBE,^,/q<HKA%,`!$k$@a2oL=j3W]HHk@_;F>CsiD?(ft*fD#4?IkPf<gsp\N;fD[.XY!-SFc8-F
%Irj_c]Dq#gb>4_BJ+'KkRLN8]pHFk!`TP.8DssR"@`C=U6N1fpnaj1!T&9M;T5bgYkGi_(edp`'c&`MqT6PkGiRB'ChUocoJBaQA
%^0L%M5JF_:KD=ttb7;6h<+%UQE_HkLOe'@i\).[n*aYr#W$hO6[siJPg8D%>c9J5/mEaD0?k)^q.lY5XL@r-mC$K[@``GMDGlI;2
%7Q8k3^,)SDRB'f&^ob\-3-FeE+9,NlCK]4iS/.H`I^@sL5hYH%g9MhX`qc(&*#kCC.o+Bt.BgK`^HV>dNn'`'5UPV_";n#)%-?Zc
%03<;J]AYL5)m&/mT0J8bTCh8m-QXp2/u#B5,MuD]qs7eTr-%qW-h6WSn_We?F_Ffgi;hQOe=GHCpYj_&D*%>Qro*Mjl=:.8^RjjM
%m-u"-fG;B.mCF/)K5[BmK.b00Q'd"$"a:b.-&Xs9>4(A,(SC*Ea%A1'jjQ/2E6RUOmlCsO!E-\-%"d?Pjnc\j+7bN[3Lff44[2=<
%3O\\Pe!;5_3pYNZj/Ul%jQc[2e`HB!=abb8D=Z_QkE\KRCUSArhnDr0MiHo&?2j!Sia%U'5BdJ/bhI1H\?"Lnr+]lePqd>a$s#0P
%(2NNjZZeT9RH>#t>edum%Y)*)dPh.'Uq)3q;g!)tJ%Y>RG"tbC..Z\I\%TP=G-W9i$QR`V34o]?9XLIJ1F!BJ6c^H2U`"/s)e-JB
%n7KVtD$V"#LGU4cDaSKl%VnNRhM.,EplK++iGFD@R_tU,LUSFe=lkRZQk:.$b=>,ZQ1dupg<YKl0#R\6CS+GUS6<k_E;%9]>(^RL
%$2X*h4KuOrN;bp<>/rhJ?IF)rkP`09?RqCR>Y3fu4(%HHr+DV)&'pB7M9#46qI/UY2kT<G*dh,JP7SVpn])[?O2'KHn@o?Rs/e_g
%m?0^2p29qLIsPiic2MO/VQ\+6SlopEIKi^.;b7">p/ZSq"jj0BO*^EOV4[e#E$&!W0.HJThY?lTq8h`s(0^Q's3^MkenC^q6\"ae
%)/(q#9s<U+s6oljs4!Y<nJ4c#9>1,\lX)mVlbSc<T)ATRmuNJ>6fQp3s&m,+Z1g0uh1'hFab'iU55;n=/jI)Er8E8uc]5b]I/Uo@
%QTkDYji\2&4hgsSpt5t_gZH*'jCaDf>AWDVo'hG/cM`.`EW%N$qqJfGG922)f?HPJ?MsW*Y:a'>qoJg0mK``']DVO(kA]6`^3&bW
%5B6;^i(U#5nLj76MjJqX+8pKPorm8fF86W]EIPk2Tn`R?hr"D8\(ik9Rbg/Hp@eG,:Rhkq^H$<)g/EA.=uN2RafO1^Yf0>@o^6UR
%Dpf1W?f&Hfr:1A"++2Cs?i'#^YJ2`_?b67U?*#-N5J9:Yps#l<ofp4(o%f)kf"4.OIrp-eq"Og%E35Y?b?_ihX;SG?BE#!j(u)PX
%(]C[19+e_er]^p_org5/FKIaWq7L.*H2ZDfW1CDifg3esDpLZDPI(AWA?Qu>O8l)NbJ+O\qVr7C\FX?7f-sDcRVQe`8&,#WiXXdj
%!q%W=@ETOu\+k`"X8akLK,pKTeURJnd]\QNq3?I)ki+h:GX"F+g32N;h8PdB]D<&QVYc:$=Q=1OH8(<9&"Oun[<#DhBmf>k5-KD(
%2?*I&C?Kej4bLlTlDu&;pI9SO1l\i6RG>DumX5pb?`he`J=GKR#9Q;GIqAT8qs"C_N@T5%[G+L6PRlg(\HF)GmC?6%rP=9X/iN^\
%(]R\9p%3qkn,7;*nu!S%pr9Ge&RF<X05Z_]m0#8V(f"AKqVL*-DX$fGJ)3:a^L(8rIsFl^ZS13\nBk#rZsPJ6oDFU*YP`A>98>1m
%b7,J@H@G0I]72_V+niUZ^=(.d>lLBK2U?T1U>bZEQQUdm>;sBg^Dia$r<YICn,0go^8%%[1&_m[Vp1=+9lBHs%t'7d`BcY?.!XpQ
%0-6auo%h:2E(aP#p",B\LKl7Z/m`O5hej56$XmP>i,*O]?YF@VAXX_3j^UB:hu>-rQ>p<tW(b!PmE;sSC?j8nnZBns1Ar]#;n=fh
%r:`SVopmnf%s74*nqJ1"\;=4s[`0^T1:bu7O^LP+FDD>2<7f]FM44tm0t6(F.iW"=hNLL[rl:XRO+(CTkgO\q?@$[4DEl["_r_oF
%U-DpfPm>(<^HVU#f:C*/5Q+spa\]tmr:LGSL[uIG.54PSWc0cFC0tU$GP*iokhH71X"7O6]RJ_IE[rd_7!Qs7-W>89DUljNYC4",
%9D.Z4dmY?cDYI&"rb*lh]C9c#_]CIe#<+Zmc@*.\:cm>hi[0FaH2Y[N(Z2a8FNSIdi8XT*#QF#_+8KCsg#X$p2?3Zq8R>Ka^Rr8\
%Kc>15pTs=YkLQ5A2uf:_)c,%7s5MFopr7[LrCh]Wr8?`#T5H[kMl>7N3+ujsmGM("_)m:Wftft\2"UIKa\Nr$,Nf#,:g-&\>H=C'
%KjOK!p@gj8@_4T^rk!<NI<KMI.5q%tH%h@1@\3D)PBYpZqS,B,80;PL[\X.G)tq_[@#M:pLUW5](([hj>?53>C[fZBRXMi5mrK?,
%Ve684o[OH8^#.FQLT&"VUC;a?a#bZp*pl<IXe"3n2WZ+=o0We&fV+?\Lqd#O^sM(9n%'Aq_,MSkcQ&n,)d^E(BB9'gR@Q?en_E#g
%gkrjnCR95TY[4Q*]Y3X+CDW?+_GpK?o%^`*:/+6cBUKZt^6q1"r:B&]_6Wph59A>)H+fg+?iB;m%mO1pUpkiS>:.TXC9)itIcfJ:
%^YZ!ZYQ"4HpWo>+1),$0_(a0*C^:B;_jV0m[ilI_5,9'9GT1+);gKNAip\i/??9d9ip\i/K[$48Lr7sYR^>GN&Vmh=i4V@^)0'm?
%!il*jc%s9l&<"c"_jD%G"7r2feI$S<McIOW5dcX8[TN4'%TLcIoTiVPWt&*E6Z7l__pno\$[c*dY<9D2lGir5Cc$S3i7[_:q+/5J
%n\MED5Iu=,hZlNKpuD382uX?fXo5a?m<H]tr$A-2qV>Z]3Q\1[qbtP=6f?d,^[U=;jkoMiqu-&[4&>i=rXR\ss6TTAO"VT)kI@+t
%4e@,sprP6;GC)G9rok,&BX]_EgW0<RNaKSO^AgF<rpuZ[s7CC1r<rNnU\PRQeBl3Vs5IshN'I7qgA]FgFSrK*5Q9`(h`p7aJ,f3:
%OQ+l>XS'(VGqCn?O$?TR/no]3.;LZMEZ?[E`&.Hif7L'D?f7of(4BRhcXfejBIL-\V6*bLNrQ/8ZKlM;osN_)ePdn2[T&mRm&T80
%*ij2'-b_<qJb?mG>fOS3>?o>pO+C<G((ssqf:&c#jYa.8)QgKUk%Ye6>2u&%'uNd^]r&Z4gjP[*eN/$MFo6#ieTr27l>+CL;8%t/
%LnU+(cCW]l/@i'_NPDI![+7;36#CD_a1rQEj.G#QUA*qhbc'RKqO$_3UV91*e=NbN2B(lu898Pq--`(V=K",Yb`*FD\%^E\%;["k
%i]13hiMj(A_7jtaQA^"sUrBb&@cR+Bg;`/iHqGHl(7gF&FEga-CSTq8.4mEWV:DXn(_^",f!3cq=S/,si]B2:A("OXB4D!Y*056O
%k!EjRXR*r']3cN#Bq<fEdkT+]@p*j1>a:%MHX7)fCB_`%A2e,?pX'4h(8cdme40b=#Bi#f+;Tp2O/_D)C(a"bn_i2+-rhcO)I"4D
%%#liKF,XfNHTR7RZ)cU2F6ma[Nni1;@dBPb0`KsC$"IXYg"BTXFJ,o.WH!s<Pd7"WYsm@!R#TK+mFs=efIOe7Z"[E=:Le_dG!EQs
%!Q-SNd!7e*HF0jqNN$;j=i8'BN5$(8Ug!+8lSp>'"/2uCT=I!H2Y:@\c<\,CZeNLDU/@g$O($GV.3BM3f\"oFDRJS(3hL/pYbC`c
%hHPh2/SQ2bHhpl<?&quJn(Wp*^#4<KK85oKOq["f4?TK>59*1%HuEuanPo.m)EH&j]K"OVNQ-\`pZ%>p#bKGla.V,&2e2@0JZas*
%q/LFYnD'5fIu,a+Ffj&)/2a)?/;f2o(csV)+U3QPUOQLF*jdRf(jdap`4]Bp7#mS?QG'C[IbPh`CY2nC>9D<8in.)(8VW8Fkf.Fm
%3#92mXPU1D67`t7Q>&2Lm.&_1J0*(l&928TI#*3q%@O'L`lR]!jG%3!CdA/(2iYKf`[bn:'f-r[39RgU:.N,@0W'.Yjs=1bPr4T$
%9Oj!&T!^;r*]lHk2*3)YA]>5)6c9[pq9dUmc;G\r^"`?'YOin-S]>qRX=(`oN6N+.&A?mO7Ma&(iYocRnpG8$[V&6k+j]#b3C.-m
%*tU9:/c!DPPe>8o&8*_VYKC]6klW%A1"gi">AneiB6N<_KJKu0LY*Ot/`AV.2-<S-69nO/N[r*-VAaO1LNjdj6S>lX]o@$?XN$:Y
%)'p!+e[Q+S(nc0o(M(aLNBKQO&"-F5e75UBmT`;]!qF(GPQHP9`m'7(E>.oK5\#jW;*5VO,h/3j14/WXD/=gVoN9/V666:M4U`oh
%on@f/n.<N8X;!i9$Td^TPkCFU.R)n"O*dm.Cs:9..20_G&i4u$"Ni\NBYf,SH*/:qP/DM()BQqjkLmgo>G>\b*IZ9oQJ<27oSnbK
%VeDUB*3bXI@q"R)*/1TVC;G`FYD>/8BIT$G@9eH8BsQ,Gp0;$9FP%1SMF-*jWE8aNDQh!U>VITJTB:a>Z/NXuENa=r`eGE&L0s!b
%co?eJmY+^:]A2o7UBOkG]Y;Ecq"Gp@oW'_;N:/7+d.$iPe"*jTY3)C>([eaU^W-FDRi&c.%D6mFk)9Zgr<-gYQmaG!B^)KSoeVoW
%LWCL\`>qb)Tb"EER@_;Vk!D/Adelph]Ge;HfbMe`2)af+[R=p4r%8bSbb8`IHAok2OuaP?OR;N`cPCAP$q2jaLQ'4r%gs=$ca:_Q
%0&Bc0?0mZ)lYRX08uXjT.PsK!A=nI.0oeoD[Mb'UMh*AY1(4WET'U9@?gMGGCZr>&j&8Q]6Q4RFqJt"pd28OSTd=5b)/@s$ZSCN9
%=]B[=j+fWcXHhr5m#CQWN?PpXTfLFrUq)fO`pc0s-'%k"'/Zkn&gU,j4!PiBJrH"hH.iCT0tI480e]q'cK"[Z>R'3q*?o4#'@_;`
%oV"H`29,ag]H-RQlfXuQl%-HSaDV=FK566,,jLe;G*\WR5=:ZM2`d!52f>T#ab8NffN&;f5!aXY1&e#h_VI-hMo.5=b>;em/%$r$
%RD6_o)OJn!dlm0TT`eB'38<nsO]NoZ3om3P+g8kYlgW$$r)&HN[I]^%pFdJS(AGeFVhU5[`lVTPX@`*[=)[<L-J4`%p=c3WH*8Y<
%ndHTu5+=LJBIUG,?g'648%t_U8>Cmbj19@mO/#-1E3,^V>ln[r<[oPn1&<'Y6\O$K5E(m0[1-W(A)\Ei(S<DR&[Zd4)OM%*_[10<
%fJ2RL"50+7)!D0$MAI1R829@Cl86m(`m6dhU$3B,+aP,md1WLnPLe'pHH[3(1fit33.uLk7>9hBqLpt_)5p8n"%S+;#Y?suC9QE'
%c<`;1L:4;])3)NLXDF+Z2d3/%Zc,59KYFH!NGZps*Kn*:p#][9$r*m5U<nuA[%>Z#/hm5Vol4(&G@U/Ad'th^+1.8k?%^1:L&S-n
%>/Q@n:tkDZr/g67TOR,4U('RMcIpQ!3hNF:(Wf&AM6f":U,Zb9=5DLD]gCYrVX)1o)!s=sO[H9b8&\(P'"<"AEuRas)N@*_#s8nh
%>=&9lGI\a5822t?4W9)N##3K<R2rbuAB24<@G,(-NVg!MWZ,#lmB,aHi[.<[FkAM[2oeg>N">;S1IskhKOlhQEEq;1(Pd==QD'MM
%fiosmS&>K1nG)(G9ep7e3ZD+Zce8sk@K&C]15N=<mFRhdm*Mag)i&=kq,m"Y"#`D!bm@!rkJ;kla86OI>1Nm[.P4"V/ObXO5Y0jG
%:Jm&$)Fckn>`N![3c%(gIXJ_u.TBaP<7N*-@OlMOC6=%0U#htk6Eu&o21&*)J]iBkRF`b5D!1;'Z/_MWGjNWD#Np,rl;!($"eX0D
%oTCm\RXiZMTYYY.A,B.mJ;o==gs^/?17mG\l&rEk>#/*<BmkX[N<OWB*Z+StmDZ?N]W?'BHO<6.Mq",(0Qd@7'I&Tq277r7bn3G;
%d(^e^np,Rm5$$T_BcLo(["0thnt[A=/dj0fe(6pL!<_)LkH'$.NbO`-UWk$GmA171,,Q*u&>C-r-+,oI(h=rK'8:KeG!Mbk4a&^4
%)XE>kN@kf\(uXrBJ#X7/0DfcpQfIaXYDca'FJbtNMQ40,I8;B#Na=eB'i'$hC)Mn"R.Jtg\uOHM'7;e-.^fbFI86QM0PI90JgCqH
%18+O*deq<4c2o"S2)T5MQf('+cm.gB.OF<:FNnBp%kTWRdDCO!kti=K*IZUuN#D=\IR!WF+=?%BJhbWXjMilBjm>[-aa:V1C27i?
%VQ?8&>dnaXPlc@UQ]s@<m"B_sUM*>q0kLbS(r>]5_6HRs!%.h#/8MJ<6W8L1:lm#ZL2hJBT"o@1ojuJIh9c',?&`>jNMkCm\mS=_
%:4`iTatJ*_@kn"H*0S&D?J+V27M-SCnP]k4Lb3SW5h6H#0g8,+%k4rk)]"FhO1G)0,W1"1F=U8*`<Cd%<P<JjZR3]O#H\5YaHUH3
%?"!>pdn?Z/@bV=/9_U0X@49i&PnrR#lSr?o+XURYcl-L(7n+:>>$ulsF4]a+5cU@b.sNf8^<egTOTY2EL=UT6r5uq$V`tkIj).C%
%$n4ma!4"\T+-Q=T76Cak=M:EAbhg?$.tq#Gp6^e2)!91$XZ%^KOEV^+,[5LH6N[+Y3K',aZH__Wi,O;&bQYKHd-QOr';h8DbN+K0
%r*U)*1qoIDFO9OkDLIo4e1S8.9el\MR[PF$0_$rlRsHk0ESeqD0P#\PF74-6lINgHPtaH%JQLa'fmd".ck^:,"ra8c2*i7E[LC+D
%R(AMjRD>Cdg5ZZ0H/Q@K$P(RGp2\<kV:hk2ZD5f)]2jO4%5;m!Y=\*Yh7+,Uc#YC150'q*6QO_rQ/6X2d.;t-n=T]FLW9S>]J1>9
%@^'JZ]BF5,jZ;3iG!A5\L3k"k2il3IHC-(=%Q&!9qNp-/Cub<P.]6Ni/P]sHY^5ARXV'R&iIeJlbo$l6^[ahBkDP7pHTIo6s(FG>
%&OPH1r8\OoN)\`0`kUXZ#'Aq;`EMO\'18#Z2GlOo&C_a@C%rr[aFdi.mR!LCFlKgH(s7pl-E,R8$]5Z&ll`Y<T+q:o_87')+2D8]
%J\P,-^K,]?C8$>(`["[I$!+uOC)l9tCs3LW?E$CEMUdLL14pPuQ__tD"&>Vb;d<qf[f>WlMEh05.QPLo3CO+$3\T9.UHAH/d=/Z;
%;%L1E&2U'0#P0aSS%o;5.@e@l'32]^6Mt9@QhW>=V.c4n=MsZa4Cig(\o#.$TQ65BIn:l]'o0g\E7Wut@S[%(7`L:b/MMQ/cKW5M
%j<*;dl&4KL&8$o]2G<]&.(4msr2]&>d-)4dUVdcTSsSJ>^SXr>/Zq(aka1+WTI8WDn+cb>^E5SKKBD4[s7c&Ij6QF]r,Uur?dGnS
%rmtMtJ%>1&dg*q>T0IIGrPkViO]V%sZR<LPqXsX*$hkb#IIR'mB+HUW)_H9+5C9Up?@)IfDD.!if0=`V9VL%tpDuQsqsj8JpQ%Q;
%mEXT"N^"M%f\FfUh=10*m-!9af40o#d;AomeP?#3PGaFjs4p9e=9&#mWT_1X!:X)RPi=QBD>Ed/d%jPY_pZ=CPj8jkG/DLbQ4t--
%gTXNAZ!^V'B2jYIon@Iaq^rs#Dc-4/+oOoh9.nQI/4qYb^$_bC!O'eQ39de^DZN/]5`8R<@Bau'>*rT)(=q,'HH^Na:g:^6huC04
%p>%mAnS"giF+6=%D=6U-*&dW&V0#e]D\B=ZAo-DRn$npDIQT4_$h`%\C335!\jg250ZQXmid*ZLiRF=$?d/'#&B'k,9oh!Ar,l3#
%dgSQQ$aQh0m3(2N@1pKP!Z/Z\4XMHY)L$er8sZ=qF"[.MGP/>++A$"Qco]G2!(Y>A^7@\"6C3Io:LuPWS6VPY,HBO<-ZrA/dHJiK
%0W_A"6$+cd,Pa6Qi8euG+NnO/YrR(e>ZGI-Y$^fT\f)dM4MUOSd=LEWoPj,h@&.h`j-]E$N;)BfRlAU<96W'0,$60UL3I-8c7K)I
%;@K>PFcD]Q26c5c_HY<d:_?<ijjC]d2L_+`e$\P;3m3A+4FeM[rk2:.%joT*o&c!d)];]j+,^NYEoecZ@\],N)<i3&\A3Jt=;.6K
%:q&-1L\@e!*H+VMnRd<<4,Q,H:SeOQ[?cO@UO-cm=l,j8ZV>VLbmlC&US-s7!Gip$!'e]@bd\6jgXpf6)hGW-b!pK`8cOj:!umSV
%RLUA54_3Fsn%AeKV9?mq+EILQ!>-6-'p199c*Ag,:.$CsOUc=/&]Q`>X(mgu+$/RoMoHMH^"+#@m+@tU=0C*n%WHCXFEp=<iLG"1
%Oh'JrGR2^6@X.%,acYdtY9rMZ6]Nk+0^aPTU-([edMP_?N;"U0*91<!9SZ@%YkOSs7e9MMBi2ieq_loX6,4'S!m-/+dL1C11DHOO
%Gm-Ti";re5!W?e77gSZnau'Ju/C677G*`9hKO`A&K34tFG,q/3J!\V*Q]jX_iU9M!2"!=P+;$:2];N5#fd!#<8QQ+K]49aj<od#W
%WQ=0l6e74M`026M[7+qGn!lO16%ZdC:Ff0A!&taOQBDCL8Im\5#cRiMD]N8E_'OnVLV6KX*J#TY.(Zrln.bQ"D;TPUYPg3$$)1X@
%ASNl)]Q!>ro7p[;I`>*gH"&cg3QcE-@>W_1"\MQMFL=\[.U`Pe-Pm'Us6=_b96P#u:[[iX4(54DbV<,"A2n0kMk^gh:.NOj:GAe6
%nZJ'.O:#5r_$B;+CK0=\WJ`\:5_8TJ4p;m-R?'@4r(Z)DMPkEP.m[m#O0oDDps=2IQXb-Y6VTt-fmN%hBa5,n/r-Rp+YGZNF3XX7
%VE-#tOPmh7<ZE^O.hZ'*o@`TPY#8o_[],<^?@PH>ePVIhF@aWp`##Q.Yh!jG%U9,<BR4Us^fNRH2cbsJZf;KKC$:,Z:gq/OE`W'6
%4,9o`LdGJsFG,;=9H9Pep]d>S\e$V:Y%,>D_rW^MhCs&,28EuCD%5D4K_M_r,+pX-E^`?/irj;YTlF_`Tr-ou%1*Kn5_/rN26*RQ
%5Rks$0fd;%^lStd$'6J".7lB6j.t]t!aGu\"s6q.9ScNJiNE4s!m1ceB[dIV2mmY3YbrrY$"tOH6P4>BNb6rD<H7CsnCq'^&f:us
%Z_:S4\6&l6ck0Xm(`l@j+=SQ-2?!kY>Nn$Xar*\L_gTT,2S]M"4uEdTA4$mT<WbAgRMd'!/T;]tN[0Pog8L)J36Q'`6fX>_dfkZH
%NXR052`7*b&c)Rq[d"Q+?q4K7k6g&:GT95B8Ag>KhcN,8K4Bpji)7R]TOI3ELlRs'E#NR%obV@OkfHL.pij^Y<DQB`lhIi,OV^3G
%&^lD(VCSBr2?u/M^r^gQL.LjF\o-B[?=W:&qhOF6EsbeAAoiV-$M\-5(8G9(,^Ju+5sX4/&YR,LDlI5?CWmfXK"bp1N]+_Ra$1#;
%B+-3JmMU1$g<j2B<9b(?*S1g^F%ccpM2"9QaXcQXb8pH^+#2KJU9)':80nDt2miZCe+l1:\`8W<TMm99BE7B21%S/V(BHCJ;`Y/o
%f?ccr,[<st[Mm!tC!7d;:O#110PNu:;'m>RPd"i:(;#BXMQFsh"YJTX&BFSbHNZJA;ZpD#*5PT/-:QkL#[fGFmT(TOL=T'TXcLHe
%L#OH1.-MXur<Vnd+dQQN^oNOce-eFX#[td?[`4@&LG:@!qD\%-6Db'A`O]Ib!+#)uCN*H`BFY=4o)O&E`poFK05qmI\psM]]OeTo
%/]8AAqgg7/d5=HU:8Wer%ai>VluS]pmiHZ\0^`b.dl158k(Pt;cm5\,GjdTrD#U\pUgKmD!C@AjK9u)!VEJJ"*s!nN2aRN&fQk>!
%6=gO6_&i*.ent%JTgX,C3`f8m>3O]06UZG7o`RT5j8JmUQ;I'\,7[#"I5fYoU=$5'@K(:#6lfZrF4%O*%Dt'q/LcAJBLmOk-P+fD
%i_+82B$+,]3!iWY;IKX3&R\#6n<QDa\=Tc\D`Iq,:AZb/B]81s@U]a-8X>@r+Dh!ibj6f5!gR^>"m[Z'1@mkP,R@>W,eal57b)-`
%6sk@T,;hBd7#65_$N([nX#]G>TWn^BZV2;VrPM1LD>'jb!AI//dlHa*oDfTY=TnF6nd]LnL!e=fn9ftK+mUuIU<=406ctB_OPs]h
%$3LYUm=rih+8HbjXA+aQL\09:/6kt`?_>$70<?j],[,5mRi@rBop((6`0mD.JA+/4eL2M"H;=pf1"NLP(EDUh@MV.P/df8eLk"t<
%!T4;l2_g"Ko1@*0#F7$1,(e;XBS1O5'b>1cGZT9)[(jgpaaNU?KMnTgi95749A*O8G(>oo;cNo"1Hket)1,!^,?28M4)ct=N?V8q
%[@L-F^hJ/uk8'i^hVLgOK1RXE')3mj$,fTK%hLNfG"ElMMq,g,GbQktbarD)Ua\tT2=XX4-ujh!K;=(d!i=L0@iro"i^ngMF\Mmm
%4=5<%VG^3/l8(X\/(0=-"BAY!Anh\5)E$I]R\7>"3\dGCTuS^kDTe$rG[E!!@7*ZrAhbD257U.P]aUSB,-9o.0Uc)D.HDu[oko*;
%N*tV0g+eE)j/]Db3(-PB`bn5b_m!WimfJ6Z\V83s_5cK2QOpKL(n9N2#$n.L6)o)9"VV6Y%QDY7,IR]j28a47ZN:t+Acoh@Y$EPE
%!=XZ=Etm-H#t?W+-U6E!mc!L@F#Q.V@4fu-IR.$B=)'XP$qM^"$dH%E`7lEeRGnp*>sW1K(:cg%(E9`#0oNiG;qliRXH6E4SOlu#
%4KcJHW6=#7fn#O"$V[fnAnXWhO2MiD^'LaCo?'$0)bZKG_#^9aG0(-@65i4%OI]O@T;:r>5JbTPapMYUr%5>nH_]3nj?)#u2/s@9
%-jk36^k`q>PoPLJQasntjqbO0pD3.,!YjMTpf*A*bPRQ+.>@iYkFNr46A>^`l!/q8%GocJamLj!V!R`=E0K>Y->l-*[lDnr"j.]/
%`TXRhFS9Q#B4jdL9+MJC]+.rjraoe/dVb1gL_`QYHoN=l)u>(eZJO9.HVq+_6'$_Raou-gZ++d.Q&D(b2e1:)Q[+E&1L$ep5jp$R
%-HIj#n^<UrCeP@r6Y!83p3MdsLg_&[A(s9c$'pp43C:20];:D=X)M>N)\WI,kDF8+\:f.4nLeCYRZP7pm4>p-huMnOa[(c>"WhM4
%>UbE4&X&ES/QGUe"Di)6<_<tb=!7(>Tr34qTa"b[$?hRQ:K/,M)DC`JS14Z?R@AbEi&DNIR4bpA\t(<&@]ZGnXiVFUcj?KhoGQhI
%N:Bd1J`>Q)E6^FuQ<Vm$R7)r$j@'<h>YL&5k8%q(o"g,g/3-TC(TKq<C5,l@5-OY`R$cP=YSM6'1+<l^)&U+V,8)qdrj@<b&>J82
%7W*'op6q?&gXI#8cEV?$lL7CaV9C]rFn(_\9b\_S0:8>qWrXkiqqu5PR[Ci&R[CIO8q0j0$J"q0@$Au[bdleOXO=UO('?r(S\$Fm
%`Mjsd6t:gs1_P9GN!f$P33R.?esk:i;OH@=jMjlW(P)7MQCE+d.k^WUdmrq1WDQf'*dM%g2sO$$JG2AK6fG+uI>2J4A,r`(':q!X
%^E66##8H=7W=*C8WmQAWU>c[$CpaDPC<iU%(hf#HB9b2c3SRgsqX:O='kAM3/8.bk\m(Kbf^ks^B=i#C-3cO9M/L\Y$2K-TB:A]W
%6CtO2$4M;mFXWXnG/2V_K:TO_<)eKMiCm<ApXsAqe.'jZMh2o\M$SD9LGc"h./(@^ho(<]H8?sJd.T><BDbH=V*L"fH_lC(fno(V
%f]Hc!b\rH+=JAWr6g(d/FbXbM21Z/MSg>X"VAA<uX<SQ,?'"[*m<uh#[F)U]L=N;_brEr\V:EFLc'C+[F;4)[HhsGt49M[W1sep$
%+^3fJhUqO(nN6AT_hbrdJAad;+D2e&aj3_PrHT@!q[gug7A^M9"!.lm"'?i5kX\-Y3cj=1V(dt&,.\>R"B*`r6Nk^N>Zu8;?<to#
%#cbmH\LFX:h7$K1K[oTb4.>Z`FWD-+<_+2q\U^E-bR.IMgip_:S+0]M?8fXtn5@:GD(^?u9ibbVb)s*TKMWTXTU&bnDc5R;NY--D
%9,Aru9dMr^HTCR/MAA:NBNciq:n5u=J2a1P<<-P,d),mC*u<WZesjlnc4YN1.ERiISG)S7V+=;]5D9UecEsNO_Ln/]Z"'-Fc%SGI
%"FPKR'/#Sc6f'jA_E9p?FJ(Poo?f_;=WCS+BuR')rI\>dDn5b'Rj'jQkO?sjFb0NX.Go!][R=!u"^3^!1a6C3oE!/@7VDA#']kH)
%#WZuR]aikB@H[0OKqAZ](\W;EK\*@DWl-eN)b3_R#(@q"WL<![SI&3H![4+ZV3G!X%VQB5XNe/2Za1u(2`DJSaIDl?NCHSRc21Vf
%;o>(p\55"?/UB*<036d%]WC(sfW[pl64rJ_O>*'/V?m<Wcb'64.9.:G<8l4K=<)4(;d<e%f.\I0r41i:n#Er@K+5/ni/7dpVQfSF
%.c\kZ#bu!M_;n2*/Ake`(_>F##'l4/O]2>e):aOn0>K57/_$2s(Y[@WU?q/)]nOgIR>OU4q)E9"ajMLS'J33W="R62-D5St^(W*@
%#_3]ZVVaP+KE4,q7u@TX?(M:)3Te4li/M,8!7R[Ge"F[V,W%E2&+[dcZ@XSM_WaZ'(H=nB]<W9-LJq=]9P>E]^=*Zm$rkR0WpD'!
%,_7R7MpsWn".Cs=)bHp&;kOTfHuBnHq?6NLPoPSq##71;-I=grK2'(n\!n:jD@sgT!31t\[<2AOJp&=nHagCo$gnbJH"M!gQns]j
%VI<m46%*1M0!5V1-MM1C(p92C+Xt)%&VB$U0UU\W$d2*6\%#._,_qSABn,>@KFi)gG*A%j.GElD9(F3K7DC3Sgi@'s9ldcH]Yj]>
%JU:)!:5sN<BHq1!6feNl)[W(lcnlBB#gXV(&pi/)b=dd,-;Af2G02j7i/KAYm'Ica>c)?G9d;sKoSNsKJS"u\.S='a$^dW=TuoKM
%k84]\%6^R.)#T\O_bVp=hW[]7-L?L/ii^O`.3f<+/PtkI+HN1),_,BM;6tni06VM:PS/r^l8p1onoo;O3&gIrc9Ced4^p+$0%,Gi
%WPRrDRD+P`9e,t+04%cM4e!WI9Nnotp;6Wg3=&X$5XpkbB2sClH5j)Z(]d-"SYjWTa[:!b8FubrZ%u7RZ*um9r-1'HCDR:&6XXGI
%BN^I/[+Y.+bfo$5WR$j2emq]VQ+"iL+Z4*[V6?b*e!eMu9^j140IPae$ea;RaJu.<2d2TOD<"NYALJaC!FS":+-i!eh+^FO8l[_-
%d.0.m\0FX(/4N)[3HPN&aWW>T2aX#YR;:YT0+:enmX9!kV2VG8[+Ji5&SckTcM\G3e%kr@-2^]adY1AC#W=;uASCQYa!3HQECCgG
%%([("<,`]5*JQK>=>CI$_'4S3!FTG)'_#=Go\,U2'Eo'o3^aO?`\rat!O9Vn[1Af11_(4EF>9jdD/dD>@2+]g#(=U$Mnj/=\l_]W
%/jPmL)MLIJ1BlERHAf<OX.is[D.shhFi;%PR=Dp`<3Pg:=M58Md1Cgd1hO7;+:A$Jkpr,1Qcq7B9hOf;8_gJ;r58bn6sFU1R$?,5
%-N"QQEPO=E<U<@s0j#6r3>"ZTWu=XHK*$-%[`a=LnEs\9Ud`De=pdQF0X7>A,0g_g"Bt"$p5Iu%RWB5lK+NPnFAG,cdhHc<$=aD#
%=mFDN.72<gG^5gm2\C%8NKpNB-W`PVJ3aZ%#XG2!cXXc;'0>BJh.ZPs[k$+.9`kUJb!eBk[%W:gXNUQ.Mp,`t@bYlC$n/AuoT2%p
%;[*8YJoA2t*Q+H6]_iQ#6G.l?h^!:<nd\;7&Rd4FCarsP=agn8W;UmOQ$R<a$<m4C+?+.97I3NHTocVqB1(HrKWSiF1m/cIQr+*?
%.;mDg@%789+CSH!Tp'^Jq+q^`FeV?u->+>V:cKV;!rjW'lQW%bj62,'c12O!UksI)&d-i)33_>o6/%=_YV+#8A6p\V5GViKDIjl`
%Cd!<,.+IH2"U)Lpi<T](&',+Z84AGp2FO);1V^rD7P9Z,V82<uZD=I@1^qj$J=)0F5T<^#Gc(l9`NKj.!2?/*Ql0b&K#PrL]UsX^
%"q-l$:JO#],u*IMAoQ:Y4V1oe;#!iI%f#(NnK4F6?ife4,Yq5M3f]LNe+*ME6DbZ;)h*7/-f.1-hQ/lGe;Sg$h%XC^&Og918tl>h
%=9qZ*.c<_a_[dZbobXI<JYa[n:rrU]]^8%5;4U3)L(K>[L?\sQ/&9*IVQu*gq1):4_72frl#ej=3sf^TjB>t">\57(a`b9VdpGWu
%6Qclkf9->)5!OAr2*-*cZd@Al877;&:)9e5/?5UQi$`VKkaTA<7%TsW.bZ2(4:Lp`Rs9X]2b\gU0EtVkE=OB[GRFG7^j(sWX3_Y=
%57p(I*Zc[2gCjV8D@m^nQZ*9uV%.=W3-*\00BP;WFZ_2UI!D2CZVq?[J3,&mA2n0t+%%hO'1bCNA]!O3a^^fFVZcrCY6=8$*;e+-
%*JCR6/f2/4-]STT[)@NnmkAe8'b"Yck'*J8n7!d."U<bA]a^S\pCX;+HYZ.ql8K8I'Uo+h#,3MrJ-/1VW(TrT,2gJQQ[&3b_rBO?
%))2K:5.pr-]l;rBoHKYO':0=InRqu=JTF7*N:/#8K=hHA1u,?(_j)SJ-4aZ4.eB.#_9MDCXA^Ha@Y<.>7e/@jIHV%]/HSX/0bjD0
%lr=j:ZkTbbjCY5R-H$TXR)5DU/WC$*(>NSje^T1Is)</Q:4rjWX@<A`&RA%a,Y,;)kmH9i.#@e00sW&1[qIuOJ.#Rk=Htf>68T^k
%M%I55@k]8>P]"UO8Zi95mSQeNZk0Nu;34sn6]XYk=,_\Is&?B?Jo98=ef3S`GQYoi[O<Cj<mAn82\[3%,%VWOUr_c?#Xk:XjI6I%
%qgbh_Er]X&q*IYP8#/5a%HNUc-D#Ni+CWr*Csn7FX,C[+'4e@BZ=RT_,IIn_Ld0j#>HlH?o"4D,ObNt!Bl:6iTr^3>)E];AX=i*b
%qVjN@^?c,O9-T%Q5p$T`B?db9AkmKs?\n!J,$'<`8_7^JOaR8R'Z_>X]6pus5J:)2o!d7dAnZHP,L0>R]IH$`?A:LI>&osg-4^(]
%)uF)X]R[oD^?/0XF:_o^KP"_`\TDf`'.Zhn(etLV>#$D%W41trJ6X?m5_&sQ+n_ZXZ/VFc"H=$u#>RU@ZN>XmV$Fr(\)-&LLN=uq
%,-Y"-V(4I;ESX2\!@8EN^At<J9oMuAHo0BXSCSY<$P6.pL(qI&jXGh_%q[JA/+U1>Xtk=++fIMA1t&J11U+5'[p'-"j7&tu-s;eH
%Bi#,'/5GKSidhujAJrB/.+ij(\VVr\K8G46AZeIR@;#cW+Jc;2<UCiTBC*c+D8oMR4IrLne3-Ma8Q:eadt9S?1iK?ZAP*qe(<GtY
%K-`QfHH9M4C#N`0!N_WWZ48Z'!q8Ve/r@0;fOQ5bOd$GE8-<$n8`EE97Y(]Ti2$2o^_/5f$0$p,d(I66@A2$n![T#s%`\NbBMkic
%6V^]qP[62?d,GJJV7f0P=jN!6Z]U`5-;!Op6Mm.t+uQ)nOF'GidMfPZRTE06jO3;6+k:(['9?ptaX),R<(0::Pkf==iL4#Blttb"
%5]>th/gEZu=r&pS$U$CYP[Xb>[`O`$#?WOEYZ1B#@.K8SK3/D01e's:mCM"bX:rB8$82IbN/)pY6f.?!;0,h`4;5MKpa?BZ(BB/e
%0;o1F!^(f]Lo8:EUk([S)$7Zni,0]efr:fPn;Eg*^aIU-%s8Y&L0RG<QcZ^gVnACIRbS$\WG5kENcjIi(C'+kTE\s&F_L;9j0[ZV
%.l-<#MgA;m^;6OB=I5$>e2478at#-!Lm.,KO/L#%_,;1[<SNKi`MG.NPJB\M"Ht?N!JZ2tfLhO[:K<(aC9$$aE(C$<cn'VhKhZeE
%)Lu(iCh09E]:8&#=e5p>*V%]]Zc-mraP+YZ-7L+^;W^PL8TZ.H@=ec3X(M#JB+QOZ+=>+lTbfO_5d6H5";k\1Y`8pb?SHFpMN]q=
%+3^>`d[!@tJ;N)Q(T@WqU^HHV1I]s>0d<c3E1\;R</m.mRn>ik3/F;M(B>j=K77o<YV2fpOC-cc/82<('UDfGfOts/UZ&lDc=tDI
%>_Fp_Sqk>h\&,Ak^rK1acse!G[!fdY!5/Co%+f,-N2l+`AS69DM'2gVlB\9DL-n8np^953BEQq@@"gpnAC4,.M\*h]!\Q+D!u$OT
%3a7IH,TIEi%bCBZaOVW$1?*3`;UBqG:@FFQ7E`hJhupt^,^&Rart4Em0El=aEK\e)b&a1/YX7NUq(q*8C.6N]W0!/[OHa&H9?a^T
%bR$"Rm(hHdcO1ARW\as[T3b%sVG[%:X.F.R#'7X[EfLd,6f"aK:eq'cWI:4_8dk^-&pY'TIOl='O=mtMQ6ENW:q(l$9D.CCa\,n2
%-7Bp12)>p)\IieWLtZM87[4lb7N'AJSSh/6FjI>?&uQPHkV3[n1?DK,7,!hR>,#?_8la&@#KNQGF@M$!o"_f\Ts7gR4g$oZp@0!6
%!0*!436?]l6&@S#EG7\m7sL.9S`Ir\"q`.qK;3TrAsP7"jB\1<]pL,XM\rDC6D?r2O\MHI21AYhLH@,/P:I$0''I%gWKPfren<-p
%4MK1HaN-g95K`dt<=FaD>3Mo<l9iBBI0h*`/Rg*$$\\rg%0J.TjsMNK+'1:]^=UVZfo7YO'[k2To0s-`_#Fd`/!9f\RhCGk*Z+D/
%\m2.'M?40S!gu^s?;B!FR!/<mJ]pO(%40"M\L^:-n9<:8>@MiDOs.2)0\.A*@Zd]./:.cE?r%Pj-`B6X86fahh\^j4(sV#<,8u;K
%fiUKCoWoCkBdYdJ.ZbuH"gLTDXb%jlQoA7[g\lA;)*5;(BI.Ze+?#(F&.`>Gd5&n/!?.gRptEhUg[-oFL,pMe.hf!u*EFni17D\W
%*7M4'0;+r$[`J*k6G%qY8Ze38=*#^1PKU48U+iLCE46HOA@AdaAC9%gKGbgbmce39$igQrG,1Nq!O*gi'L7;XfiL(T"q6G;;`:G)
%`bq4YpDL`._Fd$+D_6Mag;LZD6,$EPFe1N>dUKG)dDG/ooZ9c=]510`8YdD3N0Ti@h8Z*d`0JI8Wt5\5U2Wn;BLo4BlOJZ(HZE)A
%;j[,Y<W3Ce"bDJh-F0"m;WNZ[3fV;`X<&5G9/WV.Fs8'GFA\1u!rJGAkQ'#=Bpo\NL-H)8aIK)k@W5a8gF$rRl[Y-l=IeGDVmo0:
%g(`!YB`ph:Y-:V>=M&p(;M:BYMSnXtNR[[^M?J$Qal78U@*:g#$0$EWUdPEQ89c01W@DogLFS8@lRE(T+rsVl+[W>i\P9/gcm/*\
%Y:9td99XUoRNt8I-#'!B\p.0W>`N&0:mSHX;R3iTf@<>"g7/.t&18V8*](K+e8"[oR;GNL`l3QcmUS5=Fc:E%^q\J`W?7gs&p,.r
%DMpH)>UQ8$3P\BHqomaGcsr3G6]`KJo1FBgpF.\,p;WOB?53>^Ou2kpH<GqaBDP*,*SfD2^"67jL^H'6\u"'k^Sr$*r/Ab[6%c#h
%7#U)36c)fcq9@D=1<L.i:YZ@D!H?f/QtTNr@N<Q^#%HMtSO$f1OQlg1BscPY,Na%p\u']>,93XmSO"c?1(+AmB+$I6WS;(IFg3_F
%ld=@QpBYb?]$tn$FL!jFW$4*-7QAa]O?:*VeA!tFZH5F]1l0Q%&&I&NoU(R!X^t\&o'X*bC7R?MM:J<[#MqeqT>K+e6pI2`>^MJQ
%Nn'<;%h!e!!#6+pF<gS"pu*5\OUj:3Af\)aainYX%HrdHUSPo'UBuN<$?9gH_)b4E>o4r2KL98^L-tp5\])k"11HsEe=s[sV-F_H
%8]K587drdlJIZ9;iA;AX!fL&_oECdnQ6"o0Oq9g*fT1r1GqZ[`=ENM)6MuTe[ql;3JCgIPXGWMn"l=nSYmOOR=9T7[M]BEsXp<4o
%YXH8sPYOaRL`a;Q)=ULsTbn3f;].kp!dYS)oZ.CE`tcu1<W6Gai]s54Gu3Gb$!lS+eKu@@;CER%_#d4rWc,gl&:BMNSUjD31RJ2i
%&#<RSAIC`GGNR#cmM3BI72iP;:.ljfPo\^hp^0^&:uoG,IUX"KZegcs@S8O'73Ulg77BiPZGA>uGb_b\4A#;_P>K(k(<)Q_7N?RQ
%V8u+t*iGaQ`r@l&i+pC(7;(_0pdWmEOj#f@H@qigBfhG?'>R71^6dR^:!==T;?9Wn['5Q"3tE[2i1C/8;'^Wcf2N;E$R1gA(ZV6*
%"c_l$^I+#3>F_@R?MI<9>9q6Wp7dTmgI9D-d2Tk%B]S^HAFpuQ!9l+Qc4\D[)TacU9Iu<!UIh_'@of(O$^Kb-RhA$7=k/3Z!;Hq]
%6I>o<K(Fc+pGiWd!C91\oLd[p+V5f")(a4L",-fS&"P"sbX?f:&<mVeet$f8%,kYepIS6&3_KWbK>nde7D0kWPC[EPQX)4bBIokX
%PDU?jr*dt0K9E[j,_W0Rpm=e_V^F!B@Rl8V35^$1s/#f/?BL0N'V@ri#p^o%b[<>,=,Y7NnX5uJLT"\%HN]rig(f-&NRX4uIbYkU
%@h3&tf5@*.;Lgbc/O<@),JQ#hcrcLfd6V5E\3%!n6QhNn9Sq1c-c'n5j'o\he76TcdOSt\WmU>M[1cW[4slnV)&[sMQE!668O'O*
%0AsmI`B;JCns;XHdqW/.EXI+LZ:Z3fR!G9im"p+Df,'N)OJ@@"_Jeulq9dj-IS-[t[uVd=geGL8N]HNI\<;4Q9*CCNFT(jA'H'2s
%!@<+i87ha[:,Nt-,I\#bo.fP#qP*7JS,7e'/(43GUjYPgG5<%\=EI$Y3*]m2h!:nB9XL/=(SAh/C*X;S)O_ZEpn8(8E<(<iU!]9f
%C)rS&$R,>7kKq.ah7G4$DHZ8XHtce)-`/AdOjWsCm[uY_E]W\l!U+Cb+!ZuGbn.uPChL(N&geS9HTDa)?F4CIeR;LEl+E`MYis=V
%(X3BJ%UoEm*[:A16ag)U.utELFA`b[a+S6\Zarn5n3,<<S(ik>O?+6/!`4SB9:K?l5Hag865Y[%1HU^6YFs)_$c\hmhG6eY("49s
%6OsX0AKbU:>I/WL0R/s"!fSu6A^F6i!gJZ:E%EEdeJ#hjcoG:lPR.Mm\EPuiJPXC=er8#-3[<c5bZ"pFW*>?Pf3GbX+fNneY63X8
%"thCTqA>rL(*tRMF$Qig[#"@<PXi/&I1Vp88.Su%T#iX><]$?c)tU%:[CR1p!a(J1S$6dCnO4P<ibMS=jZDQ9"o!XJ6^n7[`q!!k
%-@\n^k*F(V4]Vc"l1e.Ufos,*S.T;G?YT&9EF3O.bTY(kXn7pJE00c^RD,7\_--P%ME7L*NF=Hm8A]]V7TgdbOE>`/(qVAJZ#Y]+
%>.F"+p)^!pj:j2k:9.GV43.D&%0SO1j.X!=_RrB)kgbme]>6H6G"FD<gJa_7`tO<J$j[[d+C.`C,,J"F),,Vj.Zk2Si@a%o\`=TM
%T,0kV3^FfbQ;S/S>H0-o)KZh11#rFLg^"/H8Ykq_924dXLn`O]\M`)X8%e.=77N2le`TKLBpPnB46#`Ie'`]8bbTdZ<8f9OTNH%C
%G8l/>9SsG4I1`UiLPOnT>`I`q/WA\2`0YQN:k+6kJN.-Z&U=mUV%X-t[kjpM*)p8W+VJ(p._a?mE^h#6QnVplo!LZNF.ulJXE@"/
%M>=/NB]37j7J/hHlX=gkP<t6#-f)*NL9@=<<eg^3Q`3#>r:>%P'O#McKjdLC"LP&U7IJiS:n!!3ZiN:q>-'#D-O%gHj(_?.U<q>^
%Bp!Pq$CA'6%nj8dqIS'iE_U3Qi#LhDGRkoRlpUE;JKaXl5cqbU#t47j3P2oM7a@lGCj;P%j),#^/:<0]^]WaIHkndKpG#f7YRN_d
%+'!S'4LOp*,0bDo1`P*-.9SCg&<,)<-M>9h`d@=H"[0kgMnI/0YV<aFZf03)"iZTJZ\ueIU)N7jY`kTX"o8K[6]6R9No*O2<9<1?
%O=&8Q[63qIF\8$9&,F!b"E=/:W*g6gV9_P8!!c:*WjKf/]3/qN'#6:Dc\T([Y.ER*b/,n@U*SmDEo2C.*O6&7JiV91RmthXH1CAk
%Pn(qF.U-O_WOG;/KqkT4B--?401M6F(A@HdS9`?d?.jE;et"-gPB(_>)Co"@2J66X%%(\%$>`TW,%,5K0Vu"($h0M"E5H(Aci]_@
%T#N3g['<_%js5:OOWp.p2(t1];J@6ZcWc--;_ePNiXr$k6I.Wmr`#_lWE'c"8=JBB#'3d3_.J3\'C!82/[ELO!nW0!>7un``Il/<
%#jOnk,RR*[RItj=;44/TB9JrTb>Qb*&i`uoJp.b6RNo'O=h(QuAUH&u\p.JX#WQS$86Kd$m!eeV^fnr[S02*Ic4k;#=j&^8Q#pYW
%<pLX^703RYHS`4hNTYiK+7Fl"9#sFj94RoV6qj@)&4iPg=`ggOE7SF%-IKB0*1$7eYWiMm#3P.!=eQ7i\Y?VO>)V8&n#uiuno7gg
%Re\p8<C`h*kufpIMaWT9c=@:._@U]>)(1&C7?/#A`ipAPZZJl^6P6]`Aq;/[a[(,UpX9mo<qiO3\N%h:!2.$LVM4Q!c9)3nB!1H7
%7LZb"VcGZ94s3e'iJ+pSFDu\;mt-!`nai-B$k]?Go/Oad/P(U#(=SRLa]ff6]?CA7//V#=-g"MpVl20AgmpM#,tXJ#Wnc&6q'''k
%]$a]FYUNYF:2?B2DY7V18CqP%6q&MGENii:ntgEtdkVP?)t4rKMMk;6HiSY@;\MD!c\#9C1IXMOEA+iq%.VJMfZAP?`&#a3-u=2:
%heMFubk&)uZ=M[m[-^`$`dA``mrYmN4h^c,8O7rukdD:RN-5rTG.,=@3FE+c$#Q7G_ERbrTdjQ3]Kq.VQs(JfQ1M$"`!niC`aIg0
%$o28,)MllkR'I]q9(f/srB.j:4Eai92RCB.jmX(7HBdhhck!u\pE[=`]+Q&^9lphITa`l^N4tBm5VK)FHPQK(X&P9JU4e5RdliF;
%$qMdM\B0hmPUlrj77kuPM`=ZuCK*2hd4F@J'j/>\TTjre0%'l8c+rQX7m8m?&/H")J-0&e.]tAmAoO[Z2+N?8R!QgR!UV?^_hRFP
%0<>Nj4UrDT<>D3ZVOHlk;cTh8X!k8K+E3UI\-sUoc#ImD_F(\C9.1j&A&V,Y[kf\i:`VDKiu0j0bKmJsP@>i('#TmF\V_+VZ9i"m
%92>O+):AbT7lJ(N$4mqoXc't&oHs^$\Nf\e4H;-T$P&nn^6n7=63(a7Tc^"f?]2^&8Sh04$O5OH?+@j5'NcB5I-\b]J+3`kTR)1!
%M.'qNO4?4O"6?e^[-6d`15*0BW!U''/U3dR_F8U55Km%%(bc2,!]LL:L+6/*3CaG/5Ug3]X<bUu(nds234pM^J&o@B\p5E`bN>AY
%O`.8Y*I/2-c4-k7SV?UecsrWZh8K@43:DDADbug(PsmN!<]E?Z%ojpo#[-2]<+WF5:sac$+Kp.gSUerjML,.?IHtQ<78OcWN-LN)
%e"]gK-jI8q)oR>$?h>j#$q&@8&Bi+_Tj4]QMgj.D8sCjf.j8J(_<"h"!D4X!Ul)ZD($8Ft<p8FH5Y^$k6R2e\@jE=H[bMH=C/&\9
%-==2NR3f^J$.t[5gH4GLlAXij/U[$;R;ls<l!S$Hj,<Q2,!(YMUKj%jQ<?fm;>Dd0oOc%W$LieAiF3X1*2\L+A*O6migB@6.UNpU
%-b'"QST3T0:C'+:AY.P+CX29BQmDmB(8F'e^!WR7@o&&/H!QlWqm]fG*X=#Qd*'q(@4TSt*"_8M2VoZFRgP?nB6BGTJLtp^;Sj#b
%6NeP(@+K0!Co6AXr>,WAPUI=,LuH*6L-(MG4f7JY@!P(J7<kNdLP=uK@DRUjQ_U<H8W'C5'/Bm>dMG)<+Vf68MMC7jDj:#!Z3+V3
%N+0\2c#t`ak6`[F[dVQmA]hPmH$-MK4:p`7`l@Sk-8l_%Tc24;c6F#',hg/H0^UClDQ8t9U]D25%A6gkT&"4B<:OW06h#X`Y"u_<
%l&&'jOk>huXPScm.#QSZCk*[TSLKIW;Z*9M+)A/K7t_;k=ep]-1d]7[($7E_Q<NWc$hq8US#ZMiYJ=+j/7W#A6T#A0a`D5jO%k&^
%27bo"0D(VU(M(H0L%*lV&GF,S,OU@1/:BgLFBjDbg^,r,Fl%"*b!KnH>gR/_J7M7XMkG=Y.Zp2J)@<0Ok(D:ad(qsM_uh7WB^pBj
%ZW&OBZ\V*jL^f)n#at8'^8oE,-&S"(A#BXEr]bulq+1ie%rG<t3Q/NkrI`4TS=N9Tda8cI_8ubEA0ghF(<pt.k`hN`d;l.i`Q@p=
%@p<US4EKA:d\8PCR_tS`Zj4#W5#.s%CDQ-YT](Ka/?9HD\mic_B.24FHH`YF+X=_()4k#WqSiS.",A]7pqBSs&F17.Kn2egQ&L8(
%.$'\\.45"k725s&SqmRl?e5_7'ihje57OXG3E&]"=ml_h(ULKq8;^c#%MM&_1F&N1#hjiu%jRKOm3K(6=`b@;REP_B[:3$H"cT;9
%)Bc5Fog[dG1btV_7[[otie!(^XB<gk>Z<<e>(#F)NKq`7>>,^s`\L&kR2*]\[7]LDLgfg#YW#T/Y*,4g^-.5;N;Apjk7JeInQdP@
%UiW=R8;.RF5>?8@Li56k!:M*;$8'XbQI2YEN#E,Gf`2$e$OV68R*EPR>nWM20P@4a]hL793MZ8E;!AbJAP!Z[So-_e^c3kh"fru_
%hL8@JU*Ts<U0Y"m(6[8ObZL1ec!mo/:ndd@)#II'P@c_:hP9@PP,QkLJq8=N.EA?d88$Se/q0^s[!cM[dh/`%iqpjtPV(+N9ueZ"
%M8Ncp:1ff$<e0`I#/k!u/0.(!OrXP4B'npKL>eXgi@].(-&L9Bdflsr2P2=@i44`MRgY@7c628:['Y%%8&2WmN'0OYH]n72d;>:N
%VsK.<6p`XG5[qUV@OA>)M#8UB8sJdqISp#\`pg:0(;Wq$k!^eAb/tY:%N)9@/(4!UbE]29'j@!#r^(\b>*C6N8ZRNTTXtUeY\8T4
%@*M9"KU7ih&<B*o^nr],E,r<N=0gr)9S4+IN'+YJfbYMsn5K.Z<HUQ6RBlq=;#Gj.kQoOt==]e-SCIbp=gFS-':CD`/35KJcl(aT
%keBI`WC^TWgC[1\ICMRe!,X&S9X;f&BVC>=)/la%VR.tEj[QEaV43E:'59oM[eQc!\.cHpW<88n'JLA*1.ePQ^1/i"@*+8+S%S*8
%N+D<d^8*T9[N1jb8sp#XFJKSdPu<BfTVT2_jBRFF5]<mYn6"3k-&D&skS?E\dRN4"g^epYZ3W,Ap%'RT''bF794&##)($Z;7F;bA
%Q(45U4D@'I?YRV]ef+q]`>V2cB;HV?H7hj`,Pj8V]g;=cR<[#>+knm)`R#12iKjde1UHaCQSqWb;&Ma$=hK,;PG6%W`k?7g7WqB&
%/'0`t;MDFDQF+rG=lYlSn6DjY<2V_$"-<rm"BK"n^mMTJPisQa((B7eCVPLLK5(Qb+^GO.0//_8LdHV;i,hiU97.P^J$iB8*'2?=
%@1!et91Qc\8a<5`3K.(pOF@S"E#!r'#d&8#*i^%kI8c,lj@-51rd@l1-cJ=tFhP%a&BgL&A6F!YREI`Z?Nb\/Z^hjjBrk%ZLfCN:
%[Bru;X">"t#nh]C#3W'm2%Q0:<con5TGYY<-'ChHQC'mr9JXog&k*ZBba)0:lcC5!^OOd^>SoJ]VEsgYCgI<nK6Q1Tm@pl-2jh3:
%-u<^Vp!mKoMUa3XDpnD_2KhKoM_VTXU)Nf;`*#u=I?$mB`i)K\Jmh;tLnq0B3ka)%G&\-ej1so:bHn-k($iU,`r(>:k[:A/X3Bp%
%*&/VE%%XB-LT3\Z7I?2BKUuRc=T1E!3ucAJ'd[G9(f5=rc5/kc*[?Xg6:N:[A!,r:78-6rMXIek:tFL2,pgig#E0gX38qq,P*5bF
%3a?b9OlV`JC1rI:n?#<B4qm7<jDi[Bdk8f&EpWC<L^(J'Df@)*N%@Ta[?8QWSV&X.ZMkD([U0Be3#OT[1Zo+>FX!c+;IRi3/Zq#h
%@aC^dWj"IfMS.;G/0t^eW:CG>$ER/[-NeE5?I?^IQqEZ'T&)93<)WnhcJksg&nNdS&P"D3NRaH0;1oZZHfg,LISZdQ'XC=)aK5$P
%U`hQ+j)"lsO>/Vn%2#?`,]n*q)\=BQ7KXQ5YbPjfD]5kgc[N;q_\PN:-2ajS`JL<^MNj.FFbaj+CCfZ0bq)YD9fNqhe,bH_A6i)E
%!iAL8b[^jS2mB-!IA<1'f\(p]"6`-c$G]0Nr:2+LR6cU9;\i%:0q04>Rn/XOD6)nEbb`ZuWKQUb3W5o@6![,,`(nY^)Al(*OC+P`
%OEr/:8-4W:`GOT^/K9GpW)P)P[U(\S7o1&NNQ%8"kKV1t!r\gWr+(O/TL]=r+\d(_F@.]CJc"dAH<-/F^tpI$L:@`30?Ebc'M1#?
%6uU;PHqXg)DIe"1mT3O5d0fd`.RQl9ifJi#K$G(33e[/a1Ue1'!rro75JY\:9#kO#GVrmrh#>$UCCs"hJ4QJ%V1CYMa5toM$R7&^
%$F`An!W)qkS6h+%.gV3X%L7a7aFNbP_Q-6J#k\sCTG&7**Lk/M5kXArSOGg\4G32[(qp,[akIMG"aX1u/I\_b'jVr^$A\mo//ZO-
%2g-$a/EpPM2&_QD;*gkX)_d/3!Ou:0ciVRqNUE:(,P:cH/u0$*!h#E&"@?4gM9qt`Q4`,!iW:i,YV3%)3IsuHNPqQ]bUkZ-8k&6A
%#t.@FdtW1uYh(5sL]r1H\g!>n7uE>UTuCNbf*SGe6;W2VPd2dk]tqTKiP>PkfU<rQMZJD)I#=m7KPlY<ec`2]T_<'sNRj*\TW\JE
%;&78"03cLf!ga2]"8Qu!KlZFF+XE/+@Vs`I`lgIK,:c(82ur@fR?YM%K*Qegp-9+g-W`Hj@WJ!UJL>lG0#H2!FjS@TB>dc',?abh
%$8cc\GJUB61JgN^Xf-dVLl>,`h8t`]HPg+PJfGX]9S29R1VASa#pqdapI*KF9ef9s&mRH(D8?Jg0nW#sGn^h0"_o,[MTI[jg4?b/
%k1#,'Mc;qePO\'01__pOCsFZ^QlFIK?u@Yc%6VBRD+3GJ>AI=jpbpc$@[tH(l0PAd!@eNoL^*V]Ld$J5$3Qos),0XV^EdQL(+Hh$
%aij<7KS:Y+JE`;aV:+9s946j=XbS3b0IN!&$C8&NV36dfKDd&9^(eLF_@fiC]@H)KfW,>\F?+JHeHrLZfG=+#1]S*`"Wm_aFKg.C
%0&a5n9+8YYU&uRp%NuP9IM"3qKcXs04IT9-#51pt(d2KQ:@"h:#B>&b;+digmUN8Jee:UmLg-l/P(iCN[*kZg12DcLS1D*(aZ?nO
%Y#mjf1jqr61Jb(b5cQiDO@BTb*dC>j-qmUY+E2Zt+Z"[!*dT+^:\\a4@jd!k`qtBJp3Gue--8;I,QO+9mU&t2,9DAO2:[L\":nQg
%-6tW06+YFa3%>E4JfQrX#L).3>ccPE8lS6UgQp;H``'!kLb17B^,ES]aLXCoP_J>l@c*=]S>;#4<u3BLM7Ng>B%WB]7*ZE$<FC*g
%%h2UKFEot'/M6WF-H8)Q6*.mkLG3CD7^&Tq_*)"Z/-[\22l@!,>'beg,l5=hkj;DK@!^NuD&WpL!M10R9gH,lqh.V18S%t[3%BF9
%GJS6]ap)'tJIXJ"'<E)a&j:Q(ZG:phJmdF0-."ma\6]lPB,qOC[0r*#=@S%b,PcRU+$p5KrW!qF2kUfT_M@fFPZ*`5+]Qa_7HVW-
%IL!9#R'(sYEeqgYCMLu?AIHYROJP&nJV(_*C(MPA8f68L-;1<FDg3d>N5eJ.$Xt/$Gj1A5k`',fBIOY)Lj/nKIS]4s9R`ed]TEE?
%R3;UnO(dU%8>W%^%'F\[0jG:&RtEDh1)K+@7T0`h,f3BO5'c1pTed`ZUU(%8Qs>D\6(VRF4rXWV'ZI>?K;;8;HbTjg\=kUC&r6"<
%OT7]"I7:.].p6eOO54"Lib&W56`7k9*ib?a;g^/'etfbkWGp*6EcZp/"sXh=eUp`=EESY("`j&Tp;5Gpb%:aC6=k8$p>dg]dMWRl
%?Vor2f/$Q-O()h%#LP+J)e"+`=9*k_fZCJJ[ct<A,Yq^+5W"dsaPF`.#1O/!R.XK)6Ai266Rn*!%esqG25V>/h?AL9acj4>WAQ^#
%FZ)H]iGUqtUhoHBZKFsGD\;^eIOil.=BTLXrp'\`cCt`gRc''?>Ik84VR'ZBb^Bh%:fasJBMo6JNgF5'VtbuCQ;mZ*'/`!#1F2i)
%+TjQ.W5<s,n\Bq][g:I:/PiZs9`fT\".aHX@"N']Qg'f%rf:O+O]c-oAqt!;6T)1I3Z0J6.hXQI(b'-JM\UBuZhcDPDM'Rg]eRWm
%r6<AJogLI2,-Y6=)(2.'+D%TR:EUa1+^)p+)VY\=G.AgE)5'YQ37d1Q64<HUhi6%\Kc]9mp0$\`%8:[d=$]u2-;Z!ZXN3TTZ4ZDF
%$f\CsA;1#AjqS=TLP/)SBFl*DQ0BL^6A):=!?PL)q7<Co)s9V?Xkj@D@Q&^CHmZCd+TY\iCDJ1JYc>%F.TV2O9/C2g/_!Mr:Q30\
%`(AJf4>o&t5"5/`RZPNP`3fd\"/csL#Yl:PQXCqi\epkK-K0Sb<E)_'&M1TH]]b>$L'Sn,EtE[C8Pm3^T#.!T&O7L>$a,K"FPu'q
%L5'&W7f4(]gDZKY2rWEY<pftF8WGMB3Cq=[94qR91;6%t-@I[H-V($o=n%$qI2ERRcr4DHc&Apu.I-roJ$n9FkXso371"3DFHWX(
%e'[=[UreM^'m#5V$??]:fWsnN+:)*u(2o,Ub)d98fW?,PBL'X:#.j:6=tUqP`Q6Mm(WG7d7#,o1\kj?8g(cnJfuj0@VMYrG^LY3.
%X[_j*ih3V?0`i\.BK4"aidu3788TSXLI*P,QnGHU>/Wtd]TOYq>;e+AAl_*!$7[usW$KqTH_[>kE:/iQ^MKm$rkDQ`XLi35bhf;j
%ogR8;@f]&^-XUWY:pa?XnVJkrSH+,:0eos[=h1j'N&1n>,/BD9rbG5'$,WLU7;p/FjY8oe2,@)URN*$_1/HcLYo:M$q:8]/fSJt:
%B:b)sX;FMMZK<T<@PR:g;Qpn:WsutJMRT7/^CLdRKMJG4<IA3=kp0jJl:NUhlUZ`t"S1<Oa05SIOXSmm<[/k@TU78JSA`0."?l(P
%_TP_]F`2CN@)=1-[C[i)M2En8.Q1F($XuPp#YU?Lq>r1>6ma'OO;0m!3a2:-^TI_/YJUm1(*-%d%+?2N<@22Z(=HXlfP>VSLf3Ca
%?tE:HN<t<$<R7q^i!5d[T7b3+]HpjW1+F_$OG+=K^'Z&n0J>F(*<nPu.?_QCqFr^<3fnHkTK+7g:Lrrq^C/&h+(rZaKi#i&K<Y6K
%2$k&:7jCAaA-RU8N/N!ec:V*A\#;P8FphT,W'AGJJn,MIb0hCTb%_=0$nISlNSKG8(VtA@qN)iBDRSb1?DSQ!oGHn;67)'l\P5"$
%2ZK<GbR7Rto-Crh<]?G[HbZMEb$1#CSoBm4==OI3"m32;kh\TM@MTqNm,ADo`hghM-6j*F\%W'oN9E(p7;#;gAS2QR*1H/LH!TZU
%BK=csaA%<DR'kEqUcH3=)^UW61[r;LN43fS(Lr0[73Ij+SQNl`8pH]qAN]?cjNJTH2b&Tl\_nIo*p^-ZFgdIV'P=\_9jSEbX>YWc
%>dAr1-!J\`VO*4[;SFRMgtC"Oo8Ab$!2.^Z6rn,S]U@I-aJ+LRBA$)YS_=P0#]TRoZ%S$e"J4sJ$l-'5"E(I+(NX2Yoc<PS.'c@J
%pTm,cmF`PTLuGDD4Y-55Y[#0#R:e,VSmha\pPN]`pgk<^mL0RANXqZmnaN4qp;OfsBAX)!cN]Ou\4*P4-_K1c(^6mQ8?Z=<^(jAj
%K4U.7P$n<D#E]12SWVICj;+"jRI-%sZ[s6Q79mBO!;Uh..`i%+8XF:%#uo8_JB=<<G#fk$=X2EeaC\ZLR*`TA#`FV0[P[0`f2,UZ
%$SB&kSqf&KU<Rp-]I\;m^25&h;_]j,5)IQSBJ?DH3mke"^s)<4/?0Tj*R%V?kJmnn89?OYFT=1O'k7/_8okMF5o([bi#_)_O!Sta
%fE:3T!CE.U@1.ikQ5ECUAkO5>;M(47!]=u"/N`Pir12Le/Y!R.0sZ?Ha-PhD"%um"Q%CVW89f%eqQ-42m10b:Zl6WXgjfMIDs&Hi
%'0e%$M1K)B&/#IkGFh6/o.5W(j:%tZCHSG$mOcFWg(c[sk.a6p#KS$4;)rr8,uM![kUI9N=R3>Z/.)_"W*j70Pf]`Gj:.$W#6b;6
%iNjeE&jnW7Q[%1QX&I,d$-l/t7&sQ6'SO835t._C6.+tLOB&B.^s>iZMGlj[13r`Dk1c].J;2&#;8=@=3R'GDdaA0u!BKLXKMkCm
%a95*s4OMn'&M[Yg']TV+IO6's)@:["_.^;Tk#E?\=KPMFB#V9JHAh%sC`s*E*&gW1<&CmoA"Y^`$7E2g]/#/p.o(UaSRRnNK:3?C
%8`Z/CM_H/UaFcc)T?\_m%5lAHU_M/`EJ'C:_=Yf&Mf"!q+?6XeM?X`6he#q,A&ccVG``&\(?I1_Aug.[3Ho&K3[$ppPa7dQ0#O[K
%"tPC`9L'2B+VYf-CW!hq<If_2qDE0]L\]%]mL2O:hFO7D!C0t9n_M=^7X^soCTa]:,hbB9]WBgVCC5U^d]G/Q[7c9'X1.st1[UL,
%"hp/:`3Jg9$D90-Ru'Zr/kbU&reBQ58:0,nIMbHgLRlUm#`YhdLXW2$8MC)\G<um93#ej_!DOn1r#i/T%<2s.?:SL@<gVO[(8V>O
%csoPuS]-f9]$AeM>[N^[@O''kJPWI+]p,Hnd[cV+(;5j/)*Zik'@b:OJ<GV-&P-gG!=k/<9<(L_XK%91QU6XFETGb\#e#Xm(k@.9
%ij4rHEOL*q>HupWM*5eVFYrCG_V-?nT2+lP*%;5,b1F1Si&ut!%IR17SFeSm#eJDS^J5GmL)%3i$j7Z4TcX"6Xsb9b'EQ=T9I=P7
%`*&\foMUJU7SqGu6>qYs_Kjd<QmCp!L#jQ$Rjlo<lYNi4W2kj'&D1O3WF1Dl)Y@oE:0e;+TGsPi#*_#1JEbX.h>qr`?3<bF<$oCg
%pdM.C*p*o5N40H4?QAJnY6E)Dk*Hu:$P4I(9=k;ma9_Wr)5<,-p,?U%\nX[qMRW.JWD$]M6+pB/LI$+=nRB"_*n'G2<E:^jR5Ge]
%Z2`jEEYa9s,L$HW#0][B$SK+\keEM^#K8<c0l(jNTnWJ`?<l.j_H3cRbi1<aNCAbqKa;^BB.fJu7m1`Gg#P]r@Y#sr>(cWLJaT2L
%-2%T?>YPR5L0<U0KcZG\J5h#Ro3%83I$:[BN\/q7"">YnPQYmF,(HuF(tHFi,D7'9)D]%2-!6R9`XtRCH69>k;;W:n*!:\Km>(OQ
%_56C',*3=po^JSDITOU6McnG%`/6N6<7F^r!cJf(I1'`(``D2"XWW"!DqpKEZBi&Ff`\5!U&e.b2sQNm(VVPci/"dtbFG!d&X^ZR
%QC[P`&I0o&LucD56s5J,<]OsgJFl!*.l^1RQ)V<gd4+Na?BdI*BQ;Qjlhkdd2Bf1<DDgr3_dA^g`?1[5o$&:T$G7%%8F-lHWR\q9
%S_5WOHI.&09C*PB?1oV03R"ikVi6!mFNL#0?HmJ#2(@a`>XSU5Sb$3$I2Z.;Bmbk@%Ei/'W!-Yj_8<UtU5Eu9(+W4FbaVD6M:aAf
%!A/?FP#]Zd`MUZU7(%6=Z_55ol\lZ8K]%t_$`C&U>&iP<@:*WsTMa6t&UOKWCHJ"d^Pt%,mfW@qGN37lAk&QC/DH7Q_9af,iNA&X
%0;_S#`A+jogK3Q^cH+U4\nbA=-Bddfs3^%U3A44W7)g^rA^Pm-7Oh5-BarGgK+@mW2#W+eNaS^;e$*)!U/6`+/-D*1MN]qU;TGBH
%n3'TgN;N"Q=Tl"WVseU6$KY2\,6OrGa7bAIp6Hc7oMqCMc9se8iC`omf>..]A!]c`Cq(FW&tS+_(td+1<SIAG:GOShS4cNLX-&TL
%_FX9L@lEM4?Os/eq/V.+c@>_<W7WmT"gak[]'K"&FhtFT9=ELDkDjpb7J3PPZN/ZjK?p@dX(!]lXN=Q0E-d-YdT0:G;6^c5EJp9b
%RLn*^B\,DQOn9l$r(-EO1W)OZkJb;q8gBTFZ('-n<OTC9AmH-VnO+Mr(.4H+5a=o^NC3uc/GD._S%@in1SefTnL8Yp4Wi1Nr38Er
%laC.BZ$jkI<X*3rLdg"G6S-(ElS#jAV1LJ9_dBLJB9o.'j*!5jetsM9H]Qi*1+J@p^2Nbe8/GH^:>Y.(Qp0(+<L'r4o4lX;bKU;F
%#1u1GbM:^g\kA3&'-'H^8elG@7o&BND*HJOe/H`S7nNAiG<oGm*n4UeCXdm(J1;)to<-Kq1dprURTEL9(ZBOW4mOTGgOVbpPNc!E
%=&82Ys$]gdn8cJg4n=?e.&1DtCnNJ[h=8=YZ7_tV:`qWA<[p1=&lPW=V'&<ScU:)t^41Qf,:_EXG.@io/7$$.\OVeT@5,1i)_?Sc
%l'Tn55`e8hIhXQMoh"6P[,jrO-s4IBlh;?T4Wf+!\G#h*jPpp`M+Snf*,]dQIpU@Yl^K#W/M]73W9DQ7O`^#d4)$Ye3Y6AUKEY>I
%F,/HNQT1;9M%7,R;;hr4*ahOPF_XCG$FTYF@QA9p2#]iD7Apng[NJhIp(G'=HKg-M'je%AS$N?W`q7lph<HJY5Qur`H_(F"@<P(/
%'Jf*Yn(ifXC6U&[AHGU7S3L1pSsIClYV3fs4Ya2e<&>$J>[oU76o\"46*MjE!QFHRT@Oi9=@"qT[@C^J:3_o3:th1]W0I^F$)nV^
%#D9(b7`2j?MAtXa,5bY;LG;d/i%Hnp]-SX[ZrdG"bu@'Z6^)4-^0:ARAPAtTEheo\PLACJJCs:d#4st2SFK]YNjh$Ydhnf+H])El
%6sRO1mdXjf.%m)_g`pu#dY-%t8.!jY@"lt-^t3hNFVjBIbB9e/2i*)nHcCQ<H$*dRmhYag#tubc(IiQNF@V=M$8KnMP(XU:c/Q*.
%0NRI9][2S:%mdQ;<@-d];J'N`RoD2(Lbq?N#`u=s._a/FJN.-h[G'V&(e"7'`g_5#?f/RPmUA/a+P0CFB!MH.Y9L[,WZb_</n@)C
%YC/l7Qj/]RKsA2H]7+%!.ZPTO*DmY!]nARfb==ut&sbleH3AYT`I6!BMEdd9!:DYK(k@`JKuk!ChVZir_Fo]4%tN[8iW6k$hlQ^S
%LM2LgM[l'p[;gl"0tCm<6Z9fsQ536'2Ho$kQ;c(P@aTqCgaHMZ.MnDqT!i];3&^f[=p)is8=Z)RE^ZfI);5(ZR7T3]bu.N`JacbU
%)C:b_FA>*#f5BgXJ.Y;Y,pQd(,mdIP;uBJ*(e7aUd(6T>iNr_f>+>4,K5`]o>;m9.PT%pl!AQ]"Za(<%%bqMInm;h0PB>q=NaBQu
%L66@\:!V5;i2A<@n\\i()JhnX:$?&T6/L2:E9,C`IfVKS"T.__FV`",BW2>fO3RrbD7c5&I*/tQ#R5=1QmT'UQ^;)_gfjqLi7SH]
%1F'SBH;sZi`5UHfn8gn9>CHKg@MS`0R2+/>8?kSaW.tl7bB?,I"5l<,B(Mi>d,H1S"N#O$Pja&A0N&N1DaY54P*H6@DUEZF#>ud9
%a<LI]GV_^#,<!fiNgds":-)=COW5.X+2L_><[SmM@LPB.\U.8,.a"p@K40PGfT)>USZ^Cufg`qP,H._I?#FrN%Ke_Qbcq0b\Hp,j
%*6)tfhi7umNH86Zg&"X;`SD;?G%B7'TDG=bf*I1/Zlt0*%Kg]S]r9ub<:bI?l5^gg:W:7WoU[#eY&qNlUlhtl"!RYX%t1mCg(b>C
%rmb"8_[1:LJKK.u>e(HU<\'.Bq%pJ%qQSgV[+keMK,nX;mC&f$KQU&B!7u,[FHJ+T_6#7\+s?Qs?NA^9$t9C#G(quj.W7f,YF8R(
%(E[ij'tX`Hb'UMg4.t81A0TfY=7h*s,Q%]]cj;Ec,T8F_#GU@Ca(a@lNs.$`g.&+&_?&DXB3dl=_Ld^4n6-)qoL/"C;%/j:eg+h+
%ds<1ee"&nUTt?B&ErcJSj=78ebDmr8%'o6/Epi)dcak%`YXCeApY(A_#idW/Kg\Qc+0.8F>#(DbQUY$;WZlA8cBWQQm0GSc![]3J
%^8Rt;mlp)1KSOo#Xa(gAMA#_&-sB\r?'S88+#O>^>R`bhZs6J.Wi$#n/BJg"`<s*0Lh0!RE6Jm1[&0Rd)l8Dq=fuWocN?D+ng0U=
%Cuu-lNIio,Q.D?e7p?Y5KSbMMA[Y.p%kDHPs4h5Bd?6fCdm)>:$oQ)k0GcO+UVupU;mh9<7&\n;3M49LA8>[5+,.3\(R'0Ae_tK$
%ec=)gM/1/,%iTf?,[T$/$6&mnabK&40fp:._P-/'2XA*#p1(7ZZ'XkaJttq=#>!sD,*n<7,U--d^?3g@>Xkd&ABWtI#+iWBjL_2-
%M<^;MlNo`>Yo'Oh^;.Kk7Qc1":#-Xg1qK.EZGRE-SXM3#?/B7HK[FJKTE#U?GQ=-LL9XQg>IPb=L;*.VO*EK^N#SZ\oBsuJfQu9s
%Rl()noDnDqfO@%J!LVDF(A"ZZ@+Vk_E6%6ueof50Cg"X1V\(N;h&LFu7c:44a'"@0`q5E$dLA*H9hT3CDJWZ3=c$61dO:Wa/RA/U
%^X0:p%>[Z0-t24UG'YH*>X.92O#4H;riMm&.oN"orM6S6($-5!l06TpXTL79Nk@,Id8-ZL$iZqqnQHb7Q:>rO)u:u(aq_DJ[qf2s
%!)An5LSjT@g18-Dl&LAr(&(sHGFJr[9RaTgV6qOG,EJP:-n7<q_klTI)7QBt4D8jb<)Cqe,pM&"E1fM:5uce7TaOHYZRldGl`&jQ
%Qio[FE)F,&2V]=MYUJUph9$cRaPc`B>dm&g=^eZO]40ZA$Z[_8K]XKoZK"!ET6CQDY\Tg_;%So7@H/)Zb[a^gN*m1HTkRABd$dj:
%.UM$QUjYYh0*pM\>,ct[6jIcZ"AAIMpnipQ;>$V9H0L0VmQgk_`ufZ^*CXGTAf0/@?:fN<Z?6+@<']R.=kX^6>fZ;1`i/Z'Olt&Y
%&f.oW,3a"0Cn"8X1p@nP8=uq'%IpmZkT8><V$q'-J;%YA=3?JVU#jE6L7?k`DQ@HH.GP.WPe#pI>NFIqA;oh)['p`e[g9ZEN%"!Y
%^Am"5'O#?Ql'3be2aY^]H>`4hm<Mq.9c?.%Om[gtRSQO;7'jNte8^5tRb7]A1lsC>kl8*bpnCQX&D3itEf&1fnU1VN@b"=gR&Y@I
%p*G<VrTr1l&lX*VLL#<N!L=E5'#:"$=$gHF87/9Si-qrY-3*"pZs,C&@;gQJ,!1br1NBHR$X4q'haGnD,a6G]Mf4oY!QIH;(Mqge
%E0Q'7V"5LX#Cr=".?q9/aR&s_'@rcDS)Qn4K_SFHaQ@4p>VF29N;QPq-CgI+"s>oW+uD6D4hme:Z;%;Sl.s(Fm-Z8/rCt@PR*Skt
%%5](cPg!uZ$bd,E2Z/qiAp(81CTg$']6/OHR+Q*?.j6^bVZ\GE:6(!NM*Klie4]EH9Zi0=Uoq+"Mn@Qj!8nB\g+C,99\b8;oatC7
%>e#GMqpA=Oa_dKfcNr[')GqX&LaPE(G4[\RU9#2K@e*d+p/.U0oXGrEoAsh0s,1%X-+W7[IUN/.*9j"re9A?D2/D2Z+PJudd602X
%IfDqk%#E4h:EO-d)/`0hoNIqN<1?gc[pDt8YLKe<)51K=OV"2#3NS3I\_;*74(FpqV\)W*>,Z[?<"fdQln)WHrub+'[]628P#m&T
%mDqCXm5aK8OFYM.LZW#$>*!IT8UiOq#,5eSZ>dDoc==VUJ)Qqs3K*7a8DORukIug>4n?JO(,[2E-2A#+0D]W$!;A3+%@($NE*%Y^
%G!uReZI7ES%*[k8rG>"R"fI^=CJ>Dg=#Y8!I&D\#ki>Fs"U]CY1"s$dSnr@CCdB&Z\)*IeABD$-&)'2e,VLf47&Ei#d,qW(Fh4eO
%%83]`rn?6.^L^Q^rn[7nhu9>Loqr=MHi<*a:S3+2i>Qt6V`4(9rqu$*huE6=l20r+rVYgRl/BmB%j+$Nq>Bm2l[M(1qt0OPkDu7,
%Y3UQ7QUZ)FIDW$d5Q1-HhgbABc/C#O~>
%AI9_PrivateDataEnd
